{"ast":null,"code":"var _jsxFileName = \"/Users/rei.kawasato/Desktop/travel/src/pages/chat.tsx\";\nimport React, { useEffect, useState, useRef } from 'react';\nimport { makeStyles, ListItemAvatar, Avatar, List } from '@material-ui/core';\nimport ListItem from '@material-ui/core/ListItem';\nimport useReactRouter from 'use-react-router'; // import classes from '*.module.css';\n\nimport HeaderChat from './headerChat';\nimport userIcon from '../assets/test.png';\n\nconst UserIcon = require('../assets/test.png');\n\nconst TabChatOn = require('../assets/TabChatOn.png');\n\nconst TabMapOff = require('../assets/TabMapOff.png');\n\nconst useStyles = makeStyles(theme => ({\n  chatDesign: {\n    position: \"fixed\",\n    width: \"100%\",\n    backgroundColor: \"#EFEDE9\",\n    top: \"10%\",\n    bottom: \"25%\",\n    overflow: \"auto\"\n  },\n  buttonDesign: {\n    bottom: \"30%\",\n    position: \"fixed\",\n    borderRadius: \"50%\",\n    backgroundColor: \"blue\",\n    color: \"white\",\n    // zIndex:100,\n    marginLeft: \"50%\",\n    fontFamily: 'メイリオ'\n  },\n  selectButton: {\n    width: \"100%\",\n    minHeight: '10%',\n    justifyItems: 'center',\n    textAlign: 'center',\n    padding: '30px 0',\n    position: 'fixed',\n    bottom: '10%',\n    backgroundColor: 'EFEDE9' // zIndex:\"500\",\n\n  },\n  narrator: {\n    fontFamily: 'メイリオ',\n    // fontSize: 20,\n    display: 'flex',\n    alignItems: 'top',\n    //縦\n    textAlign: 'start',\n    //横\n    color: \"#994C00\",\n    backgroundColor: '#EEB57D',\n    borderRadius: 16,\n    // height: 60,\n    width: '70%',\n    marginTop: 20,\n    alignSelf: '',\n    justifyContent: 'flex-start',\n    marginLeft: '15%',\n    padding: 10 // position:'relative',\n\n  },\n  yuka: {\n    fontFamily: 'メイリオ',\n    width: '100%',\n    maxWidth: '25ch',\n    backgroundColor: theme.palette.background.paper,\n    borderRadius: 20,\n    borderColor: 'blue',\n    padding: 10\n  },\n  yuka_label: {\n    fontSize: 15,\n    marginBottom: '0%',\n    marginLeft: '20%',\n    marginTop: '5%'\n  },\n  syujiinko: {\n    fontFamily: 'メイリオ',\n    border: 'solid',\n    color: '#7088b1',\n    borderRadius: 20,\n    borderColor: '#bfc8d5',\n    backgroundColor: '#e2e3e4',\n    width: '100%',\n    maxWidth: '30ch',\n    marginLeft: '40%',\n    padding: 10\n  },\n  avatar: {\n    // padding: 10,\n    marginLeft: 50\n  },\n  square: {\n    width: \"100%\",\n    height: \"900px\",\n    // margin:'0',\n    backgroundColor: \"#eeedea\"\n  },\n  bottomTab: {\n    position: \"fixed\",\n    bottom: \"0\",\n    height: \"10%\",\n    width: \"100%\",\n    backgroundColor: \"#eeedea\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    textAlign: \"center\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  bottomChat: {\n    // border: \"2px solid\",\n    // borderColor: \"pink\",\n    flex: 1\n  },\n  bottomMap: {\n    // border: \"2px solid\",\n    // borderColor: \"pink\",\n    flex: 1\n  }\n}));\nconst orderMap = [{\n  sentenceId: \"4\",\n  nextSentenceId: \"5\",\n  personName: \"ナレーター\",\n  sentence: {\n    plane: \"東京駅に行ってみましょう\",\n    button: [{\n      buttonLabel: \"\",\n      nextSentenceId: \"\"\n    }, {\n      buttonLabel: \"\",\n      nextSentenceId: \"\"\n    }]\n  },\n  reply: \"false\"\n}];\nconst currentSentenceIdInit = \"0\";\nconst genderInit = \"0\";\nconst spotIdInit = \"A\";\nconst spotNameInit = \"大谷資料館\";\nconst scenarioListInit = [{\n  sentenceId: \"0\",\n  nextSentenceId: \"1\",\n  personName: \"優花\",\n  sentence: {\n    plane: \"初期値消したい\",\n    button: [{\n      buttonLabel: \"海外強度料理にしよう\",\n      nextSentenceId: \"21\"\n    }, {\n      buttonLabel: \"お蕎麦屋さんにしよう\",\n      nextSentenceId: \"22\"\n    }] // important: [\n    //     { \"海外強度料理にしよう\": \"B\" },\n    //     { \"お蕎麦屋さんにしよう\": \"C\" }\n    // ]\n\n  },\n  reply: \"true\"\n}]; // const travelApi = axios.create({\n//     baseURL: \"http://localhost:3001/posts\",\n//     timeout: 30000,\n//     headers: { 'Content-Type': 'application/json' },\n//     responseType:'json',\n//   });\n// const sampleInit = [\n//     {\n//         name: \"yuka\",\n//         text: \"大谷石の採掘場だから、石ならではの温度なんだよね\"\n//     },\n// ]\n// const isButtonInit = false \n// const isButtonInit = { sentenceId: \"0\", isDisp: false }\n\nconst isButtonInit = false;\nconst isReplyInit = false;\nconst isBtnLabelInit_1 = \"\";\nconst isBtnLabelInit_2 = \"\";\nconst isBtnScenarioIdInit_1 = \"\";\nconst isBtnScenarioIdInit_2 = \"\";\n\nconst BottomTab = () => {\n  const {\n    history\n  } = useReactRouter();\n  const classes = useStyles();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.bottomTab,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.bottomChat,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: TabChatOn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229,\n      columnNumber: 17\n    }\n  }, \"\\u30C1\\u30E3\\u30C3\\u30C8\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.bottomMap,\n    onClick: () => history.push(\"/map\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: TabMapOff,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 17\n    }\n  }, \"\\u30DE\\u30C3\\u30D7\")));\n};\n\nvar btn1 = \"\";\n\nconst Chat = () => {\n  const classes = useStyles();\n  const [jsonData, setJsonData] = useState();\n  const [scenarioList, setScenarioList] = useState();\n  const [currentSentenceId, setCurrentSentenceId] = useState(currentSentenceIdInit);\n  const [isButton, setIsButton] = useState(isButtonInit);\n  const [isReply, setIsReply] = useState(isReplyInit);\n  const [btnLabel_1, setBtnLabel_1] = useState(isBtnLabelInit_1);\n  const [btnLabel_2, setBtnLabel_2] = useState(isBtnLabelInit_2);\n  const [btnScenarioId_1, setBtnScenarioId_1] = useState(isBtnScenarioIdInit_1);\n  const [btnScenarioId_2, setBtnScenarioId_2] = useState(isBtnScenarioIdInit_2);\n  const [btnText, setBtnText] = useState(\"\");\n  const [reply, setReply] = useState(\"\");\n  const isFirstRender = useRef(false);\n  const ref = useRef(null);\n  useEffect(() => {\n    scrollToBottomOfList();\n  }, [scenarioList]);\n  const scrollToBottomOfList = React.useCallback(() => {\n    ref.current.scrollIntoView({\n      behavior: 'smooth',\n      block: 'end'\n    });\n  }, [ref]);\n\n  const selectBtnText = (scenarioId, planeMessage) => {\n    scenarioList && setScenarioList([...scenarioList, {\n      sentenceId: \"\",\n      nextSentenceId: scenarioId,\n      personName: \"主人公\",\n      sentence: {\n        plane: planeMessage,\n        button: [{\n          buttonLabel: \"\",\n          nextSentenceId: \"\"\n        }, {\n          buttonLabel: \"\",\n          nextSentenceId: \"\"\n        }]\n      },\n      reply: \"false\"\n    }]);\n    setCurrentSentenceId(scenarioId);\n  };\n\n  const handleReplyChange = e => {\n    setReply(e.target.value);\n  };\n\n  const replyText = (id, planeMessage) => {\n    scenarioList && setScenarioList([...scenarioList, {\n      sentenceId: \"\",\n      nextSentenceId: \"\",\n      personName: \"主人公\",\n      sentence: {\n        plane: planeMessage,\n        button: [{\n          buttonLabel: \"\",\n          nextSentenceId: \"\"\n        }, {\n          buttonLabel: \"\",\n          nextSentenceId: \"\"\n        }]\n      },\n      reply: \"\"\n    }]);\n    setCurrentSentenceId(id);\n    setIsReply(false); // scrollToBottomOfList()\n  };\n\n  const getStaticScenario = async () => {\n    //フロントかバックエンドからシナリオデータすべてをとってくる（これまでの履歴と、次のシナリオを出す用）\n    fetch(\"http://localhost:3001/posts\").then(response => response.json()).then(jData => {\n      setJsonData(jData);\n      jData.map(scenario => {\n        scenarioList ? setScenarioList([...scenarioList, { ...scenario\n        }]) : //新規\n        setScenarioList([{ ...scenario\n        }]);\n      });\n      setScenarioList(jData);\n    });\n  };\n\n  const processScenario = async (btnId, btnLabel) => {\n    // setBtnScenarioId_1(\"\")\n    setIsButton(false);\n    setIsReply(false);\n\n    if (btnId != \"\") {\n      return;\n    } else {\n      //genderはバックエンドでやるのでAccessTokenとAuthorization\n      //ログから会話履歴をもってくる\n      fetch(\"http://localhost:3001/log\", {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(res => res.json()).then(jData => {\n        jData.map(sc => {\n          console.log(sc.personName);\n          console.log(sc.plane);\n          scenarioList && setScenarioList([...scenarioList, {\n            sentenceId: \"\",\n            nextSentenceId: \"\",\n            personName: sc.personName,\n            sentence: {\n              plane: sc.plane,\n              button: [{\n                buttonLabel: \"\",\n                nextSentenceId: \"\"\n              }, {\n                buttonLabel: \"\",\n                nextSentenceId: \"\"\n              }]\n            },\n            reply: \"\"\n          }]);\n          setScenarioList(jData);\n        });\n      }); //静的なデータをとってくる\n\n      fetch(\"http://localhost:3001/posts\").then(response => response.json()).then(jData => {\n        setJsonData(jData);\n        jData.map(scenario => {\n          //次もってくる文章に合っているものを抽出\n          if (scenario.sentenceId === currentSentenceId) {\n            //Filtterつかえる\n            //上書き\n            scenarioList ? setScenarioList([...scenarioList, { ...scenario\n            }]) : //新規\n            setScenarioList([{ ...scenario\n            }]); // if (currentSentenceId === \"4\") {\n            //     setScenarioList([{...orderMap}])\n            // }\n            // 現在のnextSentenceIdに値が入っている場合\n\n            if (scenario.nextSentenceId != \"\") {\n              setCurrentSentenceId(scenario.nextSentenceId);\n            } //現在のsentenceにボタンが入っている場合\n\n\n            if (scenario.sentence.button[0].buttonLabel != \"\") {\n              setIsButton(true);\n              setBtnScenarioId_1(scenario.sentence.button[0].nextSentenceId);\n              setBtnScenarioId_2(scenario.sentence.button[1].nextSentenceId);\n              setBtnLabel_1(scenario.sentence.button[0].buttonLabel);\n              setBtnLabel_2(scenario.sentence.button[1].buttonLabel);\n            } //返信がテキストで必要な場合\n\n\n            if (scenario.reply === \"true\") {\n              setIsReply(true);\n            } //今表示したものをDBに入れる\n\n\n            fetch(\"http://localhost:3001/log\", {\n              method: 'POST',\n              headers: {\n                'Content-Type': 'application/json'\n              },\n              body: JSON.stringify({\n                personName: scenario.personName,\n                plane: scenario.sentence.plane\n              })\n            }).then(res => res.json()).then(console.log);\n          }\n        });\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(HeaderChat, {\n    title: \"\\u30C1\\u30E3\\u30C3\\u30C8\\u753B\\u9762\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.chatDesign,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 13\n    }\n  }, scenarioList && scenarioList.map((scenario, i) => scenario.personName == \"優花\" ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 449,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.yuka_label,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 450,\n      columnNumber: 25\n    }\n  }, \"\\u512A\\u82B1\"), i, /*#__PURE__*/React.createElement(ListItem, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 452,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(ListItemAvatar, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 453,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(Avatar, {\n    alt: \"icon\",\n    src: userIcon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 454,\n      columnNumber: 33\n    }\n  })), /*#__PURE__*/React.createElement(List, {\n    className: classes.yuka,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 456,\n      columnNumber: 29\n    }\n  }, scenario.sentence.plane))) : scenario.personName == \"主人公\" ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 460,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(ListItem, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 461,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(List, {\n    className: classes.syujiinko,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 33\n    }\n  }, scenario.sentence.plane))) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 466,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(ListItem, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 467,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(List, {\n    className: classes.narrator,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 468,\n      columnNumber: 33\n    }\n  }, scenario.sentence.plane)))), isButton == true ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.selectButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 474,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      selectBtnText(btnScenarioId_1, btnLabel_1);\n      processScenario(btnScenarioId_1, btnLabel_1);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 475,\n      columnNumber: 25\n    }\n  }, btnLabel_1), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      selectBtnText(btnScenarioId_2, btnLabel_2);\n      processScenario(btnScenarioId_2, btnLabel_2);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 479,\n      columnNumber: 25\n    }\n  }, btnLabel_2)) : isReply == true ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.selectButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 485,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    id: \"replyText\",\n    type: \"input\",\n    name: \"reply\",\n    placeholder: \"\\u3053\\u3053\\u306B\\u5165\\u529B\\u3057\\u3066\\u9001\\u4FE1\\u30DC\\u30BF\\u30F3\\u3092\\u62BC\\u3057\\u3066\\u304F\\u3060\\u3055\\u3044\",\n    onChange: e => handleReplyChange(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 486,\n      columnNumber: 29\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => {\n      replyText(currentSentenceId, reply); // processScenario(btnScenarioId_1, \"0\")\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 495,\n      columnNumber: 29\n    }\n  }, \"\\u9001\\u4FE1\")) : currentSentenceId == \"5\" ? /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.selectButton,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 501,\n      columnNumber: 29\n    }\n  }, \"\\u76EE\\u7684\\u5730\\u306B\\u5230\\u7740\\u3057\\u305F\\u3089\\u4E0B\\u306E\\u30DE\\u30C3\\u30D7\\u30DA\\u30FC\\u30B8\\u3067\\u30C1\\u30A7\\u30C3\\u30AF\\u30A4\\u30F3\\u3057\\u3066\\u30B7\\u30CA\\u30EA\\u30AA\\u3092\\u9032\\u3081\\u307E\\u3057\\u3087\\u3046\") : /*#__PURE__*/React.createElement(\"button\", {\n    className: classes.buttonDesign,\n    onClick: () => {\n      processScenario(\"\", \"\");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 511,\n      columnNumber: 29\n    }\n  }, \"\\u2191\"), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"bottom-of-list\",\n    ref: ref,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 514,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(BottomTab, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 516,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default Chat;","map":{"version":3,"sources":["/Users/rei.kawasato/Desktop/travel/src/pages/chat.tsx"],"names":["React","useEffect","useState","useRef","makeStyles","ListItemAvatar","Avatar","List","ListItem","useReactRouter","HeaderChat","userIcon","UserIcon","require","TabChatOn","TabMapOff","useStyles","theme","chatDesign","position","width","backgroundColor","top","bottom","overflow","buttonDesign","borderRadius","color","marginLeft","fontFamily","selectButton","minHeight","justifyItems","textAlign","padding","narrator","display","alignItems","marginTop","alignSelf","justifyContent","yuka","maxWidth","palette","background","paper","borderColor","yuka_label","fontSize","marginBottom","syujiinko","border","avatar","square","height","bottomTab","flexDirection","bottomChat","flex","bottomMap","orderMap","sentenceId","nextSentenceId","personName","sentence","plane","button","buttonLabel","reply","currentSentenceIdInit","genderInit","spotIdInit","spotNameInit","scenarioListInit","isButtonInit","isReplyInit","isBtnLabelInit_1","isBtnLabelInit_2","isBtnScenarioIdInit_1","isBtnScenarioIdInit_2","BottomTab","history","classes","push","btn1","Chat","jsonData","setJsonData","scenarioList","setScenarioList","currentSentenceId","setCurrentSentenceId","isButton","setIsButton","isReply","setIsReply","btnLabel_1","setBtnLabel_1","btnLabel_2","setBtnLabel_2","btnScenarioId_1","setBtnScenarioId_1","btnScenarioId_2","setBtnScenarioId_2","btnText","setBtnText","setReply","isFirstRender","ref","scrollToBottomOfList","useCallback","current","scrollIntoView","behavior","block","selectBtnText","scenarioId","planeMessage","handleReplyChange","e","target","value","replyText","id","getStaticScenario","fetch","then","response","json","jData","map","scenario","processScenario","btnId","btnLabel","method","headers","res","sc","console","log","body","JSON","stringify","i"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from 'react'\nimport { Typography, makeStyles, Grid, Box, Button, ListItemAvatar, Avatar, List } from '@material-ui/core'\nimport ListItem from '@material-ui/core/ListItem';\nimport useReactRouter from 'use-react-router';\n// import classes from '*.module.css';\nimport Header from './header';\nimport HeaderChat from './headerChat';\nimport GoogleMapAPI from '../utils/googleMapAPI';\nimport Footer from './footer';\nimport SelectInput from '@material-ui/core/Select/SelectInput';\nimport axios, { AxiosResponse } from 'axios';\nimport { Data, GoogleMap } from '@react-google-maps/api';\nimport userIcon from '../assets/test.png';\nimport { Label } from '@material-ui/icons';\nconst UserIcon = require('../assets/test.png');\nconst TabChatOn = require('../assets/TabChatOn.png');\nconst TabMapOff = require('../assets/TabMapOff.png');\n\n\nconst useStyles = makeStyles((theme) => ({\n    chatDesign: {\n        position: \"fixed\",\n        width: \"100%\",\n        backgroundColor: \"#EFEDE9\",\n        top: \"10%\",\n        bottom: \"25%\",\n        overflow: \"auto\"\n\n    },\n    buttonDesign: {\n        bottom: \"30%\",\n        position: \"fixed\",\n        borderRadius: \"50%\",\n        backgroundColor: \"blue\",\n        color: \"white\",\n        // zIndex:100,\n        marginLeft: \"50%\",\n        fontFamily: 'メイリオ',\n    },\n    selectButton: {\n        width: \"100%\",\n        minHeight: '10%',\n        justifyItems: 'center',\n        textAlign: 'center',\n        padding: '30px 0',\n        position: 'fixed',\n        bottom: '10%',\n        backgroundColor: 'EFEDE9',\n        // zIndex:\"500\",\n    },\n    narrator: {\n        fontFamily: 'メイリオ',\n        // fontSize: 20,\n        display: 'flex',\n        alignItems: 'top',//縦\n        textAlign: 'start',//横\n        color: \"#994C00\",\n        backgroundColor: '#EEB57D',\n        borderRadius: 16,\n        // height: 60,\n        width: '70%',\n        marginTop: 20,\n        alignSelf: '',\n        justifyContent: 'flex-start',\n        marginLeft: '15%',\n        padding: 10,\n        // position:'relative',\n    },\n    yuka: {\n        fontFamily: 'メイリオ',\n        width: '100%',\n        maxWidth: '25ch',\n        backgroundColor: theme.palette.background.paper,\n        borderRadius: 20,\n        borderColor: 'blue',\n        padding: 10,\n    },\n    yuka_label: {\n        fontSize: 15,\n        marginBottom: '0%',\n        marginLeft: '20%',\n        marginTop: '5%',\n    },\n    syujiinko: {\n        fontFamily: 'メイリオ',\n        border: 'solid',\n        color: '#7088b1',\n        borderRadius: 20,\n        borderColor: '#bfc8d5',\n        backgroundColor: '#e2e3e4',\n        width: '100%',\n        maxWidth: '30ch',\n        marginLeft: '40%',\n        padding: 10,\n    },\n    avatar: {\n        // padding: 10,\n        marginLeft: 50,\n    },\n    square: {\n        width: \"100%\",\n        height: \"900px\",\n        // margin:'0',\n        backgroundColor: \"#eeedea\",\n    },\n    bottomTab: {\n        position: \"fixed\",\n        bottom: \"0\",\n        height: \"10%\",\n        width: \"100%\",\n        backgroundColor: \"#eeedea\",\n        display: \"flex\",\n        flexDirection: \"row\",\n        textAlign: \"center\",\n        justifyContent: \"center\",\n        alignItems: \"center\"\n    },\n    bottomChat: {\n        // border: \"2px solid\",\n        // borderColor: \"pink\",\n        flex: 1,\n    },\n    bottomMap: {\n        // border: \"2px solid\",\n        // borderColor: \"pink\",\n        flex: 1,\n    }\n}))\n\ntype JsonData = {\n    sentenceId: string\n    nextSentenceId: string\n    personName: string\n    sentence: {\n        plane: string,\n        button: Array<{\n            buttonLabel: string,\n            nextSentenceId: string\n        }>\n    }\n    reply: string\n}\nconst orderMap = [\n\n    {\n        sentenceId: \"4\",\n        nextSentenceId: \"5\",\n        personName: \"ナレーター\",\n        sentence: {\n            plane: \"東京駅に行ってみましょう\",\n            button: [\n                {\n                    buttonLabel: \"\",\n                    nextSentenceId: \"\"\n                },\n                {\n                    buttonLabel: \"\",\n                    nextSentenceId: \"\"\n                }\n            ],\n        },\n        reply: \"false\"\n    }\n]\n\n\nconst currentSentenceIdInit: string = \"0\"\nconst genderInit: string = \"0\"\nconst spotIdInit: string = \"A\"\nconst spotNameInit: string = \"大谷資料館\"\nconst scenarioListInit = [\n    {\n        sentenceId: \"0\",\n        nextSentenceId: \"1\",\n        personName: \"優花\",\n        sentence: {\n            plane: \"初期値消したい\",\n            button: [\n                {\n                    buttonLabel: \"海外強度料理にしよう\",\n                    nextSentenceId: \"21\"\n                },\n                {\n                    buttonLabel: \"お蕎麦屋さんにしよう\",\n                    nextSentenceId: \"22\"\n                }\n            ],\n            // important: [\n            //     { \"海外強度料理にしよう\": \"B\" },\n            //     { \"お蕎麦屋さんにしよう\": \"C\" }\n            // ]\n        },\n        reply: \"true\"\n    }\n]\n\n// const travelApi = axios.create({\n//     baseURL: \"http://localhost:3001/posts\",\n//     timeout: 30000,\n//     headers: { 'Content-Type': 'application/json' },\n//     responseType:'json',\n//   });\n\n// const sampleInit = [\n//     {\n//         name: \"yuka\",\n//         text: \"大谷石の採掘場だから、石ならではの温度なんだよね\"\n//     },\n// ]\n\n// const isButtonInit = false \n// const isButtonInit = { sentenceId: \"0\", isDisp: false }\nconst isButtonInit = false\nconst isReplyInit = false\nconst isBtnLabelInit_1 = \"\"\nconst isBtnLabelInit_2 = \"\"\nconst isBtnScenarioIdInit_1 = \"\"\nconst isBtnScenarioIdInit_2 = \"\"\n\nconst BottomTab: React.FC = () => {\n    const { history } = useReactRouter();\n    const classes = useStyles()\n    return (\n\n        <div className={classes.bottomTab}>\n            <div className={classes.bottomChat}>\n\n                <img src={TabChatOn} />\n                <div>\n                    チャット\n                </div>\n            </div>\n            <div className={classes.bottomMap} onClick={() => history.push(\"/map\")}>\n\n                <img src={TabMapOff} />\n                <div>\n                    マップ\n                </div>\n            </div>\n        </div>\n    )\n}\n\nvar btn1: string = \"\"\nconst Chat: React.FC = () => {\n    const classes = useStyles()\n    const [jsonData, setJsonData] = useState<JsonData[]>()\n    const [scenarioList, setScenarioList] = useState<JsonData[]>()\n    const [currentSentenceId, setCurrentSentenceId] = useState(currentSentenceIdInit);\n    const [isButton, setIsButton] = useState(isButtonInit)\n    const [isReply, setIsReply] = useState(isReplyInit)\n    const [btnLabel_1, setBtnLabel_1] = useState(isBtnLabelInit_1)\n    const [btnLabel_2, setBtnLabel_2] = useState(isBtnLabelInit_2)\n    const [btnScenarioId_1, setBtnScenarioId_1] = useState(isBtnScenarioIdInit_1)\n    const [btnScenarioId_2, setBtnScenarioId_2] = useState(isBtnScenarioIdInit_2)\n    const [btnText, setBtnText] = useState(\"\")\n    const [reply, setReply] = useState(\"\")\n    const isFirstRender = useRef(false)\n\n    const ref = useRef<any>(null)\n\n    useEffect(() => {\n        scrollToBottomOfList()\n    }, [scenarioList])\n\n    const scrollToBottomOfList = React.useCallback(() => {\n        ref!.current!.scrollIntoView({\n            behavior: 'smooth',\n            block: 'end',\n        })\n    }, [ref])\n\n    const selectBtnText = (scenarioId: string, planeMessage: string) => {\n        scenarioList && setScenarioList([...scenarioList, {\n            sentenceId: \"\",\n            nextSentenceId: scenarioId,\n            personName: \"主人公\",\n            sentence: {\n                plane: planeMessage,\n                button: [\n                    {\n                        buttonLabel: \"\",\n                        nextSentenceId: \"\"\n                    },\n                    {\n                        buttonLabel: \"\",\n                        nextSentenceId: \"\"\n                    }\n                ]\n            },\n            reply: \"false\"\n        }])\n        setCurrentSentenceId(scenarioId)\n    }\n\n\n    const handleReplyChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setReply(e.target.value)\n    }\n\n    const replyText = (id: string, planeMessage: string) => {\n\n        scenarioList && setScenarioList([...scenarioList, {\n            sentenceId: \"\",\n            nextSentenceId: \"\",\n            personName: \"主人公\",\n            sentence: {\n                plane: planeMessage,\n                button: [\n                    {\n                        buttonLabel: \"\",\n                        nextSentenceId: \"\"\n                    },\n                    {\n                        buttonLabel: \"\",\n                        nextSentenceId: \"\"\n                    }\n                ]\n            },\n            reply: \"\"\n        }])\n        setCurrentSentenceId(id)\n        setIsReply(false)\n        // scrollToBottomOfList()\n    }\n    const getStaticScenario = async () => {\n        //フロントかバックエンドからシナリオデータすべてをとってくる（これまでの履歴と、次のシナリオを出す用）\n        fetch(\"http://localhost:3001/posts\")\n            .then(response => response.json())\n            .then(jData => {\n                setJsonData(jData)\n                jData.map((scenario: any) => {\n                    scenarioList ? setScenarioList([...scenarioList,\n                    { ...scenario }\n                    ]) :\n                        //新規\n                        setScenarioList([\n                            { ...scenario }\n\n                        ])\n                })\n                setScenarioList(jData)\n            })\n    }\n    const processScenario = async (btnId: string, btnLabel: string) => {\n        // setBtnScenarioId_1(\"\")\n        setIsButton(false)\n        setIsReply(false)\n        if (btnId != \"\") {\n            return\n        } else {\n            //genderはバックエンドでやるのでAccessTokenとAuthorization\n\n            //ログから会話履歴をもってくる\n            fetch(\"http://localhost:3001/log\", {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n            }).then(res => res.json())\n                .then(jData => {\n                    jData.map((sc: any) => {\n                        console.log(sc.personName)\n                        console.log(sc.plane)\n                        scenarioList && setScenarioList([...scenarioList, {\n                            sentenceId: \"\",\n                            nextSentenceId: \"\",\n                            personName: sc.personName,\n                            sentence: {\n                                plane: sc.plane,\n                                button: [\n                                    {\n                                        buttonLabel: \"\",\n                                        nextSentenceId: \"\"\n                                    },\n                                    {\n                                        buttonLabel: \"\",\n                                        nextSentenceId: \"\"\n                                    }\n                                ]\n                            },\n                            reply: \"\"\n                        }])\n                        setScenarioList(jData)\n                    })\n                })\n\n            //静的なデータをとってくる\n            fetch(\"http://localhost:3001/posts\")\n                .then(response => response.json())\n                .then(jData => {\n                    setJsonData(jData)\n                    jData.map((scenario: any) => {\n                        //次もってくる文章に合っているものを抽出\n                        if (scenario.sentenceId === currentSentenceId) { //Filtterつかえる\n                            //上書き\n                            scenarioList ? setScenarioList([...scenarioList,\n                            { ...scenario }\n                            ]) :\n                                //新規\n                                setScenarioList([\n                                    { ...scenario }\n\n                                ])\n                            // if (currentSentenceId === \"4\") {\n                            //     setScenarioList([{...orderMap}])\n                            // }\n\n                            // 現在のnextSentenceIdに値が入っている場合\n                            if (scenario.nextSentenceId != \"\") {\n                                setCurrentSentenceId(scenario.nextSentenceId)\n                            }\n                            //現在のsentenceにボタンが入っている場合\n                            if (scenario.sentence.button[0].buttonLabel != \"\") {\n                                setIsButton(true)\n                                setBtnScenarioId_1(scenario.sentence.button[0].nextSentenceId)\n                                setBtnScenarioId_2(scenario.sentence.button[1].nextSentenceId)\n                                setBtnLabel_1(scenario.sentence.button[0].buttonLabel)\n                                setBtnLabel_2(scenario.sentence.button[1].buttonLabel)\n                            }\n                            //返信がテキストで必要な場合\n                            if (scenario.reply === \"true\") {\n                                setIsReply(true)\n                            }\n                            //今表示したものをDBに入れる\n\n                            fetch(\"http://localhost:3001/log\", {\n                                method: 'POST',\n                                headers: {\n                                    'Content-Type': 'application/json'\n                                },\n                                body: JSON.stringify({ personName: scenario.personName, plane: scenario.sentence.plane })\n                            }).then(res => res.json()).then(console.log)\n\n                        }\n                    })\n                })\n        }\n    }\n\n    return (\n        <div>\n\n            <HeaderChat title=\"チャット画面\" />\n\n            <div className={classes.chatDesign}>\n\n                {scenarioList && scenarioList.map((scenario: any, i) => scenario.personName == \"優花\" ?\n                    <div>\n                        <div className={classes.yuka_label}>優花</div>\n                        {i}\n                        <ListItem>\n                            <ListItemAvatar>\n                                <Avatar alt=\"icon\" src={userIcon} />\n                            </ListItemAvatar>\n                            <List className={classes.yuka}>{scenario.sentence.plane}</List>\n                        </ListItem>\n                    </div>\n                    : scenario.personName == \"主人公\" ?\n                        <div>\n                            <ListItem>\n                                <List className={classes.syujiinko}>{scenario.sentence.plane}</List>\n                            </ListItem>\n                        </div>\n                        :\n                        <div>\n                            <ListItem>\n                                <List className={classes.narrator}>{scenario.sentence.plane}</List>\n                            </ListItem>\n                        </div>\n                )}\n\n                {isButton == true ?\n                    <div className={classes.selectButton}>\n                        <button onClick={() => {\n                            selectBtnText(btnScenarioId_1, btnLabel_1)\n                            processScenario(btnScenarioId_1, btnLabel_1)\n                        }}>{btnLabel_1}</button>\n                        <button onClick={() => {\n                            selectBtnText(btnScenarioId_2, btnLabel_2)\n                            processScenario(btnScenarioId_2, btnLabel_2)\n                        }}>{btnLabel_2}</button>\n                    </div>\n                    : isReply == true ?\n                        <div className={classes.selectButton}>\n                            <input\n                                id=\"replyText\"\n                                type=\"input\"\n                                name=\"reply\"\n                                placeholder=\"ここに入力して送信ボタンを押してください\"\n                                onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n                                    handleReplyChange(e)\n                                }\n                            />\n                            <button onClick={() => {\n                                replyText(currentSentenceId, reply)\n                                // processScenario(btnScenarioId_1, \"0\")\n                            }}>送信</button>\n                        </div>\n                        : currentSentenceId == \"5\" ?\n                            <div className={classes.selectButton}>\n                                目的地に到着したら下のマップページでチェックインしてシナリオを進めましょう\n                                {/* {GoogleMapAPI({a:\"a\"})} */}\n\n                                {/* <button onClick={() => {\n                                    // replyText(currentSentenceId, reply)\n                                    // processScenario(btnScenarioId_1, \"0\")\n                                }}>チェックイン</button> */}\n                            </div>\n                            :\n                            <button className={classes.buttonDesign} onClick={() => { processScenario(\"\", \"\") }}>↑</button>\n\n                }\n                <div id=\"bottom-of-list\" ref={ref} />\n            </div>\n            <BottomTab />\n            {/* <Footer /> */}\n        </div>\n    )\n}\n\n\n\nexport default Chat;"]},"metadata":{},"sourceType":"module"}