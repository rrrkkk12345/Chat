{"ast":null,"code":"import axios from 'axios';\nimport { logger } from \"./logger\";\nlet backendBaseUrl = \"\";\n\nif (process.env.REACT_APP_ENV === \"production\") {\n  backendBaseUrl = \"https://travel-two-choices.jp/app/api\";\n} else if (process.env.REACT_APP_ENV === \"staging\") {\n  backendBaseUrl = \"https://travel-stg.pca-ds.com/app/api\";\n} else {\n  backendBaseUrl = \"http://localhost:8081/app/api\";\n}\n\nconst fetchErrorMessageList = errorResponse => {\n  const errorMessageList = [];\n  const {\n    field,\n    global,\n    message\n  } = errorResponse && errorResponse.data || {};\n  if (field !== undefined) errorMessageList.push(...field.map(e => e.message));\n  if (global !== undefined) errorMessageList.push(...global.map(e => e.message));\n  if (message !== undefined) errorMessageList.push(message);\n  return errorMessageList;\n};\n\nconst apiLogger = (response, event, message) => {\n  const logInfo = {\n    userId: 'user001',\n    event,\n    message\n  };\n  const {\n    status\n  } = response || {};\n\n  if (status === 200) {\n    logger().info(JSON.stringify(logInfo));\n    return;\n  } else if (status >= 500) {\n    logger().error(JSON.stringify(logInfo));\n    return;\n  } else if (status >= 400) {\n    logger().warn(JSON.stringify(logInfo));\n    return;\n  }\n};\n\nconst travelApi = axios.create({\n  baseURL: backendBaseUrl,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nexport const login = async (email, password, securityCode) => {\n  const event = 'ログイン';\n  return await travelApi.post('/account/login', {\n    email,\n    password,\n    \"code\": securityCode\n  }).then(response => {\n    const message = 'ログイン完了';\n    apiLogger(response, event, message);\n    return {\n      response\n    };\n  }).catch(error => {\n    const errorMessageList = fetchErrorMessageList(error.response);\n    apiLogger(error.response, event, errorMessageList.join(','));\n    return {\n      response: error.response,\n      errorMessageList\n    };\n  });\n};","map":{"version":3,"sources":["/Users/rei.kawasato/Desktop/travel/src/modules/api.tsx"],"names":["axios","logger","backendBaseUrl","process","env","REACT_APP_ENV","fetchErrorMessageList","errorResponse","errorMessageList","field","global","message","data","undefined","push","map","e","apiLogger","response","event","logInfo","userId","status","info","JSON","stringify","error","warn","travelApi","create","baseURL","timeout","headers","login","email","password","securityCode","post","then","catch","join"],"mappings":"AAAA,OAAOA,KAAP,MAAqC,OAArC;AACA,SAASC,MAAT,QAAuB,UAAvB;AAOA,IAAIC,cAAc,GAAG,EAArB;;AACA,IAAIC,OAAO,CAACC,GAAR,CAAYC,aAAZ,KAA8B,YAAlC,EAAgD;AAC9CH,EAAAA,cAAc,GAAG,uCAAjB;AACD,CAFD,MAGK,IAAIC,OAAO,CAACC,GAAR,CAAYC,aAAZ,KAA8B,SAAlC,EAA6C;AAChDH,EAAAA,cAAc,GAAG,uCAAjB;AACD,CAFI,MAGA;AACHA,EAAAA,cAAc,GAAG,+BAAjB;AACD;;AACD,MAAMI,qBAAqB,GAAIC,aAAD,IAA4C;AACtE,QAAMC,gBAA0B,GAAG,EAAnC;AACA,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,MAAT;AAAiBC,IAAAA;AAAjB,MAA6BJ,aAAa,IAAIA,aAAa,CAACK,IAA/B,IAAuC,EAA1E;AACA,MAAIH,KAAK,KAAKI,SAAd,EAAyBL,gBAAgB,CAACM,IAAjB,CAAsB,GAAGL,KAAK,CAACM,GAAN,CAAWC,CAAD,IAA0CA,CAAC,CAACL,OAAtD,CAAzB;AACzB,MAAID,MAAM,KAAKG,SAAf,EAA0BL,gBAAgB,CAACM,IAAjB,CAAsB,GAAGJ,MAAM,CAACK,GAAP,CAAYC,CAAD,IAA4BA,CAAC,CAACL,OAAzC,CAAzB;AAC1B,MAAIA,OAAO,KAAKE,SAAhB,EAA2BL,gBAAgB,CAACM,IAAjB,CAAsBH,OAAtB;AAC3B,SAAOH,gBAAP;AACD,CAPH;;AAQA,MAAMS,SAAS,GAAG,CAACC,QAAD,EAA0BC,KAA1B,EAAyCR,OAAzC,KAA6D;AAC3E,QAAMS,OAAO,GAAG;AAAEC,IAAAA,MAAM,EAAE,SAAV;AAAqBF,IAAAA,KAArB;AAA4BR,IAAAA;AAA5B,GAAhB;AACA,QAAM;AAAEW,IAAAA;AAAF,MAAaJ,QAAQ,IAAI,EAA/B;;AACA,MAAII,MAAM,KAAK,GAAf,EAAoB;AAClBrB,IAAAA,MAAM,GAAGsB,IAAT,CAAcC,IAAI,CAACC,SAAL,CAAeL,OAAf,CAAd;AACA;AACD,GAHD,MAGO,IAAIE,MAAM,IAAI,GAAd,EAAmB;AACxBrB,IAAAA,MAAM,GAAGyB,KAAT,CAAeF,IAAI,CAACC,SAAL,CAAeL,OAAf,CAAf;AACA;AACD,GAHM,MAGA,IAAIE,MAAM,IAAI,GAAd,EAAmB;AACxBrB,IAAAA,MAAM,GAAG0B,IAAT,CAAcH,IAAI,CAACC,SAAL,CAAeL,OAAf,CAAd;AACA;AACD;AACF,CAbH;;AAeA,MAAMQ,SAAS,GAAG5B,KAAK,CAAC6B,MAAN,CAAa;AAC3BC,EAAAA,OAAO,EAAE5B,cADkB;AAE3B6B,EAAAA,OAAO,EAAE,KAFkB;AAG3BC,EAAAA,OAAO,EAAE;AAAE,oBAAgB;AAAlB;AAHkB,CAAb,CAAlB;AAMA,OAAO,MAAMC,KAAK,GAAG,OAAOC,KAAP,EAAsBC,QAAtB,EAAwCC,YAAxC,KAAwF;AACzG,QAAMjB,KAAK,GAAG,MAAd;AACA,SAAO,MAAMS,SAAS,CAACS,IAAV,CAAe,gBAAf,EAAiC;AAAEH,IAAAA,KAAF;AAASC,IAAAA,QAAT;AAAmB,YAAQC;AAA3B,GAAjC,EACVE,IADU,CACLpB,QAAQ,IAAI;AAChB,UAAMP,OAAO,GAAG,QAAhB;AACAM,IAAAA,SAAS,CAACC,QAAD,EAAWC,KAAX,EAAkBR,OAAlB,CAAT;AACA,WAAO;AAAEO,MAAAA;AAAF,KAAP;AACD,GALU,EAMVqB,KANU,CAMJb,KAAK,IAAI;AACd,UAAMlB,gBAAgB,GAAGF,qBAAqB,CAACoB,KAAK,CAACR,QAAP,CAA9C;AACAD,IAAAA,SAAS,CAACS,KAAK,CAACR,QAAP,EAAiBC,KAAjB,EAAwBX,gBAAgB,CAACgC,IAAjB,CAAsB,GAAtB,CAAxB,CAAT;AACA,WAAO;AAAEtB,MAAAA,QAAQ,EAAEQ,KAAK,CAACR,QAAlB;AAA4BV,MAAAA;AAA5B,KAAP;AACD,GAVU,CAAb;AAWD,CAbI","sourcesContent":["import axios, { AxiosResponse } from 'axios';\nimport { logger } from \"./logger\";\n\ntype HttpResponse = {\n    response: AxiosResponse,\n    errorMessageList?: string[]\n  }\n\nlet backendBaseUrl = \"\";\nif (process.env.REACT_APP_ENV === \"production\" ){\n  backendBaseUrl = \"https://travel-two-choices.jp/app/api\"\n}\nelse if (process.env.REACT_APP_ENV === \"staging\" ){\n  backendBaseUrl = \"https://travel-stg.pca-ds.com/app/api\"\n}\nelse {\n  backendBaseUrl = \"http://localhost:8081/app/api\"\n}\nconst fetchErrorMessageList = (errorResponse: AxiosResponse): string[] => {\n    const errorMessageList: string[] = []\n    const { field, global, message } = errorResponse && errorResponse.data || {}\n    if (field !== undefined) errorMessageList.push(...field.map((e: { name: string, message: string }) => e.message))\n    if (global !== undefined) errorMessageList.push(...global.map((e: { message: string }) => e.message))\n    if (message !== undefined) errorMessageList.push(message)\n    return errorMessageList\n  }\nconst apiLogger = (response: AxiosResponse, event: string, message: string) => {\n    const logInfo = { userId: 'user001', event, message } \n    const { status } = response || {}\n    if (status === 200) {\n      logger().info(JSON.stringify(logInfo));\n      return;\n    } else if (status >= 500) {\n      logger().error(JSON.stringify(logInfo));\n      return;\n    } else if (status >= 400) {\n      logger().warn(JSON.stringify(logInfo));\n      return;\n    }\n  }\n\nconst travelApi = axios.create({\n    baseURL: backendBaseUrl,\n    timeout: 30000,\n    headers: { 'Content-Type': 'application/json' },\n  });\n\nexport const login = async (email: string, password: string, securityCode: string): Promise<HttpResponse> => {\n    const event = 'ログイン'\n    return await travelApi.post('/account/login', { email, password, \"code\": securityCode})\n      .then(response => {\n        const message = 'ログイン完了'\n        apiLogger(response, event, message)\n        return { response }\n      })\n      .catch(error => {\n        const errorMessageList = fetchErrorMessageList(error.response)\n        apiLogger(error.response, event, errorMessageList.join(','))\n        return { response: error.response, errorMessageList }\n      });\n  };"]},"metadata":{},"sourceType":"module"}