{"ast":null,"code":"var _jsxFileName = \"/Users/rei.kawasato/Desktop/travel/src/utils/googleMapAPI.tsx\";\nimport React, { useState } from 'react';\nimport { GoogleMap, useLoadScript, Marker, Circle } from \"@react-google-maps/api\";\nconst mapContainerStyle = {\n  width: \"100vw\",\n  height: \"100vh\"\n};\nconst center = {\n  lat: 36.559707,\n  lng: 139.898472\n};\nconst options = {\n  disableDefaultUI: true,\n  zoomControl: true\n};\nconst libraries = [\"places\", \"geometry\"];\n\nconst GoogleMapAPI = () => {\n  const [position, setPosition] = useState(); //-----------------------------------------------------------\n\n  const googleMapsApiKey = process.env.REACT_APP_GOOGLE_MAPS_API_KEY;\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey,\n    libraries: libraries\n  });\n  if (loadError) return /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 27\n    }\n  }, \"\\\"Error loading maps\\\"\"); //returnあとにusestate入れるとだめ\n\n  if (!isLoaded) return /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 27\n    }\n  }, \"Loading maps\"); //-----------------------------------------------------------\n  //-----------------------------------------------------------\n\n  const utsunomiya = new google.maps.LatLng(36.559707, 139.898472); //宇都宮駅\n\n  const oyashiryokan = new google.maps.LatLng(36.602020, 139.824747); //大谷資料館\n\n  const oyadera = new google.maps.LatLng(36.597424, 139.820439); //大谷寺\n\n  const kuriruju = new google.maps.LatLng(36.631208, 139.827650); //クーリ・ルージュ\n\n  const mogamijaya = new google.maps.LatLng(36.617913, 139.820958); //最上茶屋\n\n  const wakatake = new google.maps.LatLng(36.616712, 139.849803); //若竹の社\n\n  const utsunomiyaZoo = new google.maps.LatLng(36.632781, 139.853577); //宇都宮動物園\n\n  const utsunomiyaPark = new google.maps.LatLng(36.618265, 139.790336); //宇都宮森林公園\n\n  const matsugamine = new google.maps.LatLng(36.558171, 139.881408); //松が峰教会\n\n  const kurasse = new google.maps.LatLng(36.560851, 139.885278); //来らっせ\n\n  const utsunomiyaTower = new google.maps.LatLng(36.570387, 139.885919); //宇都宮タワー\n\n  const selectCafe = new google.maps.LatLng(36.560085, 139.902119); //SELECT\n\n  const test = new google.maps.LatLng(36.204823999, 138.272924); //テスト\n  //-----------------------------------------------------------\n  // const res = google.maps.geometry.spherical.computeDistanceBetween(oyasiryokan, utsunomiya) \n  // console.log(res)\n\n  const utsunomiyaArea = new google.maps.Circle({\n    //範囲情報\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.5,\n    strokeWeight: 2,\n    fillColor: '#FF0000',\n    fillOpacity: 0.2,\n    // map: map,\n    center: utsunomiya,\n    radius: 100\n  });\n  const oyashiryokanArea = new google.maps.Circle({\n    //範囲情報\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.5,\n    strokeWeight: 2,\n    fillColor: '#FF0000',\n    fillOpacity: 0.2,\n    // map: map,\n    center: oyashiryokan,\n    radius: 1000\n  });\n  const oyaderaArea = new google.maps.Circle({\n    //範囲情報\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.5,\n    strokeWeight: 2,\n    fillColor: '#FF0000',\n    fillOpacity: 0.2,\n    // map: map,\n    center: oyadera,\n    radius: 500\n  });\n  const kurirujuArea = new google.maps.Circle({\n    //範囲情報\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.5,\n    strokeWeight: 2,\n    fillColor: '#FF0000',\n    fillOpacity: 0.2,\n    // map: map,\n    center: kuriruju,\n    radius: 500\n  });\n  const mogamijayaArea = new google.maps.Circle({\n    //範囲情報\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.5,\n    strokeWeight: 2,\n    fillColor: '#FF0000',\n    fillOpacity: 0.2,\n    // map: map,\n    center: mogamijaya,\n    radius: 100\n  });\n  const wakatakeArea = new google.maps.Circle({\n    //範囲情報\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.5,\n    strokeWeight: 2,\n    fillColor: '#FF0000',\n    fillOpacity: 0.2,\n    // map: map,\n    center: wakatake,\n    radius: 100\n  });\n  const utsunomiyaZooArea = new google.maps.Circle({\n    //範囲情報\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.5,\n    strokeWeight: 2,\n    fillColor: '#FF0000',\n    fillOpacity: 0.2,\n    // map: map,\n    center: utsunomiyaZoo,\n    radius: 100\n  });\n  const utsunomiyaParkArea = new google.maps.Circle({\n    //範囲情報\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.5,\n    strokeWeight: 2,\n    fillColor: '#FF0000',\n    fillOpacity: 0.2,\n    // map: map,\n    center: utsunomiyaPark,\n    radius: 1000\n  });\n  const matsugamineArea = new google.maps.Circle({\n    //範囲情報\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.5,\n    strokeWeight: 2,\n    fillColor: '#FF0000',\n    fillOpacity: 0.2,\n    // map: map,\n    center: matsugamine,\n    radius: 100\n  });\n  const kurasseArea = new google.maps.Circle({\n    //範囲情報\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.5,\n    strokeWeight: 2,\n    fillColor: '#FF0000',\n    fillOpacity: 0.2,\n    // map: map,\n    center: kurasse,\n    radius: 100\n  });\n  const utsunomiyaTowerArea = new google.maps.Circle({\n    //範囲情報\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.5,\n    strokeWeight: 2,\n    fillColor: '#FF0000',\n    fillOpacity: 0.2,\n    // map: map,\n    center: utsunomiyaTower,\n    radius: 100\n  });\n  const selectCafeArea = new google.maps.Circle({\n    //範囲情報\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.5,\n    strokeWeight: 2,\n    fillColor: '#FF0000',\n    fillOpacity: 0.2,\n    // map: map,\n    center: selectCafe,\n    radius: 100\n  });\n  const testArea = new google.maps.Circle({\n    //範囲情報\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.5,\n    strokeWeight: 2,\n    fillColor: '#FF0000',\n    fillOpacity: 0.2,\n    // map: map,\n    center: test,\n    radius: 100\n  }); //-----------------------------------------------------------\n  // const [isAvailable, setAvailable] = useState(false);\n  // const [position, setPosition] = useState<{ latitude: number, longitude: number }>();\n  // // useEffectが実行されているかどうかを判定するために用意しています\n  // const isFirstRef = useRef(true);\n\n  /*\n   * ページ描画時にGeolocation APIが使えるかどうかをチェックしています\n   * もし使えなければその旨のエラーメッセージを表示させます\n   */\n  // useEffect(() => {\n  //     isFirstRef.current = false;\n  //     if ('geolocation' in navigator) {\n  //         setAvailable(true);\n  //     }\n  // }, [isAvailable]);\n\n  function error(error) {\n    var errorMessage = {\n      0: \"原因不明のエラーが発生しました…。\",\n      1: \"位置情報の取得が許可されませんでした…。\",\n      2: \"電波状況などで位置情報が取得できませんでした…。\",\n      3: \"位置情報の取得に時間がかかり過ぎてタイムアウトしました…。\"\n    };\n    console.log(errorMessage[error.code]); //getccurentpotion\n  }\n\n  const getCurrentPosition = () => {\n    navigator.geolocation.getCurrentPosition(position => {\n      var data = position.coords;\n      var lat = data.latitude;\n      var lng = data.longitude;\n      var latlng = new google.maps.LatLng(lat, lng); // var canvas = document.getElementById('map-canvas') as Element;\n      // document.getElementById('google').innerHTML= \"String(lat)\" ;\n      // var mapOptions = {\n      //     zoom: 15,\n      //     center: latlng,\n      //     mapTypeId: google.maps.MapTypeId.ROADMAP\n      // }\n      // var map = new google.maps.Map(canvas, mapOptions);\n      // const {lati,longa} = position.coords\n\n      alert(lat);\n      alert(lng);\n      setPosition({\n        latitude: lat,\n        longitude: lng\n      }); // marker\n\n      var markerOptions = {\n        // map: map,\n        position: latlng,\n        draggable: true,\n        visible: true\n      };\n      new google.maps.Marker(markerOptions); //宇都宮駅\n\n      if (google.maps.geometry.spherical.computeDistanceBetween(latlng, utsunomiyaArea.getCenter()) <= utsunomiyaArea.getRadius()) {\n        //領域判定\n        console.log(\"宇都宮駅範囲内\");\n        alert(\"宇都宮駅範囲内\");\n      } else {\n        console.log(\"宇都宮駅範囲外\");\n        alert(\"宇都宮駅範囲外\");\n      } //大谷資料館\n\n\n      if (google.maps.geometry.spherical.computeDistanceBetween(latlng, oyashiryokanArea.getCenter()) <= oyashiryokanArea.getRadius()) {\n        //領域判定\n        console.log(\"大谷資料館範囲内\");\n        alert(\"大谷資料館範囲内\");\n      } else {\n        console.log(\"大谷資料館範囲外\");\n        alert(\"大谷資料館範囲外\");\n      } //大谷寺\n\n\n      if (google.maps.geometry.spherical.computeDistanceBetween(latlng, oyaderaArea.getCenter()) <= oyaderaArea.getRadius()) {\n        //領域判定\n        console.log(\"大谷寺範囲内\");\n        alert(\"大谷寺範囲内\");\n      } else {\n        console.log(\"大谷寺範囲外\");\n        alert(\"大谷寺範囲外\");\n      } //クーリ・ルージュ\n\n\n      if (google.maps.geometry.spherical.computeDistanceBetween(latlng, kurirujuArea.getCenter()) <= kurirujuArea.getRadius()) {\n        //領域判定\n        console.log(\"クーリ・ルージュ範囲内\");\n        alert(\"クーリ・ルージュ範囲内\");\n      } else {\n        console.log(\"クーリ・ルージュ範囲外\");\n        alert(\"クーリ・ルージュ範囲外\");\n      } //最上茶屋\n\n\n      if (google.maps.geometry.spherical.computeDistanceBetween(latlng, mogamijayaArea.getCenter()) <= mogamijayaArea.getRadius()) {\n        //領域判定\n        console.log(\"最上茶屋範囲内\");\n        alert(\"最上茶屋範囲内\");\n      } else {\n        console.log(\"最上茶屋範囲外\");\n        alert(\"最上茶屋範囲外\");\n      } //若竹\n\n\n      if (google.maps.geometry.spherical.computeDistanceBetween(latlng, wakatakeArea.getCenter()) <= wakatakeArea.getRadius()) {\n        //領域判定\n        console.log(\"若竹範囲内\");\n        alert(\"若竹範囲内\");\n      } else {\n        console.log(\"若竹範囲外\");\n        alert(\"若竹範囲外\");\n      } //動物園\n\n\n      if (google.maps.geometry.spherical.computeDistanceBetween(latlng, utsunomiyaZooArea.getCenter()) <= utsunomiyaZooArea.getRadius()) {\n        //領域判定\n        console.log(\"動物園範囲内\");\n        alert(\"動物園範囲内\");\n      } else {\n        console.log(\"動物園範囲外\");\n        alert(\"動物園範囲外\");\n      } //公園\n\n\n      if (google.maps.geometry.spherical.computeDistanceBetween(latlng, utsunomiyaParkArea.getCenter()) <= utsunomiyaParkArea.getRadius()) {\n        //領域判定\n        console.log(\"公園範囲内\");\n        alert(\"公園範囲内\");\n      } else {\n        console.log(\"公園範囲外\");\n        alert(\"公園範囲外\");\n      } //松が峰\n\n\n      if (google.maps.geometry.spherical.computeDistanceBetween(latlng, matsugamineArea.getCenter()) <= matsugamineArea.getRadius()) {\n        //領域判定\n        console.log(\"松が峰範囲内\");\n        alert(\"松が峰範囲内\");\n      } else {\n        console.log(\"松が峰範囲外\");\n        alert(\"松が峰範囲外\");\n      } //くらっせ\n\n\n      if (google.maps.geometry.spherical.computeDistanceBetween(latlng, kurasseArea.getCenter()) <= kurasseArea.getRadius()) {\n        //領域判定\n        console.log(\"くらっせ範囲内\");\n        alert(\"くらっせ範囲内\");\n      } else {\n        console.log(\"くらっせ範囲外\");\n        alert(\"くらっせ範囲外\");\n      } //宇都宮タワー\n\n\n      if (google.maps.geometry.spherical.computeDistanceBetween(latlng, utsunomiyaTowerArea.getCenter()) <= utsunomiyaTowerArea.getRadius()) {\n        //領域判定\n        console.log(\"宇都宮タワー範囲内\");\n        alert(\"宇都宮タワー範囲内\");\n      } else {\n        console.log(\"宇都宮タワー範囲外\");\n        alert(\"宇都宮タワー範囲外\");\n      } //SELECT\n\n\n      if (google.maps.geometry.spherical.computeDistanceBetween(latlng, selectCafeArea.getCenter()) <= selectCafeArea.getRadius()) {\n        //領域判定\n        console.log(\"SELECT範囲内\");\n        alert(\"SELECT範囲内\");\n      } else {\n        console.log(\"SELECT範囲外\");\n        alert(\"SELECT範囲外\");\n      } //test\n\n\n      if (google.maps.geometry.spherical.computeDistanceBetween(latlng, testArea.getCenter()) <= testArea.getRadius()) {\n        //領域判定\n        console.log(\"test範囲内\");\n      } else {\n        console.log(\"test駅範囲外\");\n      }\n    }, failure => {\n      if (failure.message.startsWith(\"Only secure origins are allowed\")) {\n        console.log(\"secure issuess\");\n      }\n    });\n  }; //------------\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => getCurrentPosition(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 364,\n      columnNumber: 9\n    }\n  }, \"\\u73FE\\u5728\\u5730\"), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"google\",\n    type: \"text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 365,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 366,\n      columnNumber: 9\n    }\n  }, \"latitude:\", position === null || position === void 0 ? void 0 : position.latitude), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 9\n    }\n  }, \"longtitude:\", position === null || position === void 0 ? void 0 : position.longitude), /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    role: \"img\",\n    \"aria-label\": \"tent\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 369,\n      columnNumber: 13\n    }\n  }, \"\\uD83E\\uDD14\")), /*#__PURE__*/React.createElement(GoogleMap, {\n    mapContainerStyle: mapContainerStyle,\n    zoom: 15,\n    center: center,\n    options: options,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 9\n    }\n  }, (position === null || position === void 0 ? void 0 : position.latitude) && /*#__PURE__*/React.createElement(Marker, {\n    position: new google.maps.LatLng(position === null || position === void 0 ? void 0 : position.latitude, position === null || position === void 0 ? void 0 : position.longitude) //値が入っていることを保証しないとエラー\n    // icon={\"📝\"}\n    // label={\"Marker！！\"}\n    // visible={true}\n    // onLoad={onLoad}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 380,\n      columnNumber: 36\n    }\n  }), /*#__PURE__*/React.createElement(Marker, {\n    position: utsunomiyaArea.getCenter() // icon={\"📝\"}\n    // label={\"Marker！！\"}\n    // visible={true}\n    // onLoad={onLoad}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Circle, {\n    center: utsunomiyaArea.getCenter(),\n    radius: 100,\n    visible: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 394,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Marker, {\n    position: oyashiryokanArea.getCenter() // icon={\"📝\"}\n    // label={\"Marker！！\"}\n    // visible={true}\n    // onLoad={onLoad}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 400,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Circle, {\n    center: oyashiryokanArea.getCenter(),\n    radius: 1000,\n    visible: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Marker, {\n    position: oyaderaArea.getCenter() // icon={\"📝\"}\n    // label={\"Marker！！\"}\n    // visible={true}\n    // onLoad={onLoad}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 413,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Circle, {\n    center: oyaderaArea.getCenter(),\n    radius: 500,\n    visible: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Marker, {\n    position: kurirujuArea.getCenter() // icon={\"📝\"}\n    // label={\"Marker！！\"}\n    // visible={true}\n    // onLoad={onLoad}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Circle, {\n    center: kurirujuArea.getCenter(),\n    radius: 100,\n    visible: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 433,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Marker, {\n    position: mogamijayaArea.getCenter() // icon={\"📝\"}\n    // label={\"Marker！！\"}\n    // visible={true}\n    // onLoad={onLoad}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 439,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Circle, {\n    center: mogamijayaArea.getCenter(),\n    radius: 500,\n    visible: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Marker, {\n    position: wakatakeArea.getCenter() // icon={\"📝\"}\n    // label={\"Marker！！\"}\n    // visible={true}\n    // onLoad={onLoad}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 452,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Circle, {\n    center: wakatakeArea.getCenter(),\n    radius: 100,\n    visible: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 459,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Marker, {\n    position: utsunomiyaZooArea.getCenter() // icon={\"📝\"}\n    // label={\"Marker！！\"}\n    // visible={true}\n    // onLoad={onLoad}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 465,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Circle, {\n    center: utsunomiyaZooArea.getCenter(),\n    radius: 100,\n    visible: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 472,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Marker, {\n    position: utsunomiyaParkArea.getCenter() // icon={\"📝\"}\n    // label={\"Marker！！\"}\n    // visible={true}\n    // onLoad={onLoad}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 478,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Circle, {\n    center: utsunomiyaParkArea.getCenter(),\n    radius: 1000,\n    visible: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 485,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Marker, {\n    position: matsugamineArea.getCenter() // icon={\"📝\"}\n    // label={\"Marker！！\"}\n    // visible={true}\n    // onLoad={onLoad}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 491,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Circle, {\n    center: matsugamineArea.getCenter(),\n    radius: 100,\n    visible: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 498,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Marker, {\n    position: kurasseArea.getCenter() // icon={\"📝\"}\n    // label={\"Marker！！\"}\n    // visible={true}\n    // onLoad={onLoad}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 504,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Circle, {\n    center: kurasseArea.getCenter(),\n    radius: 100,\n    visible: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 511,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Marker, {\n    position: utsunomiyaTowerArea.getCenter() // icon={\"📝\"}\n    // label={\"Marker！！\"}\n    // visible={true}\n    // onLoad={onLoad}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 517,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Circle, {\n    center: utsunomiyaTowerArea.getCenter(),\n    radius: 100,\n    visible: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 524,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Marker, {\n    position: selectCafeArea.getCenter() // icon={\"📝\"}\n    // label={\"Marker！！\"}\n    // visible={true}\n    // onLoad={onLoad}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 530,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Circle, {\n    center: selectCafeArea.getCenter(),\n    radius: 100,\n    visible: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 537,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Circle, {\n    center: testArea.getCenter(),\n    radius: 100,\n    visible: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 544,\n      columnNumber: 13\n    }\n  })));\n};\n\nexport default GoogleMapAPI;","map":{"version":3,"sources":["/Users/rei.kawasato/Desktop/travel/src/utils/googleMapAPI.tsx"],"names":["React","useState","GoogleMap","useLoadScript","Marker","Circle","mapContainerStyle","width","height","center","lat","lng","options","disableDefaultUI","zoomControl","libraries","GoogleMapAPI","position","setPosition","googleMapsApiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","isLoaded","loadError","utsunomiya","google","maps","LatLng","oyashiryokan","oyadera","kuriruju","mogamijaya","wakatake","utsunomiyaZoo","utsunomiyaPark","matsugamine","kurasse","utsunomiyaTower","selectCafe","test","utsunomiyaArea","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","radius","oyashiryokanArea","oyaderaArea","kurirujuArea","mogamijayaArea","wakatakeArea","utsunomiyaZooArea","utsunomiyaParkArea","matsugamineArea","kurasseArea","utsunomiyaTowerArea","selectCafeArea","testArea","error","errorMessage","console","log","code","getCurrentPosition","navigator","geolocation","data","coords","latitude","longitude","latlng","alert","markerOptions","draggable","visible","geometry","spherical","computeDistanceBetween","getCenter","getRadius","failure","message","startsWith"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, SetStateAction } from 'react'\nimport {\n    GoogleMap,\n    useLoadScript,\n    Marker,\n    Circle,\n} from \"@react-google-maps/api\"\nimport { Libraries } from '@react-google-maps/api/dist/utils/make-load-script-url';\n\n\nconst mapContainerStyle = {\n    width: \"100vw\",\n    height: \"100vh\",\n};\n\nconst center = {\n    lat: 36.559707,\n    lng: 139.898472,\n};\n\nconst options = {\n    disableDefaultUI: true,\n    zoomControl: true\n};\n\n\nconst libraries: Libraries = [\"places\", \"geometry\"]\n\nconst GoogleMapAPI: React.FC = () => {\n\n    const [position, setPosition] = useState<{ latitude: number, longitude: number }>();\n    //-----------------------------------------------------------\n    const googleMapsApiKey = process.env.REACT_APP_GOOGLE_MAPS_API_KEY as string\n\n    const { isLoaded, loadError } = useLoadScript({\n        googleMapsApiKey,\n        libraries: libraries,\n    });\n\n    if (loadError) return <h1>\"Error loading maps\"</h1>//returnあとにusestate入れるとだめ\n    if (!isLoaded) return <h1>Loading maps</h1>\n    //-----------------------------------------------------------\n\n    //-----------------------------------------------------------\n    const utsunomiya = new google.maps.LatLng(36.559707, 139.898472) //宇都宮駅\n    const oyashiryokan = new google.maps.LatLng(36.602020, 139.824747) //大谷資料館\n    const oyadera = new google.maps.LatLng(36.597424, 139.820439) //大谷寺\n    const kuriruju = new google.maps.LatLng(36.631208, 139.827650) //クーリ・ルージュ\n    const mogamijaya = new google.maps.LatLng(36.617913, 139.820958) //最上茶屋\n    const wakatake = new google.maps.LatLng(36.616712, 139.849803) //若竹の社\n    const utsunomiyaZoo = new google.maps.LatLng(36.632781, 139.853577) //宇都宮動物園\n    const utsunomiyaPark = new google.maps.LatLng(36.618265, 139.790336) //宇都宮森林公園\n    const matsugamine = new google.maps.LatLng(36.558171, 139.881408) //松が峰教会\n    const kurasse = new google.maps.LatLng(36.560851, 139.885278) //来らっせ\n    const utsunomiyaTower = new google.maps.LatLng(36.570387, 139.885919) //宇都宮タワー\n    const selectCafe = new google.maps.LatLng(36.560085, 139.902119) //SELECT\n    const test = new google.maps.LatLng(36.204823999, 138.272924) //テスト\n    //-----------------------------------------------------------\n    // const res = google.maps.geometry.spherical.computeDistanceBetween(oyasiryokan, utsunomiya) \n    // console.log(res)\n\n    const utsunomiyaArea = new google.maps.Circle({ //範囲情報\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.5,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.2,\n        // map: map,\n        center: utsunomiya,\n        radius: 100\n    });\n\n    const oyashiryokanArea = new google.maps.Circle({ //範囲情報\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.5,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.2,\n        // map: map,\n        center: oyashiryokan,\n        radius: 1000\n    });\n    const oyaderaArea = new google.maps.Circle({ //範囲情報\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.5,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.2,\n        // map: map,\n        center: oyadera,\n        radius: 500\n    });\n    const kurirujuArea = new google.maps.Circle({ //範囲情報\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.5,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.2,\n        // map: map,\n        center: kuriruju,\n        radius: 500\n    });\n    const mogamijayaArea = new google.maps.Circle({ //範囲情報\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.5,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.2,\n        // map: map,\n        center: mogamijaya,\n        radius: 100\n    });\n    const wakatakeArea = new google.maps.Circle({ //範囲情報\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.5,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.2,\n        // map: map,\n        center: wakatake,\n        radius: 100\n    });\n    const utsunomiyaZooArea = new google.maps.Circle({ //範囲情報\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.5,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.2,\n        // map: map,\n        center: utsunomiyaZoo,\n        radius: 100\n    });\n    const utsunomiyaParkArea = new google.maps.Circle({ //範囲情報\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.5,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.2,\n        // map: map,\n        center: utsunomiyaPark,\n        radius: 1000\n    });\n    const matsugamineArea = new google.maps.Circle({ //範囲情報\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.5,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.2,\n        // map: map,\n        center: matsugamine,\n        radius: 100\n    });\n    const kurasseArea = new google.maps.Circle({ //範囲情報\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.5,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.2,\n        // map: map,\n        center: kurasse,\n        radius: 100\n    });\n    const utsunomiyaTowerArea = new google.maps.Circle({ //範囲情報\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.5,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.2,\n        // map: map,\n        center: utsunomiyaTower,\n        radius: 100\n    });\n    const selectCafeArea = new google.maps.Circle({ //範囲情報\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.5,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.2,\n        // map: map,\n        center: selectCafe,\n        radius: 100\n    });\n    const testArea = new google.maps.Circle({ //範囲情報\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.5,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.2,\n        // map: map,\n        center: test,\n        radius: 100\n    });\n\n\n\n    //-----------------------------------------------------------\n\n    // const [isAvailable, setAvailable] = useState(false);\n    // const [position, setPosition] = useState<{ latitude: number, longitude: number }>();\n\n    // // useEffectが実行されているかどうかを判定するために用意しています\n    // const isFirstRef = useRef(true);\n\n    /*\n     * ページ描画時にGeolocation APIが使えるかどうかをチェックしています\n     * もし使えなければその旨のエラーメッセージを表示させます\n     */\n    // useEffect(() => {\n    //     isFirstRef.current = false;\n    //     if ('geolocation' in navigator) {\n    //         setAvailable(true);\n    //     }\n    // }, [isAvailable]);\n\n    function error(error: any) {\n        var errorMessage: any = {\n            0: \"原因不明のエラーが発生しました…。\",\n            1: \"位置情報の取得が許可されませんでした…。\",\n            2: \"電波状況などで位置情報が取得できませんでした…。\",\n            3: \"位置情報の取得に時間がかかり過ぎてタイムアウトしました…。\",\n        };\n        console.log(errorMessage[error.code]);//getccurentpotion\n    }\n\n    const getCurrentPosition = () => {\n        navigator.geolocation.getCurrentPosition((position: Position) => {\n            var data = position.coords;\n            var lat = data.latitude;\n            var lng = data.longitude;\n            var latlng = new google.maps.LatLng(lat, lng);\n            // var canvas = document.getElementById('map-canvas') as Element;\n            // document.getElementById('google').innerHTML= \"String(lat)\" ;\n            // var mapOptions = {\n            //     zoom: 15,\n            //     center: latlng,\n            //     mapTypeId: google.maps.MapTypeId.ROADMAP\n            // }\n            // var map = new google.maps.Map(canvas, mapOptions);\n            // const {lati,longa} = position.coords\n            alert(lat)\n            alert(lng)\n            setPosition({ latitude: lat, longitude: lng });\n            // marker\n            var markerOptions = {\n                // map: map,\n                position: latlng,\n                draggable: true,\n                visible: true,\n            }\n            new google.maps.Marker(markerOptions);\n            //宇都宮駅\n            if (google.maps.geometry.spherical.computeDistanceBetween(latlng, utsunomiyaArea.getCenter()) <= utsunomiyaArea.getRadius()) { //領域判定\n                console.log(\"宇都宮駅範囲内\")\n                alert(\"宇都宮駅範囲内\")\n            } else {\n                console.log(\"宇都宮駅範囲外\")\n                alert(\"宇都宮駅範囲外\")\n            }\n            //大谷資料館\n            if (google.maps.geometry.spherical.computeDistanceBetween(latlng, oyashiryokanArea.getCenter()) <= oyashiryokanArea.getRadius()) { //領域判定\n                console.log(\"大谷資料館範囲内\")\n                alert(\"大谷資料館範囲内\")\n            } else {\n                console.log(\"大谷資料館範囲外\")\n                alert(\"大谷資料館範囲外\")\n            }\n            //大谷寺\n            if (google.maps.geometry.spherical.computeDistanceBetween(latlng, oyaderaArea.getCenter()) <= oyaderaArea.getRadius()) { //領域判定\n                console.log(\"大谷寺範囲内\")\n                alert(\"大谷寺範囲内\")\n            } else {\n                console.log(\"大谷寺範囲外\")\n                alert(\"大谷寺範囲外\")\n            }\n            //クーリ・ルージュ\n            if (google.maps.geometry.spherical.computeDistanceBetween(latlng, kurirujuArea.getCenter()) <= kurirujuArea.getRadius()) { //領域判定\n                console.log(\"クーリ・ルージュ範囲内\")\n                alert(\"クーリ・ルージュ範囲内\")\n            } else {\n                console.log(\"クーリ・ルージュ範囲外\")\n                alert(\"クーリ・ルージュ範囲外\")\n            }\n            //最上茶屋\n            if (google.maps.geometry.spherical.computeDistanceBetween(latlng, mogamijayaArea.getCenter()) <= mogamijayaArea.getRadius()) { //領域判定\n                console.log(\"最上茶屋範囲内\")\n                alert(\"最上茶屋範囲内\")\n            } else {\n                console.log(\"最上茶屋範囲外\")\n                alert(\"最上茶屋範囲外\")\n            }\n            //若竹\n            if (google.maps.geometry.spherical.computeDistanceBetween(latlng, wakatakeArea.getCenter()) <= wakatakeArea.getRadius()) { //領域判定\n                console.log(\"若竹範囲内\")\n                alert(\"若竹範囲内\")\n            } else {\n                console.log(\"若竹範囲外\")\n                alert(\"若竹範囲外\")\n            }\n            //動物園\n            if (google.maps.geometry.spherical.computeDistanceBetween(latlng, utsunomiyaZooArea.getCenter()) <= utsunomiyaZooArea.getRadius()) { //領域判定\n                console.log(\"動物園範囲内\")\n                alert(\"動物園範囲内\")\n            } else {\n                console.log(\"動物園範囲外\")\n                alert(\"動物園範囲外\")\n            }\n            //公園\n            if (google.maps.geometry.spherical.computeDistanceBetween(latlng, utsunomiyaParkArea.getCenter()) <= utsunomiyaParkArea.getRadius()) { //領域判定\n                console.log(\"公園範囲内\")\n                alert(\"公園範囲内\")\n            } else {\n                console.log(\"公園範囲外\")\n                alert(\"公園範囲外\")\n            }\n            //松が峰\n            if (google.maps.geometry.spherical.computeDistanceBetween(latlng, matsugamineArea.getCenter()) <= matsugamineArea.getRadius()) { //領域判定\n                console.log(\"松が峰範囲内\")\n                alert(\"松が峰範囲内\")\n            } else {\n                console.log(\"松が峰範囲外\")\n                alert(\"松が峰範囲外\")\n            }\n            //くらっせ\n            if (google.maps.geometry.spherical.computeDistanceBetween(latlng, kurasseArea.getCenter()) <= kurasseArea.getRadius()) { //領域判定\n                console.log(\"くらっせ範囲内\")\n                alert(\"くらっせ範囲内\")\n            } else {\n                console.log(\"くらっせ範囲外\")\n                alert(\"くらっせ範囲外\")\n            }\n            //宇都宮タワー\n            if (google.maps.geometry.spherical.computeDistanceBetween(latlng, utsunomiyaTowerArea.getCenter()) <= utsunomiyaTowerArea.getRadius()) { //領域判定\n                console.log(\"宇都宮タワー範囲内\")\n                alert(\"宇都宮タワー範囲内\")\n            } else {\n                console.log(\"宇都宮タワー範囲外\")\n                alert(\"宇都宮タワー範囲外\")\n            }\n            //SELECT\n            if (google.maps.geometry.spherical.computeDistanceBetween(latlng, selectCafeArea.getCenter()) <= selectCafeArea.getRadius()) { //領域判定\n                console.log(\"SELECT範囲内\")\n                alert(\"SELECT範囲内\")\n            } else {\n                console.log(\"SELECT範囲外\")\n                alert(\"SELECT範囲外\")\n            }\n            //test\n            if (google.maps.geometry.spherical.computeDistanceBetween(latlng, testArea.getCenter()) <= testArea.getRadius()) { //領域判定\n                console.log(\"test範囲内\")\n            } else {\n                console.log(\"test駅範囲外\")\n            }\n        }, failure => {\n            if (failure.message.startsWith(\"Only secure origins are allowed\")) {\n                console.log(\"secure issuess\")\n            }\n        });\n    }\n\n    //------------\n\n    return <div>\n\n        <button onClick={() => getCurrentPosition()}>現在地</button>\n        <input id=\"google\" type=\"text\"></input>\n        <div>latitude:{position?.latitude}</div>\n        <div>longtitude:{position?.longitude}</div>\n        <h1>\n            <span role=\"img\" aria-label=\"tent\">\n                🤔\n            </span>\n        </h1>\n        <GoogleMap\n            mapContainerStyle={mapContainerStyle}\n            zoom={15}\n            center={center}\n            options={options}\n        >\n\n            {position?.latitude && <Marker\n                position={new google.maps.LatLng(position?.latitude, position?.longitude)}//値が入っていることを保証しないとエラー\n            // icon={\"📝\"}\n            // label={\"Marker！！\"}\n            // visible={true}\n            // onLoad={onLoad}\n            />}\n            <Marker\n                position={utsunomiyaArea.getCenter()}\n            // icon={\"📝\"}\n            // label={\"Marker！！\"}\n            // visible={true}\n            // onLoad={onLoad}\n            />\n            <Circle\n                center={utsunomiyaArea.getCenter()}\n                radius={100}\n                visible={true}\n            ></Circle>\n\n            <Marker\n                position={oyashiryokanArea.getCenter()}\n            // icon={\"📝\"}\n            // label={\"Marker！！\"}\n            // visible={true}\n            // onLoad={onLoad}\n            />\n            <Circle\n                center={oyashiryokanArea.getCenter()}\n                radius={1000}\n                visible={true}\n            >\n            </Circle>\n            <Marker\n                position={oyaderaArea.getCenter()}\n            // icon={\"📝\"}\n            // label={\"Marker！！\"}\n            // visible={true}\n            // onLoad={onLoad}\n            />\n            <Circle\n                center={oyaderaArea.getCenter()}\n                radius={500}\n                visible={true}\n            >\n            </Circle>\n            <Marker\n                position={kurirujuArea.getCenter()}\n            // icon={\"📝\"}\n            // label={\"Marker！！\"}\n            // visible={true}\n            // onLoad={onLoad}\n            />\n            <Circle\n                center={kurirujuArea.getCenter()}\n                radius={100}\n                visible={true}\n            >\n            </Circle>\n            <Marker\n                position={mogamijayaArea.getCenter()}\n            // icon={\"📝\"}\n            // label={\"Marker！！\"}\n            // visible={true}\n            // onLoad={onLoad}\n            />\n            <Circle\n                center={mogamijayaArea.getCenter()}\n                radius={500}\n                visible={true}\n            >\n            </Circle>\n            <Marker\n                position={wakatakeArea.getCenter()}\n            // icon={\"📝\"}\n            // label={\"Marker！！\"}\n            // visible={true}\n            // onLoad={onLoad}\n            />\n            <Circle\n                center={wakatakeArea.getCenter()}\n                radius={100}\n                visible={true}\n            >\n            </Circle>\n            <Marker\n                position={utsunomiyaZooArea.getCenter()}\n            // icon={\"📝\"}\n            // label={\"Marker！！\"}\n            // visible={true}\n            // onLoad={onLoad}\n            />\n            <Circle\n                center={utsunomiyaZooArea.getCenter()}\n                radius={100}\n                visible={true}\n            >\n            </Circle>\n            <Marker\n                position={utsunomiyaParkArea.getCenter()}\n            // icon={\"📝\"}\n            // label={\"Marker！！\"}\n            // visible={true}\n            // onLoad={onLoad}\n            />\n            <Circle\n                center={utsunomiyaParkArea.getCenter()}\n                radius={1000}\n                visible={true}\n            >\n            </Circle>\n            <Marker\n                position={matsugamineArea.getCenter()}\n            // icon={\"📝\"}\n            // label={\"Marker！！\"}\n            // visible={true}\n            // onLoad={onLoad}\n            />\n            <Circle\n                center={matsugamineArea.getCenter()}\n                radius={100}\n                visible={true}\n            >\n            </Circle>\n            <Marker\n                position={kurasseArea.getCenter()}\n            // icon={\"📝\"}\n            // label={\"Marker！！\"}\n            // visible={true}\n            // onLoad={onLoad}\n            />\n            <Circle\n                center={kurasseArea.getCenter()}\n                radius={100}\n                visible={true}\n            >\n            </Circle>\n            <Marker\n                position={utsunomiyaTowerArea.getCenter()}\n            // icon={\"📝\"}\n            // label={\"Marker！！\"}\n            // visible={true}\n            // onLoad={onLoad}\n            />\n            <Circle\n                center={utsunomiyaTowerArea.getCenter()}\n                radius={100}\n                visible={true}\n            >\n            </Circle>\n            <Marker\n                position={selectCafeArea.getCenter()}\n            // icon={\"📝\"}\n            // label={\"Marker！！\"}\n            // visible={true}\n            // onLoad={onLoad}\n            />\n            <Circle\n                center={selectCafeArea.getCenter()}\n                radius={100}\n                visible={true}\n            >\n            </Circle>\n\n            <Circle\n                center={testArea.getCenter()}\n                radius={100}\n                visible={true}\n            >\n            </Circle>\n        </GoogleMap>\n    </div>\n}\n\n\n\n\n\n\n\nexport default GoogleMapAPI;"]},"metadata":{},"sourceType":"module"}