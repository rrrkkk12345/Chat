{"ast":null,"code":"import _slicedToArray from\"/Users/rei.kawasato/Desktop/travel/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import{GoogleMap,useLoadScript,Marker,Circle}from\"@react-google-maps/api\";import useReactRouter from'use-react-router';import{makeStyles}from'@material-ui/core';var TabChatOff=require('../assets/TabChatOff.png');var TabMapOn=require('../assets/TabMapOn.png');var useStyles=makeStyles(function(theme){return{bottomTab:{position:\"fixed\",bottom:\"0\",height:\"10%\",width:\"100%\",backgroundColor:\"#eeedea\",display:\"flex\",flexDirection:\"row\",textAlign:\"center\",justifyContent:\"center\",alignItems:\"center\"},bottomChat:{// border: \"2px solid\",\n// borderColor: \"pink\",\nflex:1},bottomMap:{// border: \"2px solid\",\n// borderColor: \"pink\",\nflex:1}};});var mapContainerStyle={width:\"100vw\",height:\"100vh\"};var center={lat:36.559707,lng:139.898472};var options={disableDefaultUI:true,zoomControl:true};var BottomTab=function BottomTab(){var _useReactRouter=useReactRouter(),history=_useReactRouter.history;var classes=useStyles();return/*#__PURE__*/React.createElement(\"div\",{className:classes.bottomTab},/*#__PURE__*/React.createElement(\"div\",{className:classes.bottomChat},/*#__PURE__*/React.createElement(\"img\",{src:TabChatOff,onClick:function onClick(){return history.push(\"/chat\");}}),/*#__PURE__*/React.createElement(\"div\",null,\"\\u30C1\\u30E3\\u30C3\\u30C8\")),/*#__PURE__*/React.createElement(\"div\",{className:classes.bottomMap},/*#__PURE__*/React.createElement(\"img\",{src:TabMapOn}),/*#__PURE__*/React.createElement(\"div\",null,\"\\u30DE\\u30C3\\u30D7\")));};var libraries=[\"places\",\"geometry\"];var GoogleMapAPI=function GoogleMapAPI(){var _useState=useState(),_useState2=_slicedToArray(_useState,2),position=_useState2[0],setPosition=_useState2[1];//-----------------------------------------------------------\nvar googleMapsApiKey=process.env.REACT_APP_GOOGLE_MAPS_API_KEY;var _useLoadScript=useLoadScript({googleMapsApiKey:googleMapsApiKey,libraries:libraries}),isLoaded=_useLoadScript.isLoaded,loadError=_useLoadScript.loadError;if(loadError)return/*#__PURE__*/React.createElement(\"h1\",null,\"\\\"Error loading maps\\\"\");//returnあとにusestate入れるとだめ\nif(!isLoaded)return/*#__PURE__*/React.createElement(\"h1\",null,\"Loading maps\");//-----------------------------------------------------------\n//-----------------------------------------------------------\nvar utsunomiya=new google.maps.LatLng(36.559707,139.898472);//宇都宮駅\nvar oyashiryokan=new google.maps.LatLng(36.602020,139.824747);//大谷資料館\nvar oyadera=new google.maps.LatLng(36.597424,139.820439);//大谷寺\nvar kuriruju=new google.maps.LatLng(36.631208,139.827650);//クーリ・ルージュ\nvar mogamijaya=new google.maps.LatLng(36.617913,139.820958);//最上茶屋\nvar wakatake=new google.maps.LatLng(36.616712,139.849803);//若竹の社\nvar utsunomiyaZoo=new google.maps.LatLng(36.632781,139.853577);//宇都宮動物園\nvar utsunomiyaPark=new google.maps.LatLng(36.618265,139.790336);//宇都宮森林公園\nvar matsugamine=new google.maps.LatLng(36.558171,139.881408);//松が峰教会\nvar kurasse=new google.maps.LatLng(36.560851,139.885278);//来らっせ\nvar utsunomiyaTower=new google.maps.LatLng(36.570387,139.885919);//宇都宮タワー\nvar selectCafe=new google.maps.LatLng(36.560085,139.902119);//SELECT\nvar test=new google.maps.LatLng(36.204823999,138.272924);//テスト\n//-----------------------------------------------------------\n// const res = google.maps.geometry.spherical.computeDistanceBetween(oyasiryokan, utsunomiya) \n// console.log(res)\nvar utsunomiyaArea=new google.maps.Circle({//範囲情報\nstrokeColor:'#FF0000',strokeOpacity:0.5,strokeWeight:2,fillColor:'#FF0000',fillOpacity:0.2,// map: map,\ncenter:utsunomiya,radius:100});var oyashiryokanArea=new google.maps.Circle({//範囲情報\nstrokeColor:'#FF0000',strokeOpacity:0.5,strokeWeight:2,fillColor:'#FF0000',fillOpacity:0.2,// map: map,\ncenter:oyashiryokan,radius:1000});var oyaderaArea=new google.maps.Circle({//範囲情報\nstrokeColor:'#FF0000',strokeOpacity:0.5,strokeWeight:2,fillColor:'#FF0000',fillOpacity:0.2,// map: map,\ncenter:oyadera,radius:500});var kurirujuArea=new google.maps.Circle({//範囲情報\nstrokeColor:'#FF0000',strokeOpacity:0.5,strokeWeight:2,fillColor:'#FF0000',fillOpacity:0.2,// map: map,\ncenter:kuriruju,radius:500});var mogamijayaArea=new google.maps.Circle({//範囲情報\nstrokeColor:'#FF0000',strokeOpacity:0.5,strokeWeight:2,fillColor:'#FF0000',fillOpacity:0.2,// map: map,\ncenter:mogamijaya,radius:100});var wakatakeArea=new google.maps.Circle({//範囲情報\nstrokeColor:'#FF0000',strokeOpacity:0.5,strokeWeight:2,fillColor:'#FF0000',fillOpacity:0.2,// map: map,\ncenter:wakatake,radius:100});var utsunomiyaZooArea=new google.maps.Circle({//範囲情報\nstrokeColor:'#FF0000',strokeOpacity:0.5,strokeWeight:2,fillColor:'#FF0000',fillOpacity:0.2,// map: map,\ncenter:utsunomiyaZoo,radius:100});var utsunomiyaParkArea=new google.maps.Circle({//範囲情報\nstrokeColor:'#FF0000',strokeOpacity:0.5,strokeWeight:2,fillColor:'#FF0000',fillOpacity:0.2,// map: map,\ncenter:utsunomiyaPark,radius:1000});var matsugamineArea=new google.maps.Circle({//範囲情報\nstrokeColor:'#FF0000',strokeOpacity:0.5,strokeWeight:2,fillColor:'#FF0000',fillOpacity:0.2,// map: map,\ncenter:matsugamine,radius:100});var kurasseArea=new google.maps.Circle({//範囲情報\nstrokeColor:'#FF0000',strokeOpacity:0.5,strokeWeight:2,fillColor:'#FF0000',fillOpacity:0.2,// map: map,\ncenter:kurasse,radius:100});var utsunomiyaTowerArea=new google.maps.Circle({//範囲情報\nstrokeColor:'#FF0000',strokeOpacity:0.5,strokeWeight:2,fillColor:'#FF0000',fillOpacity:0.2,// map: map,\ncenter:utsunomiyaTower,radius:100});var selectCafeArea=new google.maps.Circle({//範囲情報\nstrokeColor:'#FF0000',strokeOpacity:0.5,strokeWeight:2,fillColor:'#FF0000',fillOpacity:0.2,// map: map,\ncenter:selectCafe,radius:100});var testArea=new google.maps.Circle({//範囲情報\nstrokeColor:'#FF0000',strokeOpacity:0.5,strokeWeight:2,fillColor:'#FF0000',fillOpacity:0.2,// map: map,\ncenter:test,radius:100});//-----------------------------------------------------------\n// const [isAvailable, setAvailable] = useState(false);\n// const [position, setPosition] = useState<{ latitude: number, longitude: number }>();\n// // useEffectが実行されているかどうかを判定するために用意しています\n// const isFirstRef = useRef(true);\n/*\n     * ページ描画時にGeolocation APIが使えるかどうかをチェックしています\n     * もし使えなければその旨のエラーメッセージを表示させます\n     */ // useEffect(() => {\n//     isFirstRef.current = false;\n//     if ('geolocation' in navigator) {\n//         setAvailable(true);\n//     }\n// }, [isAvailable]);\nfunction error(error){var errorMessage={0:\"原因不明のエラーが発生しました…。\",1:\"位置情報の取得が許可されませんでした…。\",2:\"電波状況などで位置情報が取得できませんでした…。\",3:\"位置情報の取得に時間がかかり過ぎてタイムアウトしました…。\"};console.log(errorMessage[error.code]);//getccurentpotion\n}var getCurrentPosition=function getCurrentPosition(){navigator.geolocation.getCurrentPosition(function(position){var data=position.coords;var lat=data.latitude;var lng=data.longitude;var latlng=new google.maps.LatLng(lat,lng);// var canvas = document.getElementById('map-canvas') as Element;\n// document.getElementById('google').innerHTML= \"String(lat)\" ;\n// var mapOptions = {\n//     zoom: 15,\n//     center: latlng,\n//     mapTypeId: google.maps.MapTypeId.ROADMAP\n// }\n// var map = new google.maps.Map(canvas, mapOptions);\n// const {lati,longa} = position.coords\nalert(lat);alert(lng);setPosition({latitude:lat,longitude:lng});// marker\nvar markerOptions={// map: map,\nposition:latlng,draggable:true,visible:true};new google.maps.Marker(markerOptions);//宇都宮駅\nif(google.maps.geometry.spherical.computeDistanceBetween(latlng,utsunomiyaArea.getCenter())<=utsunomiyaArea.getRadius()){//領域判定\nconsole.log(\"宇都宮駅範囲内\");// alert(\"宇都宮駅範囲内\")\n}else{console.log(\"宇都宮駅範囲外\");// alert(\"宇都宮駅範囲外\")\n}//大谷資料館\nif(google.maps.geometry.spherical.computeDistanceBetween(latlng,oyashiryokanArea.getCenter())<=oyashiryokanArea.getRadius()){//領域判定\nconsole.log(\"大谷資料館範囲内\");// alert(\"大谷資料館範囲内\")\n}else{console.log(\"大谷資料館範囲外\");// alert(\"大谷資料館範囲外\")\n}//大谷寺\nif(google.maps.geometry.spherical.computeDistanceBetween(latlng,oyaderaArea.getCenter())<=oyaderaArea.getRadius()){//領域判定\nconsole.log(\"大谷寺範囲内\");// alert(\"大谷寺範囲内\")\n}else{console.log(\"大谷寺範囲外\");// alert(\"大谷寺範囲外\")\n}//クーリ・ルージュ\nif(google.maps.geometry.spherical.computeDistanceBetween(latlng,kurirujuArea.getCenter())<=kurirujuArea.getRadius()){//領域判定\nconsole.log(\"クーリ・ルージュ範囲内\");// alert(\"クーリ・ルージュ範囲内\")\n}else{console.log(\"クーリ・ルージュ範囲外\");// alert(\"クーリ・ルージュ範囲外\")\n}//最上茶屋\nif(google.maps.geometry.spherical.computeDistanceBetween(latlng,mogamijayaArea.getCenter())<=mogamijayaArea.getRadius()){//領域判定\nconsole.log(\"最上茶屋範囲内\");// alert(\"最上茶屋範囲内\")\n}else{console.log(\"最上茶屋範囲外\");// alert(\"最上茶屋範囲外\")\n}//若竹\nif(google.maps.geometry.spherical.computeDistanceBetween(latlng,wakatakeArea.getCenter())<=wakatakeArea.getRadius()){//領域判定\nconsole.log(\"若竹範囲内\");// alert(\"若竹範囲内\")\n}else{console.log(\"若竹範囲外\");// alert(\"若竹範囲外\")\n}//動物園\nif(google.maps.geometry.spherical.computeDistanceBetween(latlng,utsunomiyaZooArea.getCenter())<=utsunomiyaZooArea.getRadius()){//領域判定\nconsole.log(\"動物園範囲内\");// alert(\"動物園範囲内\")\n}else{console.log(\"動物園範囲外\");// alert(\"動物園範囲外\")\n}//公園\nif(google.maps.geometry.spherical.computeDistanceBetween(latlng,utsunomiyaParkArea.getCenter())<=utsunomiyaParkArea.getRadius()){//領域判定\nconsole.log(\"公園範囲内\");// alert(\"公園範囲内\")\n}else{console.log(\"公園範囲外\");// alert(\"公園範囲外\")\n}//松が峰\nif(google.maps.geometry.spherical.computeDistanceBetween(latlng,matsugamineArea.getCenter())<=matsugamineArea.getRadius()){//領域判定\nconsole.log(\"松が峰範囲内\");// alert(\"松が峰範囲内\")\n}else{console.log(\"松が峰範囲外\");// alert(\"松が峰範囲外\")\n}//くらっせ\nif(google.maps.geometry.spherical.computeDistanceBetween(latlng,kurasseArea.getCenter())<=kurasseArea.getRadius()){//領域判定\nconsole.log(\"くらっせ範囲内\");// alert(\"くらっせ範囲内\")\n}else{console.log(\"くらっせ範囲外\");// alert(\"くらっせ範囲外\")\n}//宇都宮タワー\nif(google.maps.geometry.spherical.computeDistanceBetween(latlng,utsunomiyaTowerArea.getCenter())<=utsunomiyaTowerArea.getRadius()){//領域判定\nconsole.log(\"宇都宮タワー範囲内\");// alert(\"宇都宮タワー範囲内\")\n}else{console.log(\"宇都宮タワー範囲外\");// alert(\"宇都宮タワー範囲外\")\n}//SELECT\nif(google.maps.geometry.spherical.computeDistanceBetween(latlng,selectCafeArea.getCenter())<=selectCafeArea.getRadius()){//領域判定\nconsole.log(\"SELECT範囲内\");// alert(\"SELECT範囲内\")\n}else{console.log(\"SELECT範囲外\");// alert(\"SELECT範囲外\")\n}//test\nif(google.maps.geometry.spherical.computeDistanceBetween(latlng,testArea.getCenter())<=testArea.getRadius()){//領域判定\nconsole.log(\"test範囲内\");}else{console.log(\"test駅範囲外\");}},function(failure){if(failure.message.startsWith(\"Only secure origins are allowed\")){console.log(\"secure issuess\");}});};//------------\nreturn/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"button\",{onClick:function onClick(){return getCurrentPosition();}},\"\\u30C1\\u30A7\\u30C3\\u30AF\\u30A4\\u30F3\"),/*#__PURE__*/React.createElement(\"div\",null,\"latitude:\",position===null||position===void 0?void 0:position.latitude),/*#__PURE__*/React.createElement(\"div\",null,\"longtitude:\",position===null||position===void 0?void 0:position.longitude),/*#__PURE__*/React.createElement(GoogleMap,{mapContainerStyle:mapContainerStyle,zoom:15,center:center,options:options},(position===null||position===void 0?void 0:position.latitude)&&/*#__PURE__*/React.createElement(Marker,{position:new google.maps.LatLng(position===null||position===void 0?void 0:position.latitude,position===null||position===void 0?void 0:position.longitude)//値が入っていることを保証しないとエラー\n// icon={\"📝\"}\n// label={\"Marker！！\"}\n// visible={true}\n// onLoad={onLoad}\n}),/*#__PURE__*/React.createElement(Marker,{position:utsunomiyaArea.getCenter()// icon={\"📝\"}\n// label={\"Marker！！\"}\n// visible={true}\n// onLoad={onLoad}\n}),/*#__PURE__*/React.createElement(Circle,{center:utsunomiyaArea.getCenter(),radius:100,visible:true}),/*#__PURE__*/React.createElement(Marker,{position:oyashiryokanArea.getCenter()// icon={\"📝\"}\n// label={\"Marker！！\"}\n// visible={true}\n// onLoad={onLoad}\n}),/*#__PURE__*/React.createElement(Circle,{center:oyashiryokanArea.getCenter(),radius:1000,visible:true}),/*#__PURE__*/React.createElement(Marker,{position:oyaderaArea.getCenter()// icon={\"📝\"}\n// label={\"Marker！！\"}\n// visible={true}\n// onLoad={onLoad}\n}),/*#__PURE__*/React.createElement(Circle,{center:oyaderaArea.getCenter(),radius:500,visible:true}),/*#__PURE__*/React.createElement(Marker,{position:kurirujuArea.getCenter()// icon={\"📝\"}\n// label={\"Marker！！\"}\n// visible={true}\n// onLoad={onLoad}\n}),/*#__PURE__*/React.createElement(Circle,{center:kurirujuArea.getCenter(),radius:100,visible:true}),/*#__PURE__*/React.createElement(Marker,{position:mogamijayaArea.getCenter()// icon={\"📝\"}\n// label={\"Marker！！\"}\n// visible={true}\n// onLoad={onLoad}\n}),/*#__PURE__*/React.createElement(Circle,{center:mogamijayaArea.getCenter(),radius:500,visible:true}),/*#__PURE__*/React.createElement(Marker,{position:wakatakeArea.getCenter()// icon={\"📝\"}\n// label={\"Marker！！\"}\n// visible={true}\n// onLoad={onLoad}\n}),/*#__PURE__*/React.createElement(Circle,{center:wakatakeArea.getCenter(),radius:100,visible:true}),/*#__PURE__*/React.createElement(Marker,{position:utsunomiyaZooArea.getCenter()// icon={\"📝\"}\n// label={\"Marker！！\"}\n// visible={true}\n// onLoad={onLoad}\n}),/*#__PURE__*/React.createElement(Circle,{center:utsunomiyaZooArea.getCenter(),radius:100,visible:true}),/*#__PURE__*/React.createElement(Marker,{position:utsunomiyaParkArea.getCenter()// icon={\"📝\"}\n// label={\"Marker！！\"}\n// visible={true}\n// onLoad={onLoad}\n}),/*#__PURE__*/React.createElement(Circle,{center:utsunomiyaParkArea.getCenter(),radius:1000,visible:true}),/*#__PURE__*/React.createElement(Marker,{position:matsugamineArea.getCenter()// icon={\"📝\"}\n// label={\"Marker！！\"}\n// visible={true}\n// onLoad={onLoad}\n}),/*#__PURE__*/React.createElement(Circle,{center:matsugamineArea.getCenter(),radius:100,visible:true}),/*#__PURE__*/React.createElement(Marker,{position:kurasseArea.getCenter()// icon={\"📝\"}\n// label={\"Marker！！\"}\n// visible={true}\n// onLoad={onLoad}\n}),/*#__PURE__*/React.createElement(Circle,{center:kurasseArea.getCenter(),radius:100,visible:true}),/*#__PURE__*/React.createElement(Marker,{position:utsunomiyaTowerArea.getCenter()// icon={\"📝\"}\n// label={\"Marker！！\"}\n// visible={true}\n// onLoad={onLoad}\n}),/*#__PURE__*/React.createElement(Circle,{center:utsunomiyaTowerArea.getCenter(),radius:100,visible:true}),/*#__PURE__*/React.createElement(Marker,{position:selectCafeArea.getCenter()// icon={\"📝\"}\n// label={\"Marker！！\"}\n// visible={true}\n// onLoad={onLoad}\n}),/*#__PURE__*/React.createElement(Circle,{center:selectCafeArea.getCenter(),radius:100,visible:true}),/*#__PURE__*/React.createElement(Circle,{center:testArea.getCenter(),radius:100,visible:true})),/*#__PURE__*/React.createElement(BottomTab,null));};export default GoogleMapAPI;","map":{"version":3,"sources":["/Users/rei.kawasato/Desktop/travel/src/utils/googleMapAPI.tsx"],"names":["React","useState","GoogleMap","useLoadScript","Marker","Circle","useReactRouter","makeStyles","TabChatOff","require","TabMapOn","useStyles","theme","bottomTab","position","bottom","height","width","backgroundColor","display","flexDirection","textAlign","justifyContent","alignItems","bottomChat","flex","bottomMap","mapContainerStyle","center","lat","lng","options","disableDefaultUI","zoomControl","BottomTab","history","classes","push","libraries","GoogleMapAPI","setPosition","googleMapsApiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","isLoaded","loadError","utsunomiya","google","maps","LatLng","oyashiryokan","oyadera","kuriruju","mogamijaya","wakatake","utsunomiyaZoo","utsunomiyaPark","matsugamine","kurasse","utsunomiyaTower","selectCafe","test","utsunomiyaArea","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","radius","oyashiryokanArea","oyaderaArea","kurirujuArea","mogamijayaArea","wakatakeArea","utsunomiyaZooArea","utsunomiyaParkArea","matsugamineArea","kurasseArea","utsunomiyaTowerArea","selectCafeArea","testArea","error","errorMessage","console","log","code","getCurrentPosition","navigator","geolocation","data","coords","latitude","longitude","latlng","alert","markerOptions","draggable","visible","geometry","spherical","computeDistanceBetween","getCenter","getRadius","failure","message","startsWith"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, SetStateAction } from 'react'\nimport {\n    GoogleMap,\n    useLoadScript,\n    Marker,\n    Circle,\n} from \"@react-google-maps/api\"\nimport { Libraries } from '@react-google-maps/api/dist/utils/make-load-script-url';\nimport useReactRouter from 'use-react-router';\nimport { Typography, makeStyles, Grid, Box, Button, ListItemAvatar, Avatar, List } from '@material-ui/core'\nconst TabChatOff = require('../assets/TabChatOff.png');\nconst TabMapOn = require('../assets/TabMapOn.png');\nconst useStyles = makeStyles((theme) => ({\n    \n    bottomTab: {\n        position: \"fixed\",\n        bottom: \"0\",\n        height: \"10%\",\n        width: \"100%\",\n        backgroundColor: \"#eeedea\",\n        display: \"flex\",\n        flexDirection:\"row\",\n        textAlign:\"center\",\n        justifyContent:\"center\",\n        alignItems:\"center\"\n    },\n    bottomChat: {\n        // border: \"2px solid\",\n        // borderColor: \"pink\",\n        flex:1,\n    },\n    bottomMap: {\n        // border: \"2px solid\",\n        // borderColor: \"pink\",\n        flex:1,\n    }\n}))\nconst mapContainerStyle = {\n    width: \"100vw\",\n    height: \"100vh\",\n};\n\nconst center = {\n    lat: 36.559707,\n    lng: 139.898472,\n};\n\nconst options = {\n    disableDefaultUI: true,\n    zoomControl: true\n};\n\nconst BottomTab: React.FC = () => {\n    const { history } = useReactRouter();\n    const classes = useStyles()\n    return (\n\n        <div className={classes.bottomTab}>\n            <div className={classes.bottomChat}>\n\n                <img   src={TabChatOff} onClick={()=>history.push(\"/chat\")}/>\n                <div>\n                    チャット\n                </div>\n            </div>\n            <div className={classes.bottomMap} >\n\n                <img  src={TabMapOn} />\n                <div>\n                    マップ\n                </div>\n            </div>\n        </div>\n    )\n}\n\nconst libraries: Libraries = [\"places\", \"geometry\"]\n\nconst GoogleMapAPI: React.FC = () => {\n\n    const [position, setPosition] = useState<{ latitude: number, longitude: number }>();\n    //-----------------------------------------------------------\n    const googleMapsApiKey = process.env.REACT_APP_GOOGLE_MAPS_API_KEY as string\n\n    const { isLoaded, loadError } = useLoadScript({\n        googleMapsApiKey,\n        libraries: libraries,\n    });\n\n    if (loadError) return <h1>\"Error loading maps\"</h1>//returnあとにusestate入れるとだめ\n    if (!isLoaded) return <h1>Loading maps</h1>\n    //-----------------------------------------------------------\n\n    //-----------------------------------------------------------\n    const utsunomiya = new google.maps.LatLng(36.559707, 139.898472) //宇都宮駅\n    const oyashiryokan = new google.maps.LatLng(36.602020, 139.824747) //大谷資料館\n    const oyadera = new google.maps.LatLng(36.597424, 139.820439) //大谷寺\n    const kuriruju = new google.maps.LatLng(36.631208, 139.827650) //クーリ・ルージュ\n    const mogamijaya = new google.maps.LatLng(36.617913, 139.820958) //最上茶屋\n    const wakatake = new google.maps.LatLng(36.616712, 139.849803) //若竹の社\n    const utsunomiyaZoo = new google.maps.LatLng(36.632781, 139.853577) //宇都宮動物園\n    const utsunomiyaPark = new google.maps.LatLng(36.618265, 139.790336) //宇都宮森林公園\n    const matsugamine = new google.maps.LatLng(36.558171, 139.881408) //松が峰教会\n    const kurasse = new google.maps.LatLng(36.560851, 139.885278) //来らっせ\n    const utsunomiyaTower = new google.maps.LatLng(36.570387, 139.885919) //宇都宮タワー\n    const selectCafe = new google.maps.LatLng(36.560085, 139.902119) //SELECT\n    const test = new google.maps.LatLng(36.204823999, 138.272924) //テスト\n    //-----------------------------------------------------------\n    // const res = google.maps.geometry.spherical.computeDistanceBetween(oyasiryokan, utsunomiya) \n    // console.log(res)\n\n    const utsunomiyaArea = new google.maps.Circle({ //範囲情報\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.5,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.2,\n        // map: map,\n        center: utsunomiya,\n        radius: 100\n    });\n\n    const oyashiryokanArea = new google.maps.Circle({ //範囲情報\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.5,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.2,\n        // map: map,\n        center: oyashiryokan,\n        radius: 1000\n    });\n    const oyaderaArea = new google.maps.Circle({ //範囲情報\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.5,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.2,\n        // map: map,\n        center: oyadera,\n        radius: 500\n    });\n    const kurirujuArea = new google.maps.Circle({ //範囲情報\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.5,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.2,\n        // map: map,\n        center: kuriruju,\n        radius: 500\n    });\n    const mogamijayaArea = new google.maps.Circle({ //範囲情報\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.5,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.2,\n        // map: map,\n        center: mogamijaya,\n        radius: 100\n    });\n    const wakatakeArea = new google.maps.Circle({ //範囲情報\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.5,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.2,\n        // map: map,\n        center: wakatake,\n        radius: 100\n    });\n    const utsunomiyaZooArea = new google.maps.Circle({ //範囲情報\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.5,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.2,\n        // map: map,\n        center: utsunomiyaZoo,\n        radius: 100\n    });\n    const utsunomiyaParkArea = new google.maps.Circle({ //範囲情報\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.5,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.2,\n        // map: map,\n        center: utsunomiyaPark,\n        radius: 1000\n    });\n    const matsugamineArea = new google.maps.Circle({ //範囲情報\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.5,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.2,\n        // map: map,\n        center: matsugamine,\n        radius: 100\n    });\n    const kurasseArea = new google.maps.Circle({ //範囲情報\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.5,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.2,\n        // map: map,\n        center: kurasse,\n        radius: 100\n    });\n    const utsunomiyaTowerArea = new google.maps.Circle({ //範囲情報\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.5,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.2,\n        // map: map,\n        center: utsunomiyaTower,\n        radius: 100\n    });\n    const selectCafeArea = new google.maps.Circle({ //範囲情報\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.5,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.2,\n        // map: map,\n        center: selectCafe,\n        radius: 100\n    });\n    const testArea = new google.maps.Circle({ //範囲情報\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.5,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.2,\n        // map: map,\n        center: test,\n        radius: 100\n    });\n\n\n\n    //-----------------------------------------------------------\n\n    // const [isAvailable, setAvailable] = useState(false);\n    // const [position, setPosition] = useState<{ latitude: number, longitude: number }>();\n\n    // // useEffectが実行されているかどうかを判定するために用意しています\n    // const isFirstRef = useRef(true);\n\n    /*\n     * ページ描画時にGeolocation APIが使えるかどうかをチェックしています\n     * もし使えなければその旨のエラーメッセージを表示させます\n     */\n    // useEffect(() => {\n    //     isFirstRef.current = false;\n    //     if ('geolocation' in navigator) {\n    //         setAvailable(true);\n    //     }\n    // }, [isAvailable]);\n\n    function error(error: any) {\n        var errorMessage: any = {\n            0: \"原因不明のエラーが発生しました…。\",\n            1: \"位置情報の取得が許可されませんでした…。\",\n            2: \"電波状況などで位置情報が取得できませんでした…。\",\n            3: \"位置情報の取得に時間がかかり過ぎてタイムアウトしました…。\",\n        };\n        console.log(errorMessage[error.code]);//getccurentpotion\n    }\n\n    const getCurrentPosition = () => {\n        navigator.geolocation.getCurrentPosition((position: Position) => {\n            var data = position.coords;\n            var lat = data.latitude;\n            var lng = data.longitude;\n            var latlng = new google.maps.LatLng(lat, lng);\n            // var canvas = document.getElementById('map-canvas') as Element;\n            // document.getElementById('google').innerHTML= \"String(lat)\" ;\n            // var mapOptions = {\n            //     zoom: 15,\n            //     center: latlng,\n            //     mapTypeId: google.maps.MapTypeId.ROADMAP\n            // }\n            // var map = new google.maps.Map(canvas, mapOptions);\n            // const {lati,longa} = position.coords\n            alert(lat)\n            alert(lng)\n            setPosition({ latitude: lat, longitude: lng });\n            // marker\n            var markerOptions = {\n                // map: map,\n                position: latlng,\n                draggable: true,\n                visible: true,\n            }\n            new google.maps.Marker(markerOptions);\n            //宇都宮駅\n            if (google.maps.geometry.spherical.computeDistanceBetween(latlng, utsunomiyaArea.getCenter()) <= utsunomiyaArea.getRadius()) { //領域判定\n                console.log(\"宇都宮駅範囲内\")\n                // alert(\"宇都宮駅範囲内\")\n            } else {\n                console.log(\"宇都宮駅範囲外\")\n                // alert(\"宇都宮駅範囲外\")\n            }\n            //大谷資料館\n            if (google.maps.geometry.spherical.computeDistanceBetween(latlng, oyashiryokanArea.getCenter()) <= oyashiryokanArea.getRadius()) { //領域判定\n                console.log(\"大谷資料館範囲内\")\n                // alert(\"大谷資料館範囲内\")\n            } else {\n                console.log(\"大谷資料館範囲外\")\n                // alert(\"大谷資料館範囲外\")\n            }\n            //大谷寺\n            if (google.maps.geometry.spherical.computeDistanceBetween(latlng, oyaderaArea.getCenter()) <= oyaderaArea.getRadius()) { //領域判定\n                console.log(\"大谷寺範囲内\")\n                // alert(\"大谷寺範囲内\")\n            } else {\n                console.log(\"大谷寺範囲外\")\n                // alert(\"大谷寺範囲外\")\n            }\n            //クーリ・ルージュ\n            if (google.maps.geometry.spherical.computeDistanceBetween(latlng, kurirujuArea.getCenter()) <= kurirujuArea.getRadius()) { //領域判定\n                console.log(\"クーリ・ルージュ範囲内\")\n                // alert(\"クーリ・ルージュ範囲内\")\n            } else {\n                console.log(\"クーリ・ルージュ範囲外\")\n                // alert(\"クーリ・ルージュ範囲外\")\n            }\n            //最上茶屋\n            if (google.maps.geometry.spherical.computeDistanceBetween(latlng, mogamijayaArea.getCenter()) <= mogamijayaArea.getRadius()) { //領域判定\n                console.log(\"最上茶屋範囲内\")\n                // alert(\"最上茶屋範囲内\")\n            } else {\n                console.log(\"最上茶屋範囲外\")\n                // alert(\"最上茶屋範囲外\")\n            }\n            //若竹\n            if (google.maps.geometry.spherical.computeDistanceBetween(latlng, wakatakeArea.getCenter()) <= wakatakeArea.getRadius()) { //領域判定\n                console.log(\"若竹範囲内\")\n                // alert(\"若竹範囲内\")\n            } else {\n                console.log(\"若竹範囲外\")\n                // alert(\"若竹範囲外\")\n            }\n            //動物園\n            if (google.maps.geometry.spherical.computeDistanceBetween(latlng, utsunomiyaZooArea.getCenter()) <= utsunomiyaZooArea.getRadius()) { //領域判定\n                console.log(\"動物園範囲内\")\n                // alert(\"動物園範囲内\")\n            } else {\n                console.log(\"動物園範囲外\")\n                // alert(\"動物園範囲外\")\n            }\n            //公園\n            if (google.maps.geometry.spherical.computeDistanceBetween(latlng, utsunomiyaParkArea.getCenter()) <= utsunomiyaParkArea.getRadius()) { //領域判定\n                console.log(\"公園範囲内\")\n                // alert(\"公園範囲内\")\n            } else {\n                console.log(\"公園範囲外\")\n                // alert(\"公園範囲外\")\n            }\n            //松が峰\n            if (google.maps.geometry.spherical.computeDistanceBetween(latlng, matsugamineArea.getCenter()) <= matsugamineArea.getRadius()) { //領域判定\n                console.log(\"松が峰範囲内\")\n                // alert(\"松が峰範囲内\")\n            } else {\n                console.log(\"松が峰範囲外\")\n                // alert(\"松が峰範囲外\")\n            }\n            //くらっせ\n            if (google.maps.geometry.spherical.computeDistanceBetween(latlng, kurasseArea.getCenter()) <= kurasseArea.getRadius()) { //領域判定\n                console.log(\"くらっせ範囲内\")\n                // alert(\"くらっせ範囲内\")\n            } else {\n                console.log(\"くらっせ範囲外\")\n                // alert(\"くらっせ範囲外\")\n            }\n            //宇都宮タワー\n            if (google.maps.geometry.spherical.computeDistanceBetween(latlng, utsunomiyaTowerArea.getCenter()) <= utsunomiyaTowerArea.getRadius()) { //領域判定\n                console.log(\"宇都宮タワー範囲内\")\n                // alert(\"宇都宮タワー範囲内\")\n            } else {\n                console.log(\"宇都宮タワー範囲外\")\n                // alert(\"宇都宮タワー範囲外\")\n            }\n            //SELECT\n            if (google.maps.geometry.spherical.computeDistanceBetween(latlng, selectCafeArea.getCenter()) <= selectCafeArea.getRadius()) { //領域判定\n                console.log(\"SELECT範囲内\")\n                // alert(\"SELECT範囲内\")\n            } else {\n                console.log(\"SELECT範囲外\")\n                // alert(\"SELECT範囲外\")\n            }\n            //test\n            if (google.maps.geometry.spherical.computeDistanceBetween(latlng, testArea.getCenter()) <= testArea.getRadius()) { //領域判定\n                console.log(\"test範囲内\")\n            } else {\n                console.log(\"test駅範囲外\")\n            }\n        }, failure => {\n            if (failure.message.startsWith(\"Only secure origins are allowed\")) {\n                console.log(\"secure issuess\")\n            }\n        });\n    }\n\n    //------------\n\n    return <div>\n\n        <button onClick={() => getCurrentPosition()}>チェックイン</button>\n        {/* <input id=\"google\" type=\"text\"></input> */}\n        <div>latitude:{position?.latitude}</div>\n        <div>longtitude:{position?.longitude}</div>\n        <GoogleMap\n            mapContainerStyle={mapContainerStyle}\n            zoom={15}\n            center={center}\n            options={options}\n        >\n\n            {position?.latitude && <Marker\n                position={new google.maps.LatLng(position?.latitude, position?.longitude)}//値が入っていることを保証しないとエラー\n            // icon={\"📝\"}\n            // label={\"Marker！！\"}\n            // visible={true}\n            // onLoad={onLoad}\n            />}\n            <Marker\n                position={utsunomiyaArea.getCenter()}\n            // icon={\"📝\"}\n            // label={\"Marker！！\"}\n            // visible={true}\n            // onLoad={onLoad}\n            />\n            <Circle\n                center={utsunomiyaArea.getCenter()}\n                radius={100}\n                visible={true}\n            ></Circle>\n\n            <Marker\n                position={oyashiryokanArea.getCenter()}\n            // icon={\"📝\"}\n            // label={\"Marker！！\"}\n            // visible={true}\n            // onLoad={onLoad}\n            />\n            <Circle\n                center={oyashiryokanArea.getCenter()}\n                radius={1000}\n                visible={true}\n            >\n            </Circle>\n            <Marker\n                position={oyaderaArea.getCenter()}\n            // icon={\"📝\"}\n            // label={\"Marker！！\"}\n            // visible={true}\n            // onLoad={onLoad}\n            />\n            <Circle\n                center={oyaderaArea.getCenter()}\n                radius={500}\n                visible={true}\n            >\n            </Circle>\n            <Marker\n                position={kurirujuArea.getCenter()}\n            // icon={\"📝\"}\n            // label={\"Marker！！\"}\n            // visible={true}\n            // onLoad={onLoad}\n            />\n            <Circle\n                center={kurirujuArea.getCenter()}\n                radius={100}\n                visible={true}\n            >\n            </Circle>\n            <Marker\n                position={mogamijayaArea.getCenter()}\n            // icon={\"📝\"}\n            // label={\"Marker！！\"}\n            // visible={true}\n            // onLoad={onLoad}\n            />\n            <Circle\n                center={mogamijayaArea.getCenter()}\n                radius={500}\n                visible={true}\n            >\n            </Circle>\n            <Marker\n                position={wakatakeArea.getCenter()}\n            // icon={\"📝\"}\n            // label={\"Marker！！\"}\n            // visible={true}\n            // onLoad={onLoad}\n            />\n            <Circle\n                center={wakatakeArea.getCenter()}\n                radius={100}\n                visible={true}\n            >\n            </Circle>\n            <Marker\n                position={utsunomiyaZooArea.getCenter()}\n            // icon={\"📝\"}\n            // label={\"Marker！！\"}\n            // visible={true}\n            // onLoad={onLoad}\n            />\n            <Circle\n                center={utsunomiyaZooArea.getCenter()}\n                radius={100}\n                visible={true}\n            >\n            </Circle>\n            <Marker\n                position={utsunomiyaParkArea.getCenter()}\n            // icon={\"📝\"}\n            // label={\"Marker！！\"}\n            // visible={true}\n            // onLoad={onLoad}\n            />\n            <Circle\n                center={utsunomiyaParkArea.getCenter()}\n                radius={1000}\n                visible={true}\n            >\n            </Circle>\n            <Marker\n                position={matsugamineArea.getCenter()}\n            // icon={\"📝\"}\n            // label={\"Marker！！\"}\n            // visible={true}\n            // onLoad={onLoad}\n            />\n            <Circle\n                center={matsugamineArea.getCenter()}\n                radius={100}\n                visible={true}\n            >\n            </Circle>\n            <Marker\n                position={kurasseArea.getCenter()}\n            // icon={\"📝\"}\n            // label={\"Marker！！\"}\n            // visible={true}\n            // onLoad={onLoad}\n            />\n            <Circle\n                center={kurasseArea.getCenter()}\n                radius={100}\n                visible={true}\n            >\n            </Circle>\n            <Marker\n                position={utsunomiyaTowerArea.getCenter()}\n            // icon={\"📝\"}\n            // label={\"Marker！！\"}\n            // visible={true}\n            // onLoad={onLoad}\n            />\n            <Circle\n                center={utsunomiyaTowerArea.getCenter()}\n                radius={100}\n                visible={true}\n            >\n            </Circle>\n            <Marker\n                position={selectCafeArea.getCenter()}\n            // icon={\"📝\"}\n            // label={\"Marker！！\"}\n            // visible={true}\n            // onLoad={onLoad}\n            />\n            <Circle\n                center={selectCafeArea.getCenter()}\n                radius={100}\n                visible={true}\n            >\n            </Circle>\n\n            <Circle\n                center={testArea.getCenter()}\n                radius={100}\n                visible={true}\n            >\n            </Circle>\n        </GoogleMap>\n        <BottomTab />\n    </div>\n}\n\n\n\n\n\n\n\nexport default GoogleMapAPI;"]},"metadata":{},"sourceType":"module"}