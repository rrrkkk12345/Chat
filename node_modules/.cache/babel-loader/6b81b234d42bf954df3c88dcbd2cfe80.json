{"ast":null,"code":"import { format, createLogger, transports } from 'winston';\nimport moment from 'moment';\nconst containerName = 'travel_frontend';\nconst colorizer = format.colorize({\n  colors: {\n    info: \"black\",\n    warn: 'magenta'\n  },\n  all: true\n});\nexport const logger = () => {\n  const formatter = format.printf(info => {\n    const {\n      level,\n      message,\n      timestamp\n    } = info;\n    const messageString = `[${level.toUpperCase()}] ${moment(timestamp).format('YYYY-MM-DD HH:mm:ss')} [${containerName}] ${message.replace(/[\\r\\n]/g, '')}`;\n    return colorizer.colorize(level, messageString);\n  });\n  return createLogger({\n    level: 'debug',\n    format: format.combine(format.timestamp(), format.json(), formatter),\n    defaultMeta: {\n      service: \"winston-lambda\"\n    },\n    transports: [new transports.Console()]\n  });\n};","map":{"version":3,"sources":["/Users/rei.kawasato/Desktop/travel/src/modules/logger.tsx"],"names":["format","createLogger","transports","moment","containerName","colorizer","colorize","colors","info","warn","all","logger","formatter","printf","level","message","timestamp","messageString","toUpperCase","replace","combine","json","defaultMeta","service","Console"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,YAAjB,EAA+BC,UAA/B,QAAyD,SAAzD;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,MAAMC,aAAa,GAAG,iBAAtB;AACA,MAAMC,SAAS,GAAGL,MAAM,CAACM,QAAP,CAAgB;AAAEC,EAAAA,MAAM,EAAE;AAAEC,IAAAA,IAAI,EAAE,OAAR;AAAiBC,IAAAA,IAAI,EAAE;AAAvB,GAAV;AAA6CC,EAAAA,GAAG,EAAE;AAAlD,CAAhB,CAAlB;AAEA,OAAO,MAAMC,MAAM,GAAG,MAAc;AAClC,QAAMC,SAAS,GAAGZ,MAAM,CAACa,MAAP,CAAeL,IAAD,IAAwB;AACtD,UAAM;AAACM,MAAAA,KAAD;AAAQC,MAAAA,OAAR;AAAiBC,MAAAA;AAAjB,QAA8BR,IAApC;AACA,UAAMS,aAAa,GAAI,IAAGH,KAAK,CAACI,WAAN,EAAoB,KAAIf,MAAM,CAACa,SAAD,CAAN,CAAkBhB,MAAlB,CAAyB,qBAAzB,CAAgD,KAAII,aAAc,KAAIW,OAAO,CAACI,OAAR,CAAgB,SAAhB,EAA2B,EAA3B,CAA+B,EAAvJ;AACA,WAAOd,SAAS,CAACC,QAAV,CAAmBQ,KAAnB,EAA0BG,aAA1B,CAAP;AACD,GAJiB,CAAlB;AAMA,SAAOhB,YAAY,CAAC;AAClBa,IAAAA,KAAK,EAAE,OADW;AAElBd,IAAAA,MAAM,EAACA,MAAM,CAACoB,OAAP,CACLpB,MAAM,CAACgB,SAAP,EADK,EAELhB,MAAM,CAACqB,IAAP,EAFK,EAGLT,SAHK,CAFW;AAOlBU,IAAAA,WAAW,EAAE;AAAEC,MAAAA,OAAO,EAAE;AAAX,KAPK;AAQlBrB,IAAAA,UAAU,EAAE,CAAC,IAAIA,UAAU,CAACsB,OAAf,EAAD;AARM,GAAD,CAAnB;AAUD,CAjBM","sourcesContent":["import { format, createLogger, transports, Logger } from 'winston';\nimport moment from 'moment';\n\nconst containerName = 'travel_frontend';\nconst colorizer = format.colorize({ colors: { info: \"black\", warn: 'magenta'}, all: true});\n\nexport const logger = (): Logger => {\n  const formatter = format.printf((info : any): string => {\n    const {level, message, timestamp} = info;\n    const messageString = `[${level.toUpperCase()}] ${moment(timestamp).format('YYYY-MM-DD HH:mm:ss')} [${containerName}] ${message.replace(/[\\r\\n]/g, '')}`\n    return colorizer.colorize(level, messageString)\n  });\n\n  return createLogger({\n    level: 'debug',\n    format:format.combine(\n      format.timestamp(),\n      format.json(),\n      formatter\n    ),\n    defaultMeta: { service: \"winston-lambda\" },\n    transports: [new transports.Console()],\n  });\n};\n"]},"metadata":{},"sourceType":"module"}