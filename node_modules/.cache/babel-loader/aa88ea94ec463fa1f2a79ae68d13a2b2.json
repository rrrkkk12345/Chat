{"ast":null,"code":"var _jsxFileName = \"/Users/rei.kawasato/Desktop/travel/src/utils/googleMapAPI.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { GoogleMap, useLoadScript, Marker, Circle } from \"@react-google-maps/api\";\nimport useReactRouter from 'use-react-router';\nimport { makeStyles, Button } from '@material-ui/core';\n\nconst TabChatOff = require('../assets/TabChatOff.png');\n\nconst TabMapOn = require('../assets/TabMapOn.png');\n\nconst baseFontColor = '#4575b4';\nconst useStyles = makeStyles(theme => ({\n  bottomTab: {\n    position: \"fixed\",\n    bottom: \"0\",\n    height: \"10%\",\n    width: \"100%\",\n    backgroundColor: \"#eeedea\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    textAlign: \"center\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  bottomChat: {\n    // border: \"2px solid\",\n    // borderColor: \"pink\",\n    flex: 1\n  },\n  bottomMap: {\n    // border: \"2px solid\",\n    // borderColor: \"pink\",\n    flex: 1\n  },\n  mapWrapper: {\n    width: \"100%\",\n    hight: \"100%\",\n    position: \"fixed\" // borderRadius: \"50%\",\n    // backgroundColor: \"blue\",\n    // zIndex:100,\n    // marginLeft: \"40%\",\n    // fontFamily: 'メイリオ',\n    // cursor: \"pointer\",\n\n  },\n  checkIn: {\n    position: \"fixed\",\n    bottom: \"15%\",\n    left: \"35%\",\n    color: '#ffffff',\n    backgroundColor: baseFontColor\n  }\n}));\nconst mapContainerStyle = {\n  width: \"100vw\",\n  height: \"100vh\"\n};\nconst options = {\n  disableDefaultUI: true,\n  zoomControl: true\n};\n\nconst BottomTab = () => {\n  const {\n    history\n  } = useReactRouter();\n  const classes = useStyles();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.bottomTab,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.bottomChat,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: TabChatOff,\n    onClick: () => history.push(\"/chat\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }\n  }, \"\\u30C1\\u30E3\\u30C3\\u30C8\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.bottomMap,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: TabMapOn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }\n  }, \"\\u30DE\\u30C3\\u30D7\")));\n};\n\nconst libraries = [\"places\", \"geometry\"];\n\nconst GoogleMapAPI = props => {\n  const [centerLat, setCenterLat] = useState(35.681215917748915);\n  const [centerLng, setCenterLng] = useState(139.76707964692983);\n  const center = {\n    lat: centerLat,\n    lng: centerLng\n  };\n  const [tokyoShow, setTokyoShow] = useState(false);\n  const [oyaShow, setOyaShow] = useState(false);\n  const [oyaderaShow, setOyaderaShow] = useState(false);\n  const [kurirujuShow, setKurirujuShow] = useState(false);\n  const [mogamijayaShow, setMogamijayaShow] = useState(false);\n  const [utsunomiyaZooShow, setUtsunomiyaZooShow] = useState(false);\n  const [wakatakeShow, setWakatakeShow] = useState(false);\n  const [utsunomiyaParkShow, setUtsunomiyaParkShow] = useState(false);\n  const [kurasseShow, setKurasseShow] = useState(false);\n  const [utsunomiyaTowerShow, setUtsunomiyaTowerShow] = useState(false);\n  const [selectCafeShow, setSelectCafeShow] = useState(false);\n  const [futarayamaShow, setFutarayamaShow] = useState(false);\n  const classes = useStyles();\n  useEffect(() => {\n    const jwt = JSON.parse(localStorage.getItem('jwt'));\n    const {\n      Authorization,\n      Accesstoken\n    } = jwt; // const scenarioHist: Array<{ nextSentenceId: string, personName: string, plane: string }> = JSON.parse(localStorage.getItem('scenarioHist') as string)\n\n    const scenarioHistString = localStorage.getItem('scenarioHist'); // const scenarioHist: string<{ nextSentenceId: string, personName: string, plane: string }> = localStorage.getItem('scenarioHist')\n    // const { personName, plane } = scenarioHist\n\n    console.log(scenarioHistString);\n\n    if (scenarioHistString) {\n      console.log(\"Localstorage\");\n      const scenarioHist = JSON.parse(scenarioHistString);\n\n      if (scenarioHist.length > 0) {\n        if (scenarioHist.slice(-1)[0].nextSentenceId === \"5\") {\n          setTokyoShow(true);\n          setCenterLat(35.681215917748915);\n          setCenterLng(139.76707964692983);\n        }\n\n        if (scenarioHist.slice(-1)[0].nextSentenceId === \"68\") {\n          setOyaShow(true);\n          setCenterLat(36.5999734);\n          setCenterLng(139.824739);\n        }\n\n        if (scenarioHist.slice(-1)[0].nextSentenceId === \"125\") {\n          setKurirujuShow(true);\n          setCenterLat(36.631208);\n          setCenterLng(139.827650);\n        }\n\n        if (scenarioHist.slice(-1)[0].nextSentenceId === \"165\") {\n          setWakatakeShow(true);\n          setCenterLat(36.6162505);\n          setCenterLng(139.8501882);\n        }\n\n        if (scenarioHist.slice(-1)[0].nextSentenceId === \"216\") {\n          setFutarayamaShow(true);\n          setCenterLat(36.5621935);\n          setCenterLng(139.8858675);\n        }\n\n        if (scenarioHist.slice(-1)[0].nextSentenceId === \"308\") {\n          setUtsunomiyaTowerShow(true);\n          setCenterLat(36.5715866);\n          setCenterLng(139.8876343);\n        }\n\n        if (scenarioHist.slice(-1)[0].nextSentenceId === \"410\") {\n          setUtsunomiyaZooShow(true);\n          setCenterLat(36.6328899);\n          setCenterLng(139.8532834);\n        }\n\n        if (scenarioHist.slice(-1)[0].nextSentenceId === \"464\") {\n          setKurasseShow(true);\n          setCenterLat(36.5611947);\n          setCenterLng(139.8854799);\n        }\n\n        if (scenarioHist.slice(-1)[0].nextSentenceId === \"546\") {\n          setSelectCafeShow(true);\n          setCenterLat(36.559957);\n          setCenterLng(139.9022182);\n        }\n\n        if (scenarioHist.slice(-1)[0].nextSentenceId === \"625\") {\n          setMogamijayaShow(true);\n          setCenterLat(36.617913);\n          setCenterLng(139.820958);\n        }\n\n        if (scenarioHist.slice(-1)[0].nextSentenceId === \"672\") {\n          setUtsunomiyaParkShow(true);\n          setCenterLat(36.61892);\n          setCenterLng(139.7901353);\n        }\n\n        if (scenarioHist.slice(-1)[0].nextSentenceId === \"730\") {\n          setOyaderaShow(true);\n          setCenterLat(36.5962531);\n          setCenterLng(139.8206917);\n        }\n      }\n    } else {\n      console.log(\"DB\"); //id削除\n\n      fetch(\"https://jtb-prd.two-choices.jp/api/scenario/log/\", {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': Authorization,\n          'accesstoken': Accesstoken\n        }\n      }).then(res => res.json()).then(data => {\n        if (data.scenarioHistory.length <= 0) {\n          localStorage.setItem('scenarioHist', JSON.stringify([]));\n          return;\n        }\n\n        const localHistory = localStorage.setItem('scenarioHist', JSON.stringify(data.ScenarioHistory));\n        const scenarioGet = JSON.parse(localStorage.getItem('scenarioHist'));\n        console.log(scenarioGet);\n      });\n    }\n  }, []);\n  const [position, setPosition] = useState(); //-----------------------------------------------------------\n\n  const googleMapsApiKey = process.env.REACT_APP_GOOGLE_MAPS_API_KEY;\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey,\n    libraries: libraries\n  });\n  if (loadError) return /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 27\n    }\n  }, \"\\\"Error loading maps\\\"\"); //returnあとにusestate入れるとだめ\n\n  if (!isLoaded) return /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 27\n    }\n  }, \"Loading maps\"); //-----------------------------------------------------------\n  //-----------------------------------------------------------\n  // const utsunomiya = new google.maps.LatLng(36.559707, 139.898472) //宇都宮駅\n  // const utsunomiya = new google.maps.LatLng(35.75098387956675, 139.7615640423288) //小台\n\n  const utsunomiya = new google.maps.LatLng(36.2048239999999995, 138.252924); //PC\n\n  const tokyo = new google.maps.LatLng(35.681215917748915, 139.76707964692983); //東京駅\n\n  const oyashiryokan = new google.maps.LatLng(36.5999734, 139.824739); //大谷資料館\n\n  const oyadera = new google.maps.LatLng(36.5962531, 139.8206917); //大谷寺\n\n  const kuriruju = new google.maps.LatLng(36.631208, 139.827650); //クーリ・ルージュ\n\n  const mogamijaya = new google.maps.LatLng(36.617913, 139.820958); //最上茶屋\n\n  const wakatake = new google.maps.LatLng(36.616712, 139.849803); //若竹の社\n\n  const futarayama = new google.maps.LatLng(36.5621935, 139.8858675); //二荒山\n\n  const utsunomiyaZoo = new google.maps.LatLng(36.632781, 139.853577); //宇都宮動物園\n\n  const utsunomiyaPark = new google.maps.LatLng(36.61892, 139.7901353); //宇都宮森林公園\n\n  const kurasse = new google.maps.LatLng(36.5611947, 139.8854799); //来らっせ\n\n  const utsunomiyaTower = new google.maps.LatLng(36.5715866, 139.8876343); //宇都宮タワー\n\n  const selectCafe = new google.maps.LatLng(36.559957, 139.9022182); //SELECT\n\n  const test = new google.maps.LatLng(36.204823999, 138.272924); //テスト\n  //-----------------------------------------------------------\n  // const res = google.maps.geometry.spherical.computeDistanceBetween(oyasiryokan, utsunomiya) \n  // console.log(res)\n\n  const tokyoArea = new google.maps.Circle({\n    //範囲情報\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.5,\n    strokeWeight: 2,\n    fillColor: '#FF0000',\n    fillOpacity: 0.2,\n    // map: map,\n    center: tokyo,\n    radius: 500\n  }); // const utsunomiyaArea = new google.maps.Circle({ //範囲情報\n  //     strokeColor: '#FF0000',\n  //     strokeOpacity: 0.5,\n  //     strokeWeight: 2,\n  //     fillColor: '#FF0000',\n  //     fillOpacity: 0.2,\n  //     // map: map,\n  //     center: utsunomiya,\n  //     radius: 100\n  // });\n\n  const oyashiryokanArea = new google.maps.Circle({\n    //範囲情報\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.5,\n    strokeWeight: 2,\n    fillColor: '#FF0000',\n    fillOpacity: 0.2,\n    // map: map,\n    center: oyashiryokan,\n    radius: 1000\n  });\n  const oyaderaArea = new google.maps.Circle({\n    //範囲情報\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.5,\n    strokeWeight: 2,\n    fillColor: '#FF0000',\n    fillOpacity: 0.2,\n    // map: map,\n    center: oyadera,\n    radius: 500\n  });\n  const kurirujuArea = new google.maps.Circle({\n    //範囲情報\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.5,\n    strokeWeight: 2,\n    fillColor: '#FF0000',\n    fillOpacity: 0.2,\n    // map: map,\n    center: kuriruju,\n    radius: 500\n  });\n  const mogamijayaArea = new google.maps.Circle({\n    //範囲情報\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.5,\n    strokeWeight: 2,\n    fillColor: '#FF0000',\n    fillOpacity: 0.2,\n    // map: map,\n    center: mogamijaya,\n    radius: 350\n  });\n  const wakatakeArea = new google.maps.Circle({\n    //範囲情報\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.5,\n    strokeWeight: 2,\n    fillColor: '#FF0000',\n    fillOpacity: 0.2,\n    // map: map,\n    center: wakatake,\n    radius: 500\n  });\n  const utsunomiyaZooArea = new google.maps.Circle({\n    //範囲情報\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.5,\n    strokeWeight: 2,\n    fillColor: '#FF0000',\n    fillOpacity: 0.2,\n    // map: map,\n    center: utsunomiyaZoo,\n    radius: 300\n  });\n  const utsunomiyaParkArea = new google.maps.Circle({\n    //範囲情報\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.5,\n    strokeWeight: 2,\n    fillColor: '#FF0000',\n    fillOpacity: 0.2,\n    // map: map,\n    center: utsunomiyaPark,\n    radius: 1000\n  });\n  const kurasseArea = new google.maps.Circle({\n    //範囲情報\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.5,\n    strokeWeight: 2,\n    fillColor: '#FF0000',\n    fillOpacity: 0.2,\n    // map: map,\n    center: kurasse,\n    radius: 350\n  });\n  const utsunomiyaTowerArea = new google.maps.Circle({\n    //範囲情報\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.5,\n    strokeWeight: 2,\n    fillColor: '#FF0000',\n    fillOpacity: 0.2,\n    // map: map,\n    center: utsunomiyaTower,\n    radius: 500\n  });\n  const selectCafeArea = new google.maps.Circle({\n    //範囲情報\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.5,\n    strokeWeight: 2,\n    fillColor: '#FF0000',\n    fillOpacity: 0.2,\n    // map: map,\n    center: selectCafe,\n    radius: 300\n  });\n  const futarayamaArea = new google.maps.Circle({\n    //範囲情報\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.5,\n    strokeWeight: 2,\n    fillColor: '#FF0000',\n    fillOpacity: 0.2,\n    // map: map,\n    center: futarayama,\n    radius: 500\n  });\n  const testArea = new google.maps.Circle({\n    //範囲情報\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.5,\n    strokeWeight: 2,\n    fillColor: '#FF0000',\n    fillOpacity: 0.2,\n    // map: map,\n    center: test,\n    radius: 100\n  }); //-----------------------------------------------------------\n\n  function error(error) {\n    var errorMessage = {\n      0: \"原因不明のエラーが発生しました…。\",\n      1: \"位置情報の取得が許可されませんでした…。\",\n      2: \"電波状況などで位置情報が取得できませんでした…。\",\n      3: \"位置情報の取得に時間がかかり過ぎてタイムアウトしました…。\"\n    };\n    console.log(errorMessage[error.code]); //getccurentpotion\n  }\n\n  const getCurrentPosition = () => {\n    navigator.geolocation.getCurrentPosition(position => {\n      var data = position.coords;\n      var lat = data.latitude;\n      var lng = data.longitude;\n      var latlng = new google.maps.LatLng(lat, lng);\n      setPosition({\n        latitude: lat,\n        longitude: lng\n      });\n      setCenterLat(lat);\n      setCenterLng(lng);\n      var markerOptions = {\n        // map: map,\n        position: latlng,\n        draggable: true,\n        visible: true\n      };\n      new google.maps.Marker(markerOptions);\n\n      if (tokyoShow === true) {\n        console.log(\"tokyo\"); //東京駅\n\n        if (google.maps.geometry.spherical.computeDistanceBetween(latlng, tokyoArea.getCenter()) <= tokyoArea.getRadius()) {\n          //領域判定\n          console.log(\"東京駅範囲内\");\n          const jwt = JSON.parse(localStorage.getItem('jwt'));\n          const {\n            Authorization,\n            Accesstoken\n          } = jwt;\n          const scenarioHist = JSON.parse(localStorage.getItem('scenarioHist'));\n          console.log(\"Localstorage\");\n          const tmpArray = JSON.parse(localStorage.getItem('scenarioHist'));\n          console.log(\"tmpArray:\", tmpArray);\n          tmpArray.push({\n            nextSentenceId: \"6\",\n            personName: \"ナレーター\",\n            plane: \"チェックインできました。\"\n          }); // localStorage.setItem('scenarioHist', JSON.stringify({ personName: scenario.personName, plane: scenario.sentence.plane, nextSentenceId: scenario.nextSentenceId }))\n\n          localStorage.setItem('scenarioHist', JSON.stringify(tmpArray));\n          console.log(\"DB\"); //ログから会話履歴をもってくる\n\n          fetch(\"https://jtb-prd.two-choices.jp/api/scenario/log/\", {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': Authorization,\n              'accesstoken': Accesstoken\n            },\n            // body: JSON.stringify({ scenario: { personName: scenario.personName, plane: scenario.sentence.plane, nextSentenceId: scenario.nextSentenceId } })\n            body: JSON.stringify({\n              scenario: {\n                nextSentenceId: \"6\",\n                personName: \"ナレーター\",\n                plane: \"チェックインできました。\"\n              }\n            })\n          });\n          window.alert(\"チェックインできました。チャット画面に戻ってシナリオを進めてください。\");\n        } else {\n          console.log(\"東京駅範囲外\");\n        }\n      }\n\n      if (oyaShow === true) {\n        //大谷資料館\n        if (google.maps.geometry.spherical.computeDistanceBetween(latlng, oyashiryokanArea.getCenter()) <= oyashiryokanArea.getRadius()) {\n          //領域判定\n          console.log(\"大谷資料館範囲内\");\n          const jwt = JSON.parse(localStorage.getItem('jwt'));\n          const {\n            Authorization,\n            Accesstoken\n          } = jwt;\n          const scenarioHist = JSON.parse(localStorage.getItem('scenarioHist'));\n          console.log(\"Localstorage\");\n          const tmpArray = JSON.parse(localStorage.getItem('scenarioHist'));\n          console.log(\"tmpArray:\", tmpArray);\n          tmpArray.push({\n            nextSentenceId: \"69\",\n            personName: \"ナレーター\",\n            plane: \"チェックインできました。\"\n          }); // localStorage.setItem('scenarioHist', JSON.stringify({ personName: scenario.personName, plane: scenario.sentence.plane, nextSentenceId: scenario.nextSentenceId }))\n\n          localStorage.setItem('scenarioHist', JSON.stringify(tmpArray));\n          console.log(\"DB\"); //ログから会話履歴をもってくる\n\n          fetch(\"https://jtb-prd.two-choices.jp/api/scenario/log/\", {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': Authorization,\n              'accesstoken': Accesstoken\n            },\n            // body: JSON.stringify({ scenario: { personName: scenario.personName, plane: scenario.sentence.plane, nextSentenceId: scenario.nextSentenceId } })\n            body: JSON.stringify({\n              scenario: {\n                nextSentenceId: \"69\",\n                personName: \"ナレーター\",\n                plane: \"チェックインできました。\"\n              }\n            })\n          });\n          window.alert(\"チェックインできました。チャット画面に戻ってシナリオを進めてください。\"); // alert(\"大谷資料館範囲内\")\n        } else {\n          console.log(\"大谷資料館範囲外\");\n          window.alert(\"チェックインできませんでした。目的地付近に近づいて再度チェックインしてください\"); // alert(\"大谷資料館範囲外\")\n        }\n      }\n\n      if (oyaderaShow === true) {\n        //大谷寺\n        if (google.maps.geometry.spherical.computeDistanceBetween(latlng, oyaderaArea.getCenter()) <= oyaderaArea.getRadius()) {\n          //領域判定\n          console.log(\"二荒山範囲内\");\n          const jwt = JSON.parse(localStorage.getItem('jwt'));\n          const {\n            Authorization,\n            Accesstoken\n          } = jwt;\n          const scenarioHist = JSON.parse(localStorage.getItem('scenarioHist'));\n          console.log(\"Localstorage\");\n          const tmpArray = JSON.parse(localStorage.getItem('scenarioHist'));\n          console.log(\"tmpArray:\", tmpArray);\n          tmpArray.push({\n            nextSentenceId: \"731\",\n            personName: \"ナレーター\",\n            plane: \"チェックインできました。\"\n          });\n          localStorage.setItem('scenarioHist', JSON.stringify(tmpArray));\n          console.log(\"DB\"); //ログから会話履歴をもってくる\n\n          fetch(\"https://jtb-prd.two-choices.jp/api/scenario/log/\", {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': Authorization,\n              'accesstoken': Accesstoken\n            },\n            body: JSON.stringify({\n              scenario: {\n                nextSentenceId: \"731\",\n                personName: \"ナレーター\",\n                plane: \"チェックインできました。\"\n              }\n            })\n          });\n          window.alert(\"チェックインできました。チャット画面に戻ってシナリオを進めてください。\"); // alert(\"大谷寺範囲内\")\n        } else {\n          console.log(\"大谷寺範囲外\");\n          window.alert(\"チェックインできませんでした。再度チェックインしてください。\"); // alert(\"大谷寺範囲外\")\n        }\n      }\n\n      if (futarayamaShow === true) {\n        //二荒山神社\n        if (google.maps.geometry.spherical.computeDistanceBetween(latlng, futarayamaArea.getCenter()) <= futarayamaArea.getRadius()) {\n          //領域判定\n          console.log(\"二荒山範囲内\");\n          const jwt = JSON.parse(localStorage.getItem('jwt'));\n          const {\n            Authorization,\n            Accesstoken\n          } = jwt;\n          const scenarioHist = JSON.parse(localStorage.getItem('scenarioHist'));\n          console.log(\"Localstorage\");\n          const tmpArray = JSON.parse(localStorage.getItem('scenarioHist'));\n          console.log(\"tmpArray:\", tmpArray);\n          tmpArray.push({\n            nextSentenceId: \"217\",\n            personName: \"ナレーター\",\n            plane: \"チェックインできました。\"\n          });\n          localStorage.setItem('scenarioHist', JSON.stringify(tmpArray));\n          console.log(\"DB\"); //ログから会話履歴をもってくる\n\n          fetch(\"https://jtb-prd.two-choices.jp/api/scenario/log/\", {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': Authorization,\n              'accesstoken': Accesstoken\n            },\n            body: JSON.stringify({\n              scenario: {\n                nextSentenceId: \"217\",\n                personName: \"ナレーター\",\n                plane: \"チェックインできました。\"\n              }\n            })\n          });\n          window.alert(\"チェックインできました。チャット画面に戻ってシナリオを進めてください。\");\n        } else {\n          console.log(\"二荒山範囲外\");\n          window.alert(\"チェックインできませんでした。再度チェックインしてください。\");\n        }\n      }\n\n      if (kurirujuShow === true) {\n        //クーリ・ルージュ\n        if (google.maps.geometry.spherical.computeDistanceBetween(latlng, kurirujuArea.getCenter()) <= kurirujuArea.getRadius()) {\n          //領域判定\n          console.log(\"クーリ・ルージュ範囲内\");\n          const jwt = JSON.parse(localStorage.getItem('jwt'));\n          const {\n            Authorization,\n            Accesstoken\n          } = jwt;\n          const scenarioHist = JSON.parse(localStorage.getItem('scenarioHist'));\n          console.log(\"Localstorage\");\n          const tmpArray = JSON.parse(localStorage.getItem('scenarioHist'));\n          console.log(\"tmpArray:\", tmpArray);\n          tmpArray.push({\n            nextSentenceId: \"126\",\n            personName: \"ナレーター\",\n            plane: \"チェックインできました。\"\n          }); // localStorage.setItem('scenarioHist', JSON.stringify({ personName: scenario.personName, plane: scenario.sentence.plane, nextSentenceId: scenario.nextSentenceId }))\n\n          localStorage.setItem('scenarioHist', JSON.stringify(tmpArray));\n          console.log(\"DB\"); //ログから会話履歴をもってくる\n\n          fetch(\"https://jtb-prd.two-choices.jp/api/scenario/log/\", {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': Authorization,\n              'accesstoken': Accesstoken\n            },\n            // body: JSON.stringify({ scenario: { personName: scenario.personName, plane: scenario.sentence.plane, nextSentenceId: scenario.nextSentenceId } })\n            body: JSON.stringify({\n              scenario: {\n                nextSentenceId: \"126\",\n                personName: \"ナレーター\",\n                plane: \"チェックインできました。入店してシナリオを進めましょう\"\n              }\n            })\n          });\n          window.alert(\"チェックインできました。チャット画面に戻ってシナリオを進めてください。\"); // alert(\"クーリ・ルージュ範囲内\")\n        } else {\n          console.log(\"クーリ・ルージュ範囲外\");\n          window.alert(\"チェックインできませんでした。再度チェックインしてください。\"); // alert(\"クーリ・ルージュ範囲外\")\n        }\n      }\n\n      if (mogamijayaShow === true) {\n        //最上茶屋\n        if (google.maps.geometry.spherical.computeDistanceBetween(latlng, mogamijayaArea.getCenter()) <= mogamijayaArea.getRadius()) {\n          //領域判定\n          const jwt = JSON.parse(localStorage.getItem('jwt'));\n          const {\n            Authorization,\n            Accesstoken\n          } = jwt;\n          const scenarioHist = JSON.parse(localStorage.getItem('scenarioHist'));\n          console.log(\"Localstorage\");\n          const tmpArray = JSON.parse(localStorage.getItem('scenarioHist'));\n          console.log(\"tmpArray:\", tmpArray);\n          tmpArray.push({\n            nextSentenceId: \"626\",\n            personName: \"ナレーター\",\n            plane: \"チェックインできました。\"\n          }); // localStorage.setItem('scenarioHist', JSON.stringify({ personName: scenario.personName, plane: scenario.sentence.plane, nextSentenceId: scenario.nextSentenceId }))\n\n          localStorage.setItem('scenarioHist', JSON.stringify(tmpArray));\n          console.log(\"DB\"); //ログから会話履歴をもってくる\n\n          fetch(\"https://jtb-prd.two-choices.jp/api/scenario/log/\", {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': Authorization,\n              'accesstoken': Accesstoken\n            },\n            // body: JSON.stringify({ scenario: { personName: scenario.personName, plane: scenario.sentence.plane, nextSentenceId: scenario.nextSentenceId } })\n            body: JSON.stringify({\n              scenario: {\n                nextSentenceId: \"626\",\n                personName: \"ナレーター\",\n                plane: \"チェックインできました。入店してシナリオを進めましょう\"\n              }\n            })\n          });\n          window.alert(\"チェックインできました。チャット画面に戻ってシナリオを進めてください。\"); // alert(\"最上茶屋範囲内\")\n        } else {\n          console.log(\"最上茶屋範囲外\");\n          window.alert(\"チェックインできませんでした。再度チェックインしてください。\"); // alert(\"最上茶屋範囲外\")\n        }\n      }\n\n      if (wakatakeShow === true) {\n        //若竹\n        if (google.maps.geometry.spherical.computeDistanceBetween(latlng, wakatakeArea.getCenter()) <= wakatakeArea.getRadius()) {\n          //領域判定\n          console.log(\"若竹範囲内\");\n          const jwt = JSON.parse(localStorage.getItem('jwt'));\n          const {\n            Authorization,\n            Accesstoken\n          } = jwt;\n          const scenarioHist = JSON.parse(localStorage.getItem('scenarioHist'));\n          console.log(\"Localstorage\");\n          const tmpArray = JSON.parse(localStorage.getItem('scenarioHist'));\n          console.log(\"tmpArray:\", tmpArray);\n          tmpArray.push({\n            nextSentenceId: \"166\",\n            personName: \"ナレーター\",\n            plane: \"チェックインできました。\"\n          }); // localStorage.setItem('scenarioHist', JSON.stringify({ personName: scenario.personName, plane: scenario.sentence.plane, nextSentenceId: scenario.nextSentenceId }))\n\n          localStorage.setItem('scenarioHist', JSON.stringify(tmpArray));\n          console.log(\"DB\"); //ログから会話履歴をもってくる\n\n          fetch(\"https://jtb-prd.two-choices.jp/api/scenario/log/\", {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': Authorization,\n              'accesstoken': Accesstoken\n            },\n            // body: JSON.stringify({ scenario: { personName: scenario.personName, plane: scenario.sentence.plane, nextSentenceId: scenario.nextSentenceId } })\n            body: JSON.stringify({\n              scenario: {\n                nextSentenceId: \"166\",\n                personName: \"ナレーター\",\n                plane: \"チェックインできました。\"\n              }\n            })\n          });\n          window.alert(\"チェックインできました。チャット画面に戻ってシナリオを進めてください。\"); // alert(\"大谷資料館範囲内\")\n        } else {\n          console.log(\"若竹範囲外\");\n          window.alert(\"チェックインできませんでした。再度チェックインしてください。\"); // alert(\"若竹範囲外\")\n        }\n      }\n\n      if (utsunomiyaParkShow === true) {\n        //動物園\n        if (google.maps.geometry.spherical.computeDistanceBetween(latlng, utsunomiyaZooArea.getCenter()) <= utsunomiyaZooArea.getRadius()) {\n          //領域判定\n          const jwt = JSON.parse(localStorage.getItem('jwt'));\n          const {\n            Authorization,\n            Accesstoken\n          } = jwt;\n          const scenarioHist = JSON.parse(localStorage.getItem('scenarioHist'));\n          console.log(\"Localstorage\");\n          const tmpArray = JSON.parse(localStorage.getItem('scenarioHist'));\n          console.log(\"tmpArray:\", tmpArray);\n          tmpArray.push({\n            nextSentenceId: \"673\",\n            personName: \"ナレーター\",\n            plane: \"チェックインできました。\"\n          }); // localStorage.setItem('scenarioHist', JSON.stringify({ personName: scenario.personName, plane: scenario.sentence.plane, nextSentenceId: scenario.nextSentenceId }))\n\n          localStorage.setItem('scenarioHist', JSON.stringify(tmpArray));\n          console.log(\"DB\"); //ログから会話履歴をもってくる\n\n          fetch(\"https://jtb-prd.two-choices.jp/api/scenario/log/\", {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': Authorization,\n              'accesstoken': Accesstoken\n            },\n            // body: JSON.stringify({ scenario: { personName: scenario.personName, plane: scenario.sentence.plane, nextSentenceId: scenario.nextSentenceId } })\n            body: JSON.stringify({\n              scenario: {\n                nextSentenceId: \"673\",\n                personName: \"ナレーター\",\n                plane: \"チェックインできました。シナリオを進めてください\"\n              }\n            })\n          });\n          window.alert(\"チェックインできました。チャット画面に戻ってシナリオを進めてください。\"); // alert(\"動物園範囲内\")\n        } else {\n          console.log(\"動物園範囲外\");\n          window.alert(\"チェックインできませんでした。再度チェックインしてください。\"); // alert(\"動物園範囲外\")\n        }\n      }\n\n      if (utsunomiyaZooShow === true) {\n        //公園\n        if (google.maps.geometry.spherical.computeDistanceBetween(latlng, utsunomiyaParkArea.getCenter()) <= utsunomiyaParkArea.getRadius()) {\n          //領域判定\n          const jwt = JSON.parse(localStorage.getItem('jwt'));\n          const {\n            Authorization,\n            Accesstoken\n          } = jwt;\n          const scenarioHist = JSON.parse(localStorage.getItem('scenarioHist'));\n          console.log(\"Localstorage\");\n          const tmpArray = JSON.parse(localStorage.getItem('scenarioHist'));\n          console.log(\"tmpArray:\", tmpArray);\n          tmpArray.push({\n            nextSentenceId: \"411\",\n            personName: \"ナレーター\",\n            plane: \"チェックインできました。\"\n          }); // localStorage.setItem('scenarioHist', JSON.stringify({ personName: scenario.personName, plane: scenario.sentence.plane, nextSentenceId: scenario.nextSentenceId }))\n\n          localStorage.setItem('scenarioHist', JSON.stringify(tmpArray));\n          console.log(\"DB\"); //ログから会話履歴をもってくる\n\n          fetch(\"https://jtb-prd.two-choices.jp/api/scenario/log/\", {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': Authorization,\n              'accesstoken': Accesstoken\n            },\n            // body: JSON.stringify({ scenario: { personName: scenario.personName, plane: scenario.sentence.plane, nextSentenceId: scenario.nextSentenceId } })\n            body: JSON.stringify({\n              scenario: {\n                nextSentenceId: \"411\",\n                personName: \"ナレーター\",\n                plane: \"チェックインできました。\"\n              }\n            })\n          });\n          window.alert(\"チェックインできました。チャット画面に戻ってシナリオを進めてください。\"); // alert(\"公園範囲内\")\n        } else {\n          console.log(\"公園範囲外\");\n          window.alert(\"チェックインできませんでした。再度チェックインしてください。\"); // alert(\"公園範囲外\")\n        }\n      }\n\n      if (kurasseShow === true) {\n        //くらっせ\n        if (google.maps.geometry.spherical.computeDistanceBetween(latlng, kurasseArea.getCenter()) <= kurasseArea.getRadius()) {\n          //領域判定\n          const jwt = JSON.parse(localStorage.getItem('jwt'));\n          const {\n            Authorization,\n            Accesstoken\n          } = jwt;\n          const scenarioHist = JSON.parse(localStorage.getItem('scenarioHist'));\n          console.log(\"Localstorage\");\n          const tmpArray = JSON.parse(localStorage.getItem('scenarioHist'));\n          console.log(\"tmpArray:\", tmpArray);\n          tmpArray.push({\n            nextSentenceId: \"465\",\n            personName: \"ナレーター\",\n            plane: \"チェックインできました。\"\n          }); // localStorage.setItem('scenarioHist', JSON.stringify({ personName: scenario.personName, plane: scenario.sentence.plane, nextSentenceId: scenario.nextSentenceId }))\n\n          localStorage.setItem('scenarioHist', JSON.stringify(tmpArray));\n          console.log(\"DB\"); //ログから会話履歴をもってくる\n\n          fetch(\"https://jtb-prd.two-choices.jp/api/scenario/log/\", {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': Authorization,\n              'accesstoken': Accesstoken\n            },\n            // body: JSON.stringify({ scenario: { personName: scenario.personName, plane: scenario.sentence.plane, nextSentenceId: scenario.nextSentenceId } })\n            body: JSON.stringify({\n              scenario: {\n                nextSentenceId: \"465\",\n                personName: \"ナレーター\",\n                plane: \"チェックインできました。\"\n              }\n            })\n          });\n          window.alert(\"チェックインできました。チャット画面に戻ってシナリオを進めてください。\"); // alert(\"くらっせ範囲内\")\n        } else {\n          console.log(\"くらっせ範囲外\");\n          window.alert(\"チェックインできませんでした。再度チェックインしてください。\"); // alert(\"くらっせ範囲外\")\n        }\n      }\n\n      if (utsunomiyaTowerShow === true) {\n        //宇都宮タワー\n        if (google.maps.geometry.spherical.computeDistanceBetween(latlng, utsunomiyaTowerArea.getCenter()) <= utsunomiyaTowerArea.getRadius()) {\n          //領域判定\n          const jwt = JSON.parse(localStorage.getItem('jwt'));\n          const {\n            Authorization,\n            Accesstoken\n          } = jwt;\n          const scenarioHist = JSON.parse(localStorage.getItem('scenarioHist'));\n          console.log(\"Localstorage\");\n          const tmpArray = JSON.parse(localStorage.getItem('scenarioHist'));\n          console.log(\"tmpArray:\", tmpArray);\n          tmpArray.push({\n            nextSentenceId: \"309\",\n            personName: \"ナレーター\",\n            plane: \"チェックインできました。\"\n          }); // localStorage.setItem('scenarioHist', JSON.stringify({ personName: scenario.personName, plane: scenario.sentence.plane, nextSentenceId: scenario.nextSentenceId }))\n\n          localStorage.setItem('scenarioHist', JSON.stringify(tmpArray));\n          console.log(\"DB\"); //ログから会話履歴をもってくる\n\n          fetch(\"https://jtb-prd.two-choices.jp/api/scenario/log/\", {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': Authorization,\n              'accesstoken': Accesstoken\n            },\n            // body: JSON.stringify({ scenario: { personName: scenario.personName, plane: scenario.sentence.plane, nextSentenceId: scenario.nextSentenceId } })\n            body: JSON.stringify({\n              scenario: {\n                nextSentenceId: \"309\",\n                personName: \"ナレーター\",\n                plane: \"チェックインできました。\"\n              }\n            })\n          });\n          window.alert(\"チェックインできました。チャット画面に戻ってシナリオを進めてください。\"); // alert(\"大谷資料館範囲内\")\n        } else {\n          console.log(\"宇都宮タワー範囲外\");\n          window.alert(\"チェックインできませんでした。再度チェックインしてください。\"); // alert(\"宇都宮タワー範囲外\")\n        }\n      }\n\n      if (selectCafeShow === true) {\n        //SELECT\n        if (google.maps.geometry.spherical.computeDistanceBetween(latlng, selectCafeArea.getCenter()) <= selectCafeArea.getRadius()) {\n          //領域判定\n          const jwt = JSON.parse(localStorage.getItem('jwt'));\n          const {\n            Authorization,\n            Accesstoken\n          } = jwt;\n          const scenarioHist = JSON.parse(localStorage.getItem('scenarioHist'));\n          console.log(\"Localstorage\");\n          const tmpArray = JSON.parse(localStorage.getItem('scenarioHist'));\n          console.log(\"tmpArray:\", tmpArray);\n          tmpArray.push({\n            nextSentenceId: \"547\",\n            personName: \"ナレーター\",\n            plane: \"チェックインできました。\"\n          });\n          localStorage.setItem('scenarioHist', JSON.stringify(tmpArray));\n          console.log(\"DB\"); //ログから会話履歴をもってくる\n\n          fetch(\"https://jtb-prd.two-choices.jp/api/scenario/log/\", {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n              'Authorization': Authorization,\n              'accesstoken': Accesstoken\n            },\n            body: JSON.stringify({\n              scenario: {\n                nextSentenceId: \"547\",\n                personName: \"ナレーター\",\n                plane: \"チェックインできました。\"\n              }\n            })\n          });\n          window.alert(\"チェックインできました。チャット画面に戻ってシナリオを進めてください。\"); // alert(\"SELECT範囲内\")\n        } else {\n          console.log(\"SELECT範囲外\");\n          window.alert(\"チェックインできませんでした。再度チェックインしてください。\"); // alert(\"SELECT範囲外\")\n        }\n      } //test\n\n\n      if (google.maps.geometry.spherical.computeDistanceBetween(latlng, testArea.getCenter()) <= testArea.getRadius()) {\n        //領域判定\n        console.log(\"test範囲内\");\n      } else {\n        console.log(\"test駅範囲外\");\n      }\n    }, failure => {\n      if (failure.message.startsWith(\"Only secure origins are allowed\")) {\n        console.log(\"secure issuess\");\n      }\n    });\n  }; //------------\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 873,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.mapWrapper,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 878,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(GoogleMap, {\n    mapContainerStyle: mapContainerStyle,\n    zoom: 15,\n    center: center,\n    options: options,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 881,\n      columnNumber: 13\n    }\n  }, (position === null || position === void 0 ? void 0 : position.latitude) && /*#__PURE__*/React.createElement(Marker, {\n    position: new google.maps.LatLng(position === null || position === void 0 ? void 0 : position.latitude, position === null || position === void 0 ? void 0 : position.longitude) //値が入っていることを保証しないとエラー\n    // icon={\"📝\"}\n    // label={\"Marker！！\"}\n    // visible={true}\n    // onLoad={onLoad}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 888,\n      columnNumber: 40\n    }\n  }), tokyoShow === true ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 896,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Marker, {\n    position: tokyoArea.getCenter() // icon={\"📝\"}\n    // label={\"Marker！！\"}\n    // visible={true}\n    // onLoad={onLoad}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 897,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Circle, {\n    center: tokyoArea.getCenter(),\n    radius: 200,\n    visible: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 904,\n      columnNumber: 25\n    }\n  })) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 912,\n      columnNumber: 21\n    }\n  }), oyaShow === true ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 916,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Marker, {\n    position: oyashiryokanArea.getCenter(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 917,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Circle, {\n    center: oyashiryokanArea.getCenter(),\n    radius: 100,\n    visible: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 920,\n      columnNumber: 25\n    }\n  })) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 927,\n      columnNumber: 21\n    }\n  }), oyaderaShow === true ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 930,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Marker, {\n    position: oyaderaArea.getCenter(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 931,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Circle, {\n    center: oyaderaArea.getCenter(),\n    radius: 150,\n    visible: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 934,\n      columnNumber: 25\n    }\n  })) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 941,\n      columnNumber: 21\n    }\n  }), kurirujuShow === true ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 944,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Marker, {\n    position: kurirujuArea.getCenter(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 945,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Circle, {\n    center: kurirujuArea.getCenter(),\n    radius: 100,\n    visible: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 948,\n      columnNumber: 25\n    }\n  })) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 955,\n      columnNumber: 21\n    }\n  }), mogamijayaShow === true ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 958,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Marker, {\n    position: mogamijayaArea.getCenter(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 959,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Circle, {\n    center: mogamijayaArea.getCenter(),\n    radius: 100,\n    visible: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 962,\n      columnNumber: 25\n    }\n  })) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 969,\n      columnNumber: 21\n    }\n  }), wakatakeShow === true ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 972,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Marker, {\n    position: wakatakeArea.getCenter(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 973,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Circle, {\n    center: wakatakeArea.getCenter(),\n    radius: 100,\n    visible: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 976,\n      columnNumber: 25\n    }\n  })) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 983,\n      columnNumber: 21\n    }\n  }), utsunomiyaZooShow === true ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 986,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Marker, {\n    position: utsunomiyaZooArea.getCenter(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 987,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Circle, {\n    center: utsunomiyaZooArea.getCenter(),\n    radius: 100,\n    visible: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 990,\n      columnNumber: 25\n    }\n  })) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 997,\n      columnNumber: 21\n    }\n  }), utsunomiyaTowerShow === true ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1000,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Marker, {\n    position: utsunomiyaTowerArea.getCenter(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1001,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Circle, {\n    center: utsunomiyaTowerArea.getCenter(),\n    radius: 100,\n    visible: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1004,\n      columnNumber: 25\n    }\n  })) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1011,\n      columnNumber: 21\n    }\n  }), kurasseShow === true ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1014,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Marker, {\n    position: kurasseArea.getCenter(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1015,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Circle, {\n    center: kurasseArea.getCenter(),\n    radius: 100,\n    visible: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1018,\n      columnNumber: 25\n    }\n  })) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1025,\n      columnNumber: 21\n    }\n  }), utsunomiyaParkShow === true ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1028,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Marker, {\n    position: utsunomiyaParkArea.getCenter(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1029,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Circle, {\n    center: utsunomiyaParkArea.getCenter(),\n    radius: 150,\n    visible: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1032,\n      columnNumber: 25\n    }\n  })) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1039,\n      columnNumber: 21\n    }\n  }), futarayamaShow === true ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1042,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Marker, {\n    position: futarayamaArea.getCenter(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1043,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Circle, {\n    center: futarayamaArea.getCenter(),\n    radius: 100,\n    visible: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1046,\n      columnNumber: 25\n    }\n  })) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1053,\n      columnNumber: 21\n    }\n  }), selectCafeShow === true ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1056,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Marker, {\n    position: selectCafeArea.getCenter(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1057,\n      columnNumber: 25\n    }\n  }), /*#__PURE__*/React.createElement(Circle, {\n    center: selectCafeArea.getCenter(),\n    radius: 100,\n    visible: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1060,\n      columnNumber: 25\n    }\n  })) : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1067,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    className: classes.checkIn,\n    variant: \"contained\",\n    disableElevation: true,\n    onClick: () => {\n      getCurrentPosition();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1069,\n      columnNumber: 17\n    }\n  }, \"\\u30C1\\u30A7\\u30C3\\u30AF\\u30A4\\u30F3\"))), /*#__PURE__*/React.createElement(BottomTab, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 1082,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default GoogleMapAPI;","map":{"version":3,"sources":["/Users/rei.kawasato/Desktop/travel/src/utils/googleMapAPI.tsx"],"names":["React","useState","useEffect","GoogleMap","useLoadScript","Marker","Circle","useReactRouter","makeStyles","Button","TabChatOff","require","TabMapOn","baseFontColor","useStyles","theme","bottomTab","position","bottom","height","width","backgroundColor","display","flexDirection","textAlign","justifyContent","alignItems","bottomChat","flex","bottomMap","mapWrapper","hight","checkIn","left","color","mapContainerStyle","options","disableDefaultUI","zoomControl","BottomTab","history","classes","push","libraries","GoogleMapAPI","props","centerLat","setCenterLat","centerLng","setCenterLng","center","lat","lng","tokyoShow","setTokyoShow","oyaShow","setOyaShow","oyaderaShow","setOyaderaShow","kurirujuShow","setKurirujuShow","mogamijayaShow","setMogamijayaShow","utsunomiyaZooShow","setUtsunomiyaZooShow","wakatakeShow","setWakatakeShow","utsunomiyaParkShow","setUtsunomiyaParkShow","kurasseShow","setKurasseShow","utsunomiyaTowerShow","setUtsunomiyaTowerShow","selectCafeShow","setSelectCafeShow","futarayamaShow","setFutarayamaShow","jwt","JSON","parse","localStorage","getItem","Authorization","Accesstoken","scenarioHistString","console","log","scenarioHist","length","slice","nextSentenceId","fetch","method","headers","then","res","json","data","scenarioHistory","setItem","stringify","localHistory","ScenarioHistory","scenarioGet","setPosition","googleMapsApiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","isLoaded","loadError","utsunomiya","google","maps","LatLng","tokyo","oyashiryokan","oyadera","kuriruju","mogamijaya","wakatake","futarayama","utsunomiyaZoo","utsunomiyaPark","kurasse","utsunomiyaTower","selectCafe","test","tokyoArea","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","radius","oyashiryokanArea","oyaderaArea","kurirujuArea","mogamijayaArea","wakatakeArea","utsunomiyaZooArea","utsunomiyaParkArea","kurasseArea","utsunomiyaTowerArea","selectCafeArea","futarayamaArea","testArea","error","errorMessage","code","getCurrentPosition","navigator","geolocation","coords","latitude","longitude","latlng","markerOptions","draggable","visible","geometry","spherical","computeDistanceBetween","getCenter","getRadius","tmpArray","personName","plane","body","scenario","window","alert","failure","message","startsWith"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, SetStateAction } from 'react'\nimport {\n    GoogleMap,\n    useLoadScript,\n    Marker,\n    Circle,\n} from \"@react-google-maps/api\"\nimport { Libraries } from '@react-google-maps/api/dist/utils/make-load-script-url';\nimport useReactRouter from 'use-react-router';\nimport { Typography, makeStyles, Grid, Box, Button, ListItemAvatar, Avatar, List } from '@material-ui/core'\nconst TabChatOff = require('../assets/TabChatOff.png');\nconst TabMapOn = require('../assets/TabMapOn.png');\n\nconst baseFontColor = '#4575b4';\nconst useStyles = makeStyles((theme) => ({\n\n    bottomTab: {\n        position: \"fixed\",\n        bottom: \"0\",\n        height: \"10%\",\n        width: \"100%\",\n        backgroundColor: \"#eeedea\",\n        display: \"flex\",\n        flexDirection: \"row\",\n        textAlign: \"center\",\n        justifyContent: \"center\",\n        alignItems: \"center\"\n    },\n    bottomChat: {\n        // border: \"2px solid\",\n        // borderColor: \"pink\",\n        flex: 1,\n    },\n    bottomMap: {\n        // border: \"2px solid\",\n        // borderColor: \"pink\",\n        flex: 1,\n    },\n    mapWrapper: {\n        width: \"100%\",\n        hight: \"100%\",\n        position: \"fixed\",\n        // borderRadius: \"50%\",\n        // backgroundColor: \"blue\",\n        // zIndex:100,\n        // marginLeft: \"40%\",\n        // fontFamily: 'メイリオ',\n        // cursor: \"pointer\",\n    },\n    checkIn: {\n        position: \"fixed\",\n        bottom: \"15%\",\n        left: \"35%\",\n        color: '#ffffff',\n        backgroundColor: baseFontColor,\n    }\n}))\nconst mapContainerStyle = {\n    width: \"100vw\",\n    height: \"100vh\",\n};\n\n\n\nconst options = {\n    disableDefaultUI: true,\n    zoomControl: true\n};\n\nconst BottomTab: React.FC = () => {\n    const { history } = useReactRouter();\n    const classes = useStyles()\n    return (\n\n        <div className={classes.bottomTab}>\n            <div className={classes.bottomChat}>\n\n                <img src={TabChatOff} onClick={() => history.push(\"/chat\")} />\n                <div>\n                    チャット\n                </div>\n            </div>\n            <div className={classes.bottomMap} >\n\n                <img src={TabMapOn} />\n                <div>\n                    マップ\n                </div>\n            </div>\n        </div>\n    )\n}\n\nconst libraries: Libraries = [\"places\", \"geometry\"]\n\nconst GoogleMapAPI: React.FC<{ a: string }> = (props) => {\n    const [centerLat, setCenterLat] = useState(35.681215917748915)\n    const [centerLng, setCenterLng] = useState(139.76707964692983)\n    const center = {\n        lat: centerLat,\n        lng: centerLng,\n    };\n    const [tokyoShow, setTokyoShow] = useState(false)\n    const [oyaShow, setOyaShow] = useState(false)\n    const [oyaderaShow, setOyaderaShow] = useState(false)\n    const [kurirujuShow, setKurirujuShow] = useState(false)\n    const [mogamijayaShow, setMogamijayaShow] = useState(false)\n    const [utsunomiyaZooShow, setUtsunomiyaZooShow] = useState(false)\n    const [wakatakeShow, setWakatakeShow] = useState(false)\n    const [utsunomiyaParkShow, setUtsunomiyaParkShow] = useState(false)\n    const [kurasseShow, setKurasseShow] = useState(false)\n    const [utsunomiyaTowerShow, setUtsunomiyaTowerShow] = useState(false)\n    const [selectCafeShow, setSelectCafeShow] = useState(false)\n    const [futarayamaShow, setFutarayamaShow] = useState(false)\n    const classes = useStyles()\n\n    useEffect(() => {\n        const jwt = JSON.parse(localStorage.getItem('jwt') as string)\n        const { Authorization, Accesstoken } = jwt\n        // const scenarioHist: Array<{ nextSentenceId: string, personName: string, plane: string }> = JSON.parse(localStorage.getItem('scenarioHist') as string)\n\n        const scenarioHistString: string | null = localStorage.getItem('scenarioHist')\n        // const scenarioHist: string<{ nextSentenceId: string, personName: string, plane: string }> = localStorage.getItem('scenarioHist')\n        // const { personName, plane } = scenarioHist\n\n        console.log(scenarioHistString)\n        if (scenarioHistString) {\n            console.log(\"Localstorage\")\n            const scenarioHist: Array<{ nextSentenceId: string, personName: string, plane: string }> = JSON.parse(scenarioHistString)\n            if (scenarioHist.length > 0) {\n                if ((scenarioHist.slice(-1)[0].nextSentenceId === \"5\")) {\n                    setTokyoShow(true)\n                    setCenterLat(35.681215917748915)\n                    setCenterLng(139.76707964692983)\n                }\n                if ((scenarioHist.slice(-1)[0].nextSentenceId === \"68\")) {\n                    setOyaShow(true)\n                    setCenterLat(36.5999734)\n                    setCenterLng(139.824739)\n                }\n                if ((scenarioHist.slice(-1)[0].nextSentenceId === \"125\")) {\n                    setKurirujuShow(true)\n                    setCenterLat(36.631208)\n                    setCenterLng(139.827650)\n                }\n                if ((scenarioHist.slice(-1)[0].nextSentenceId === \"165\")) {\n                    setWakatakeShow(true)\n                    setCenterLat(36.6162505)\n                    setCenterLng(139.8501882)\n                }\n                if ((scenarioHist.slice(-1)[0].nextSentenceId === \"216\")) {\n                    setFutarayamaShow(true)\n                    setCenterLat(36.5621935)\n                    setCenterLng(139.8858675)\n                }\n                if ((scenarioHist.slice(-1)[0].nextSentenceId === \"308\")) {\n                    setUtsunomiyaTowerShow(true)\n                    setCenterLat(36.5715866)\n                    setCenterLng(139.8876343)\n                }\n                if ((scenarioHist.slice(-1)[0].nextSentenceId === \"410\")) {\n                    setUtsunomiyaZooShow(true)\n                    setCenterLat(36.6328899)\n                    setCenterLng(139.8532834)\n                }\n                if ((scenarioHist.slice(-1)[0].nextSentenceId === \"464\")) {\n                    setKurasseShow(true)\n                    setCenterLat(36.5611947)\n                    setCenterLng(139.8854799)\n                }\n                if ((scenarioHist.slice(-1)[0].nextSentenceId === \"546\")) {\n                    setSelectCafeShow(true)\n                    setCenterLat(36.559957)\n                    setCenterLng(139.9022182)\n                }\n                if ((scenarioHist.slice(-1)[0].nextSentenceId === \"625\")) {\n                    setMogamijayaShow(true)\n                    setCenterLat(36.617913)\n                    setCenterLng(139.820958)\n                }\n                if ((scenarioHist.slice(-1)[0].nextSentenceId === \"672\")) {\n                    setUtsunomiyaParkShow(true)\n                    setCenterLat(36.61892)\n                    setCenterLng(139.7901353)\n                }\n                if ((scenarioHist.slice(-1)[0].nextSentenceId === \"730\")) {\n                    setOyaderaShow(true)\n                    setCenterLat(36.5962531)\n                    setCenterLng(139.8206917)\n                }\n            }\n\n        } else {\n            console.log(\"DB\")\n\n            //id削除\n            fetch(\"https://jtb-prd.two-choices.jp/api/scenario/log/\", {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': Authorization,\n                    'accesstoken': Accesstoken\n                },\n            }).then(res => res.json()).then(data => {\n                if (data.scenarioHistory.length <= 0) {\n\n                    localStorage.setItem('scenarioHist', JSON.stringify([]))\n                    return\n                }\n                const localHistory = localStorage.setItem('scenarioHist', JSON.stringify(data.ScenarioHistory))\n                const scenarioGet: Array<{ nextSentenceId: string, personName: string, plane: string }> = JSON.parse(localStorage.getItem('scenarioHist') as string)\n                console.log(scenarioGet)\n            })\n        }\n    }, [])\n    const [position, setPosition] = useState<{ latitude: number, longitude: number }>();\n    //-----------------------------------------------------------\n    const googleMapsApiKey = process.env.REACT_APP_GOOGLE_MAPS_API_KEY as string\n\n    const { isLoaded, loadError } = useLoadScript({\n        googleMapsApiKey,\n        libraries: libraries,\n    });\n\n    if (loadError) return <h1>\"Error loading maps\"</h1>//returnあとにusestate入れるとだめ\n    if (!isLoaded) return <h1>Loading maps</h1>\n    //-----------------------------------------------------------\n\n    //-----------------------------------------------------------\n    // const utsunomiya = new google.maps.LatLng(36.559707, 139.898472) //宇都宮駅\n    // const utsunomiya = new google.maps.LatLng(35.75098387956675, 139.7615640423288) //小台\n    const utsunomiya = new google.maps.LatLng(36.2048239999999995, 138.252924) //PC\n    const tokyo = new google.maps.LatLng(35.681215917748915, 139.76707964692983) //東京駅\n    const oyashiryokan = new google.maps.LatLng(36.5999734, 139.824739) //大谷資料館\n    const oyadera = new google.maps.LatLng(36.5962531, 139.8206917) //大谷寺\n    const kuriruju = new google.maps.LatLng(36.631208, 139.827650) //クーリ・ルージュ\n    const mogamijaya = new google.maps.LatLng(36.617913, 139.820958) //最上茶屋\n    const wakatake = new google.maps.LatLng(36.616712, 139.849803) //若竹の社\n    const futarayama = new google.maps.LatLng(36.5621935, 139.8858675) //二荒山\n    const utsunomiyaZoo = new google.maps.LatLng(36.632781, 139.853577) //宇都宮動物園\n    const utsunomiyaPark = new google.maps.LatLng(36.61892, 139.7901353) //宇都宮森林公園\n    const kurasse = new google.maps.LatLng(36.5611947, 139.8854799) //来らっせ\n    const utsunomiyaTower = new google.maps.LatLng(36.5715866, 139.8876343) //宇都宮タワー\n    const selectCafe = new google.maps.LatLng(36.559957, 139.9022182) //SELECT\n    const test = new google.maps.LatLng(36.204823999, 138.272924) //テスト\n    //-----------------------------------------------------------\n    // const res = google.maps.geometry.spherical.computeDistanceBetween(oyasiryokan, utsunomiya) \n    // console.log(res)\n\n    const tokyoArea = new google.maps.Circle({ //範囲情報\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.5,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.2,\n        // map: map,\n        center: tokyo,\n        radius: 500\n    });\n    // const utsunomiyaArea = new google.maps.Circle({ //範囲情報\n    //     strokeColor: '#FF0000',\n    //     strokeOpacity: 0.5,\n    //     strokeWeight: 2,\n    //     fillColor: '#FF0000',\n    //     fillOpacity: 0.2,\n    //     // map: map,\n    //     center: utsunomiya,\n    //     radius: 100\n    // });\n\n    const oyashiryokanArea = new google.maps.Circle({ //範囲情報\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.5,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.2,\n        // map: map,\n        center: oyashiryokan,\n        radius: 1000\n    });\n    const oyaderaArea = new google.maps.Circle({ //範囲情報\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.5,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.2,\n        // map: map,\n        center: oyadera,\n        radius: 500\n    });\n    const kurirujuArea = new google.maps.Circle({ //範囲情報\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.5,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.2,\n        // map: map,\n        center: kuriruju,\n        radius: 500\n    });\n    const mogamijayaArea = new google.maps.Circle({ //範囲情報\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.5,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.2,\n        // map: map,\n        center: mogamijaya,\n        radius: 350\n    });\n    const wakatakeArea = new google.maps.Circle({ //範囲情報\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.5,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.2,\n        // map: map,\n        center: wakatake,\n        radius: 500\n    });\n    const utsunomiyaZooArea = new google.maps.Circle({ //範囲情報\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.5,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.2,\n        // map: map,\n        center: utsunomiyaZoo,\n        radius: 300\n    });\n    const utsunomiyaParkArea = new google.maps.Circle({ //範囲情報\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.5,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.2,\n        // map: map,\n        center: utsunomiyaPark,\n        radius: 1000\n    });\n    const kurasseArea = new google.maps.Circle({ //範囲情報\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.5,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.2,\n        // map: map,\n        center: kurasse,\n        radius: 350\n    });\n    const utsunomiyaTowerArea = new google.maps.Circle({ //範囲情報\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.5,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.2,\n        // map: map,\n        center: utsunomiyaTower,\n        radius: 500\n    });\n    const selectCafeArea = new google.maps.Circle({ //範囲情報\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.5,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.2,\n        // map: map,\n        center: selectCafe,\n        radius: 300\n    });\n    const futarayamaArea = new google.maps.Circle({ //範囲情報\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.5,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.2,\n        // map: map,\n        center: futarayama,\n        radius: 500\n    });\n    const testArea = new google.maps.Circle({ //範囲情報\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.5,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.2,\n        // map: map,\n        center: test,\n        radius: 100\n    });\n\n\n\n    //-----------------------------------------------------------\n\n    function error(error: any) {\n        var errorMessage: any = {\n            0: \"原因不明のエラーが発生しました…。\",\n            1: \"位置情報の取得が許可されませんでした…。\",\n            2: \"電波状況などで位置情報が取得できませんでした…。\",\n            3: \"位置情報の取得に時間がかかり過ぎてタイムアウトしました…。\",\n        };\n        console.log(errorMessage[error.code]);//getccurentpotion\n    }\n\n    const getCurrentPosition = () => {\n        navigator.geolocation.getCurrentPosition((position: Position) => {\n            var data = position.coords;\n            var lat = data.latitude;\n            var lng = data.longitude;\n            var latlng = new google.maps.LatLng(lat, lng);\n\n            setPosition({ latitude: lat, longitude: lng });\n\n            setCenterLat(lat)\n            setCenterLng(lng)\n            var markerOptions = {\n                // map: map,\n                position: latlng,\n                draggable: true,\n                visible: true,\n            }\n            new google.maps.Marker(markerOptions);\n            if (tokyoShow === true) {\n                console.log(\"tokyo\")\n                //東京駅\n                if (google.maps.geometry.spherical.computeDistanceBetween(latlng, tokyoArea.getCenter()) <= tokyoArea.getRadius()) { //領域判定\n                    console.log(\"東京駅範囲内\")\n\n                    const jwt = JSON.parse(localStorage.getItem('jwt') as string)\n                    const { Authorization, Accesstoken } = jwt\n                    const scenarioHist: Array<{ nextSentenceId: string, personName: string, plane: string }> = JSON.parse(localStorage.getItem('scenarioHist') as string)\n                    console.log(\"Localstorage\")\n\n                    const tmpArray = JSON.parse(localStorage.getItem('scenarioHist') as string)\n                    console.log(\"tmpArray:\", tmpArray)\n                    tmpArray.push({ nextSentenceId: \"6\", personName: \"ナレーター\", plane: \"チェックインできました。\" })\n                    // localStorage.setItem('scenarioHist', JSON.stringify({ personName: scenario.personName, plane: scenario.sentence.plane, nextSentenceId: scenario.nextSentenceId }))\n                    localStorage.setItem('scenarioHist', JSON.stringify(tmpArray))\n                    console.log(\"DB\")\n\n                    //ログから会話履歴をもってくる\n\n                    fetch(\"https://jtb-prd.two-choices.jp/api/scenario/log/\", {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                            'Authorization': Authorization,\n                            'accesstoken': Accesstoken\n                        },\n                        // body: JSON.stringify({ scenario: { personName: scenario.personName, plane: scenario.sentence.plane, nextSentenceId: scenario.nextSentenceId } })\n                        body: JSON.stringify({ scenario: { nextSentenceId: \"6\", personName: \"ナレーター\", plane: \"チェックインできました。\" } })\n                    })\n                    window.alert(\"チェックインできました。チャット画面に戻ってシナリオを進めてください。\")\n                } else {\n                    console.log(\"東京駅範囲外\")\n                }\n            }\n            if (oyaShow === true) {\n\n                //大谷資料館\n                if (google.maps.geometry.spherical.computeDistanceBetween(latlng, oyashiryokanArea.getCenter()) <= oyashiryokanArea.getRadius()) { //領域判定\n                    console.log(\"大谷資料館範囲内\")\n                    const jwt = JSON.parse(localStorage.getItem('jwt') as string)\n                    const { Authorization, Accesstoken } = jwt\n                    const scenarioHist: Array<{ nextSentenceId: string, personName: string, plane: string }> = JSON.parse(localStorage.getItem('scenarioHist') as string)\n                    console.log(\"Localstorage\")\n\n                    const tmpArray = JSON.parse(localStorage.getItem('scenarioHist') as string)\n                    console.log(\"tmpArray:\", tmpArray)\n                    tmpArray.push({ nextSentenceId: \"69\", personName: \"ナレーター\", plane: \"チェックインできました。\" })\n                    // localStorage.setItem('scenarioHist', JSON.stringify({ personName: scenario.personName, plane: scenario.sentence.plane, nextSentenceId: scenario.nextSentenceId }))\n                    localStorage.setItem('scenarioHist', JSON.stringify(tmpArray))\n                    console.log(\"DB\")\n\n                    //ログから会話履歴をもってくる\n\n                    fetch(\"https://jtb-prd.two-choices.jp/api/scenario/log/\", {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                            'Authorization': Authorization,\n                            'accesstoken': Accesstoken\n                        },\n                        // body: JSON.stringify({ scenario: { personName: scenario.personName, plane: scenario.sentence.plane, nextSentenceId: scenario.nextSentenceId } })\n                        body: JSON.stringify({ scenario: { nextSentenceId: \"69\", personName: \"ナレーター\", plane: \"チェックインできました。\" } })\n                    })\n                    window.alert(\"チェックインできました。チャット画面に戻ってシナリオを進めてください。\")\n                    // alert(\"大谷資料館範囲内\")\n                } else {\n                    console.log(\"大谷資料館範囲外\")\n                    window.alert(\"チェックインできませんでした。目的地付近に近づいて再度チェックインしてください\")\n                    // alert(\"大谷資料館範囲外\")\n                }\n            }\n\n            if (oyaderaShow === true) {\n                //大谷寺\n                if (google.maps.geometry.spherical.computeDistanceBetween(latlng, oyaderaArea.getCenter()) <= oyaderaArea.getRadius()) { //領域判定\n                    console.log(\"二荒山範囲内\")\n                    const jwt = JSON.parse(localStorage.getItem('jwt') as string)\n                    const { Authorization, Accesstoken } = jwt\n                    const scenarioHist: Array<{ nextSentenceId: string, personName: string, plane: string }> = JSON.parse(localStorage.getItem('scenarioHist') as string)\n                    console.log(\"Localstorage\")\n\n                    const tmpArray = JSON.parse(localStorage.getItem('scenarioHist') as string)\n                    console.log(\"tmpArray:\", tmpArray)\n                    tmpArray.push({ nextSentenceId: \"731\", personName: \"ナレーター\", plane: \"チェックインできました。\" })\n                    localStorage.setItem('scenarioHist', JSON.stringify(tmpArray))\n                    console.log(\"DB\")\n\n                    //ログから会話履歴をもってくる\n\n                    fetch(\"https://jtb-prd.two-choices.jp/api/scenario/log/\", {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                            'Authorization': Authorization,\n                            'accesstoken': Accesstoken\n                        },\n                        body: JSON.stringify({ scenario: { nextSentenceId: \"731\", personName: \"ナレーター\", plane: \"チェックインできました。\" } })\n                    })\n                    window.alert(\"チェックインできました。チャット画面に戻ってシナリオを進めてください。\")\n                    // alert(\"大谷寺範囲内\")\n                } else {\n                    console.log(\"大谷寺範囲外\")\n                    window.alert(\"チェックインできませんでした。再度チェックインしてください。\")\n                    // alert(\"大谷寺範囲外\")\n                }\n            }\n            if (futarayamaShow === true) {\n                //二荒山神社\n                if (google.maps.geometry.spherical.computeDistanceBetween(latlng, futarayamaArea.getCenter()) <= futarayamaArea.getRadius()) { //領域判定\n                    console.log(\"二荒山範囲内\")\n                    const jwt = JSON.parse(localStorage.getItem('jwt') as string)\n                    const { Authorization, Accesstoken } = jwt\n                    const scenarioHist: Array<{ nextSentenceId: string, personName: string, plane: string }> = JSON.parse(localStorage.getItem('scenarioHist') as string)\n                    console.log(\"Localstorage\")\n\n                    const tmpArray = JSON.parse(localStorage.getItem('scenarioHist') as string)\n                    console.log(\"tmpArray:\", tmpArray)\n                    tmpArray.push({ nextSentenceId: \"217\", personName: \"ナレーター\", plane: \"チェックインできました。\" })\n                    localStorage.setItem('scenarioHist', JSON.stringify(tmpArray))\n                    console.log(\"DB\")\n\n                    //ログから会話履歴をもってくる\n\n                    fetch(\"https://jtb-prd.two-choices.jp/api/scenario/log/\", {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                            'Authorization': Authorization,\n                            'accesstoken': Accesstoken\n                        },\n                        body: JSON.stringify({ scenario: { nextSentenceId: \"217\", personName: \"ナレーター\", plane: \"チェックインできました。\" } })\n                    })\n                    window.alert(\"チェックインできました。チャット画面に戻ってシナリオを進めてください。\")\n                    \n                    \n                } else {\n                    console.log(\"二荒山範囲外\")\n                    window.alert(\"チェックインできませんでした。再度チェックインしてください。\")\n                }\n            }\n            if (kurirujuShow === true) {\n                //クーリ・ルージュ\n                if (google.maps.geometry.spherical.computeDistanceBetween(latlng, kurirujuArea.getCenter()) <= kurirujuArea.getRadius()) { //領域判定\n                    console.log(\"クーリ・ルージュ範囲内\")\n                    const jwt = JSON.parse(localStorage.getItem('jwt') as string)\n                    const { Authorization, Accesstoken } = jwt\n                    const scenarioHist: Array<{ nextSentenceId: string, personName: string, plane: string }> = JSON.parse(localStorage.getItem('scenarioHist') as string)\n                    console.log(\"Localstorage\")\n\n                    const tmpArray = JSON.parse(localStorage.getItem('scenarioHist') as string)\n                    console.log(\"tmpArray:\", tmpArray)\n                    tmpArray.push({ nextSentenceId: \"126\", personName: \"ナレーター\", plane: \"チェックインできました。\" })\n                    // localStorage.setItem('scenarioHist', JSON.stringify({ personName: scenario.personName, plane: scenario.sentence.plane, nextSentenceId: scenario.nextSentenceId }))\n                    localStorage.setItem('scenarioHist', JSON.stringify(tmpArray))\n                    console.log(\"DB\")\n\n                    //ログから会話履歴をもってくる\n\n                    fetch(\"https://jtb-prd.two-choices.jp/api/scenario/log/\", {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                            'Authorization': Authorization,\n                            'accesstoken': Accesstoken\n                        },\n                        // body: JSON.stringify({ scenario: { personName: scenario.personName, plane: scenario.sentence.plane, nextSentenceId: scenario.nextSentenceId } })\n                        body: JSON.stringify({ scenario: { nextSentenceId: \"126\", personName: \"ナレーター\", plane: \"チェックインできました。入店してシナリオを進めましょう\" } })\n                    })\n                    window.alert(\"チェックインできました。チャット画面に戻ってシナリオを進めてください。\")\n                    // alert(\"クーリ・ルージュ範囲内\")\n                } else {\n                    console.log(\"クーリ・ルージュ範囲外\")\n                    window.alert(\"チェックインできませんでした。再度チェックインしてください。\")\n                    // alert(\"クーリ・ルージュ範囲外\")\n                }\n            }\n\n            if (mogamijayaShow === true) {\n\n                //最上茶屋\n                if (google.maps.geometry.spherical.computeDistanceBetween(latlng, mogamijayaArea.getCenter()) <= mogamijayaArea.getRadius()) { //領域判定\n\n                    const jwt = JSON.parse(localStorage.getItem('jwt') as string)\n                    const { Authorization, Accesstoken } = jwt\n                    const scenarioHist: Array<{ nextSentenceId: string, personName: string, plane: string }> = JSON.parse(localStorage.getItem('scenarioHist') as string)\n                    console.log(\"Localstorage\")\n\n                    const tmpArray = JSON.parse(localStorage.getItem('scenarioHist') as string)\n                    console.log(\"tmpArray:\", tmpArray)\n                    tmpArray.push({ nextSentenceId: \"626\", personName: \"ナレーター\", plane: \"チェックインできました。\" })\n                    // localStorage.setItem('scenarioHist', JSON.stringify({ personName: scenario.personName, plane: scenario.sentence.plane, nextSentenceId: scenario.nextSentenceId }))\n                    localStorage.setItem('scenarioHist', JSON.stringify(tmpArray))\n                    console.log(\"DB\")\n\n                    //ログから会話履歴をもってくる\n\n                    fetch(\"https://jtb-prd.two-choices.jp/api/scenario/log/\", {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                            'Authorization': Authorization,\n                            'accesstoken': Accesstoken\n                        },\n                        // body: JSON.stringify({ scenario: { personName: scenario.personName, plane: scenario.sentence.plane, nextSentenceId: scenario.nextSentenceId } })\n                        body: JSON.stringify({ scenario: { nextSentenceId: \"626\", personName: \"ナレーター\", plane: \"チェックインできました。入店してシナリオを進めましょう\" } })\n                    })\n                    window.alert(\"チェックインできました。チャット画面に戻ってシナリオを進めてください。\")\n                    // alert(\"最上茶屋範囲内\")\n                } else {\n                    console.log(\"最上茶屋範囲外\")\n                    window.alert(\"チェックインできませんでした。再度チェックインしてください。\")\n                    // alert(\"最上茶屋範囲外\")\n                }\n            }\n\n            if (wakatakeShow === true) {\n                //若竹\n                if (google.maps.geometry.spherical.computeDistanceBetween(latlng, wakatakeArea.getCenter()) <= wakatakeArea.getRadius()) { //領域判定\n                    console.log(\"若竹範囲内\")\n                    const jwt = JSON.parse(localStorage.getItem('jwt') as string)\n                    const { Authorization, Accesstoken } = jwt\n                    const scenarioHist: Array<{ nextSentenceId: string, personName: string, plane: string }> = JSON.parse(localStorage.getItem('scenarioHist') as string)\n                    console.log(\"Localstorage\")\n\n                    const tmpArray = JSON.parse(localStorage.getItem('scenarioHist') as string)\n                    console.log(\"tmpArray:\", tmpArray)\n                    tmpArray.push({ nextSentenceId: \"166\", personName: \"ナレーター\", plane: \"チェックインできました。\" })\n                    // localStorage.setItem('scenarioHist', JSON.stringify({ personName: scenario.personName, plane: scenario.sentence.plane, nextSentenceId: scenario.nextSentenceId }))\n                    localStorage.setItem('scenarioHist', JSON.stringify(tmpArray))\n                    console.log(\"DB\")\n\n                    //ログから会話履歴をもってくる\n\n                    fetch(\"https://jtb-prd.two-choices.jp/api/scenario/log/\", {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                            'Authorization': Authorization,\n                            'accesstoken': Accesstoken\n                        },\n                        // body: JSON.stringify({ scenario: { personName: scenario.personName, plane: scenario.sentence.plane, nextSentenceId: scenario.nextSentenceId } })\n                        body: JSON.stringify({ scenario: { nextSentenceId: \"166\", personName: \"ナレーター\", plane: \"チェックインできました。\" } })\n                    })\n                    window.alert(\"チェックインできました。チャット画面に戻ってシナリオを進めてください。\")\n                    // alert(\"大谷資料館範囲内\")\n                } else {\n                    console.log(\"若竹範囲外\")\n                    window.alert(\"チェックインできませんでした。再度チェックインしてください。\")\n                    // alert(\"若竹範囲外\")\n                }\n            }\n            if(utsunomiyaParkShow===true){\n\n                //動物園\n                if (google.maps.geometry.spherical.computeDistanceBetween(latlng, utsunomiyaZooArea.getCenter()) <= utsunomiyaZooArea.getRadius()) { //領域判定\n                    const jwt = JSON.parse(localStorage.getItem('jwt') as string)\n                    const { Authorization, Accesstoken } = jwt\n                    const scenarioHist: Array<{ nextSentenceId: string, personName: string, plane: string }> = JSON.parse(localStorage.getItem('scenarioHist') as string)\n                    console.log(\"Localstorage\")\n\n                    const tmpArray = JSON.parse(localStorage.getItem('scenarioHist') as string)\n                    console.log(\"tmpArray:\", tmpArray)\n                    tmpArray.push({ nextSentenceId: \"673\", personName: \"ナレーター\", plane: \"チェックインできました。\" })\n                    // localStorage.setItem('scenarioHist', JSON.stringify({ personName: scenario.personName, plane: scenario.sentence.plane, nextSentenceId: scenario.nextSentenceId }))\n                    localStorage.setItem('scenarioHist', JSON.stringify(tmpArray))\n                    console.log(\"DB\")\n\n                    //ログから会話履歴をもってくる\n\n                    fetch(\"https://jtb-prd.two-choices.jp/api/scenario/log/\", {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                            'Authorization': Authorization,\n                            'accesstoken': Accesstoken\n                        },\n                        // body: JSON.stringify({ scenario: { personName: scenario.personName, plane: scenario.sentence.plane, nextSentenceId: scenario.nextSentenceId } })\n                        body: JSON.stringify({ scenario: { nextSentenceId: \"673\", personName: \"ナレーター\", plane: \"チェックインできました。シナリオを進めてください\" } })\n                    })\n                    window.alert(\"チェックインできました。チャット画面に戻ってシナリオを進めてください。\")\n                    // alert(\"動物園範囲内\")\n                } else {\n                    console.log(\"動物園範囲外\")\n                    window.alert(\"チェックインできませんでした。再度チェックインしてください。\")\n                    // alert(\"動物園範囲外\")\n                }\n            }\n\n            if(utsunomiyaZooShow===true){\n\n                //公園\n                if (google.maps.geometry.spherical.computeDistanceBetween(latlng, utsunomiyaParkArea.getCenter()) <= utsunomiyaParkArea.getRadius()) { //領域判定\n                    const jwt = JSON.parse(localStorage.getItem('jwt') as string)\n                    const { Authorization, Accesstoken } = jwt\n                    const scenarioHist: Array<{ nextSentenceId: string, personName: string, plane: string }> = JSON.parse(localStorage.getItem('scenarioHist') as string)\n                    console.log(\"Localstorage\")\n\n                    const tmpArray = JSON.parse(localStorage.getItem('scenarioHist') as string)\n                    console.log(\"tmpArray:\", tmpArray)\n                    tmpArray.push({ nextSentenceId: \"411\", personName: \"ナレーター\", plane: \"チェックインできました。\" })\n                    // localStorage.setItem('scenarioHist', JSON.stringify({ personName: scenario.personName, plane: scenario.sentence.plane, nextSentenceId: scenario.nextSentenceId }))\n                    localStorage.setItem('scenarioHist', JSON.stringify(tmpArray))\n                    console.log(\"DB\")\n\n                    //ログから会話履歴をもってくる\n\n                    fetch(\"https://jtb-prd.two-choices.jp/api/scenario/log/\", {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                            'Authorization': Authorization,\n                            'accesstoken': Accesstoken\n                        },\n                        // body: JSON.stringify({ scenario: { personName: scenario.personName, plane: scenario.sentence.plane, nextSentenceId: scenario.nextSentenceId } })\n                        body: JSON.stringify({ scenario: { nextSentenceId: \"411\", personName: \"ナレーター\", plane: \"チェックインできました。\" } })\n                    })\n                    window.alert(\"チェックインできました。チャット画面に戻ってシナリオを進めてください。\")\n                    // alert(\"公園範囲内\")\n                } else {\n                    console.log(\"公園範囲外\")\n                    window.alert(\"チェックインできませんでした。再度チェックインしてください。\")\n                    // alert(\"公園範囲外\")\n                }\n            }\n\n            if(kurasseShow===true){\n\n                //くらっせ\n                if (google.maps.geometry.spherical.computeDistanceBetween(latlng, kurasseArea.getCenter()) <= kurasseArea.getRadius()) { //領域判定\n                    const jwt = JSON.parse(localStorage.getItem('jwt') as string)\n                    const { Authorization, Accesstoken } = jwt\n                    const scenarioHist: Array<{ nextSentenceId: string, personName: string, plane: string }> = JSON.parse(localStorage.getItem('scenarioHist') as string)\n                    console.log(\"Localstorage\")\n\n                    const tmpArray = JSON.parse(localStorage.getItem('scenarioHist') as string)\n                    console.log(\"tmpArray:\", tmpArray)\n                    tmpArray.push({ nextSentenceId: \"465\", personName: \"ナレーター\", plane: \"チェックインできました。\" })\n                    // localStorage.setItem('scenarioHist', JSON.stringify({ personName: scenario.personName, plane: scenario.sentence.plane, nextSentenceId: scenario.nextSentenceId }))\n                    localStorage.setItem('scenarioHist', JSON.stringify(tmpArray))\n                    console.log(\"DB\")\n\n                    //ログから会話履歴をもってくる\n\n                    fetch(\"https://jtb-prd.two-choices.jp/api/scenario/log/\", {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                            'Authorization': Authorization,\n                            'accesstoken': Accesstoken\n                        },\n                        // body: JSON.stringify({ scenario: { personName: scenario.personName, plane: scenario.sentence.plane, nextSentenceId: scenario.nextSentenceId } })\n                        body: JSON.stringify({ scenario: { nextSentenceId: \"465\", personName: \"ナレーター\", plane: \"チェックインできました。\" } })\n                    })\n                    window.alert(\"チェックインできました。チャット画面に戻ってシナリオを進めてください。\")\n                    // alert(\"くらっせ範囲内\")\n                } else {\n                    console.log(\"くらっせ範囲外\")\n                    window.alert(\"チェックインできませんでした。再度チェックインしてください。\")\n                    // alert(\"くらっせ範囲外\")\n                }\n            }\n\n            if(utsunomiyaTowerShow===true){\n\n                //宇都宮タワー\n                if (google.maps.geometry.spherical.computeDistanceBetween(latlng, utsunomiyaTowerArea.getCenter()) <= utsunomiyaTowerArea.getRadius()) { //領域判定\n                        const jwt = JSON.parse(localStorage.getItem('jwt') as string)\n                        const { Authorization, Accesstoken } = jwt\n                        const scenarioHist: Array<{ nextSentenceId: string, personName: string, plane: string }> = JSON.parse(localStorage.getItem('scenarioHist') as string)\n                        console.log(\"Localstorage\")\n    \n                        const tmpArray = JSON.parse(localStorage.getItem('scenarioHist') as string)\n                        console.log(\"tmpArray:\", tmpArray)\n                        tmpArray.push({ nextSentenceId: \"309\", personName: \"ナレーター\", plane: \"チェックインできました。\" })\n                        // localStorage.setItem('scenarioHist', JSON.stringify({ personName: scenario.personName, plane: scenario.sentence.plane, nextSentenceId: scenario.nextSentenceId }))\n                        localStorage.setItem('scenarioHist', JSON.stringify(tmpArray))\n                        console.log(\"DB\")\n    \n                        //ログから会話履歴をもってくる\n    \n                        fetch(\"https://jtb-prd.two-choices.jp/api/scenario/log/\", {\n                            method: 'POST',\n                            headers: {\n                                'Content-Type': 'application/json',\n                                'Authorization': Authorization,\n                                'accesstoken': Accesstoken\n                            },\n                            // body: JSON.stringify({ scenario: { personName: scenario.personName, plane: scenario.sentence.plane, nextSentenceId: scenario.nextSentenceId } })\n                            body: JSON.stringify({ scenario: { nextSentenceId: \"309\", personName: \"ナレーター\", plane: \"チェックインできました。\" } })\n                        })\n                        window.alert(\"チェックインできました。チャット画面に戻ってシナリオを進めてください。\")\n                        // alert(\"大谷資料館範囲内\")\n                } else {\n                    console.log(\"宇都宮タワー範囲外\")\n                    window.alert(\"チェックインできませんでした。再度チェックインしてください。\")\n                    // alert(\"宇都宮タワー範囲外\")\n                }\n            }\n            if(selectCafeShow===true){\n\n                //SELECT\n                if (google.maps.geometry.spherical.computeDistanceBetween(latlng, selectCafeArea.getCenter()) <= selectCafeArea.getRadius()) { //領域判定\n                    const jwt = JSON.parse(localStorage.getItem('jwt') as string)\n                    const { Authorization, Accesstoken } = jwt\n                    const scenarioHist: Array<{ nextSentenceId: string, personName: string, plane: string }> = JSON.parse(localStorage.getItem('scenarioHist') as string)\n                    console.log(\"Localstorage\")\n\n                    const tmpArray = JSON.parse(localStorage.getItem('scenarioHist') as string)\n                    console.log(\"tmpArray:\", tmpArray)\n                    tmpArray.push({ nextSentenceId: \"547\", personName: \"ナレーター\", plane: \"チェックインできました。\" })\n                    localStorage.setItem('scenarioHist', JSON.stringify(tmpArray))\n                    console.log(\"DB\")\n\n                    //ログから会話履歴をもってくる\n\n                    fetch(\"https://jtb-prd.two-choices.jp/api/scenario/log/\", {\n                        method: 'POST',\n                        headers: {\n                            'Content-Type': 'application/json',\n                            'Authorization': Authorization,\n                            'accesstoken': Accesstoken\n                        },\n                        body: JSON.stringify({ scenario: { nextSentenceId: \"547\", personName: \"ナレーター\", plane: \"チェックインできました。\" } })\n                    })\n                    window.alert(\"チェックインできました。チャット画面に戻ってシナリオを進めてください。\")\n                    \n                    // alert(\"SELECT範囲内\")\n                } else {\n                    console.log(\"SELECT範囲外\")\n                    window.alert(\"チェックインできませんでした。再度チェックインしてください。\")\n                    // alert(\"SELECT範囲外\")\n                }\n            }\n            //test\n            if (google.maps.geometry.spherical.computeDistanceBetween(latlng, testArea.getCenter()) <= testArea.getRadius()) { //領域判定\n                console.log(\"test範囲内\")\n            } else {\n                console.log(\"test駅範囲外\")\n            }\n        }, failure => {\n            if (failure.message.startsWith(\"Only secure origins are allowed\")) {\n                console.log(\"secure issuess\")\n            }\n        });\n    }\n\n    //------------\n\n    return <div>\n        {/* <button onClick={() => getCurrentPosition()}>チェックイン</button> */}\n        {/* <input id=\"google\" type=\"text\"></input> */}\n        {/* <div>latitude:{position?.latitude}</div> */}\n        {/* <div>longtitude:{position?.longitude}</div> */}\n        <div className={classes.mapWrapper}>\n\n\n            <GoogleMap\n                mapContainerStyle={mapContainerStyle}\n                zoom={15}\n                center={center}\n                options={options}\n            >\n\n                {position?.latitude && <Marker\n                    position={new google.maps.LatLng(position?.latitude, position?.longitude)}//値が入っていることを保証しないとエラー\n                // icon={\"📝\"}\n                // label={\"Marker！！\"}\n                // visible={true}\n                // onLoad={onLoad}\n                />}\n                {tokyoShow === true ?\n                    <div>\n                        <Marker\n                            position={tokyoArea.getCenter()}\n                        // icon={\"📝\"}\n                        // label={\"Marker！！\"}\n                        // visible={true}\n                        // onLoad={onLoad}\n                        />\n                        <Circle\n                            center={tokyoArea.getCenter()}\n                            radius={200}\n                            visible={true}\n                        ></Circle>\n                    </div>\n\n                    :\n                    <div></div>\n                }\n\n                {oyaShow === true ?\n                    <div>\n                        <Marker\n                            position={oyashiryokanArea.getCenter()}\n                        />\n                        <Circle\n                            center={oyashiryokanArea.getCenter()}\n                            radius={100}\n                            visible={true}\n                        ></Circle>\n                    </div>\n                    :\n                    <div></div>\n                }\n                {oyaderaShow === true ?\n                    <div>\n                        <Marker\n                            position={oyaderaArea.getCenter()}\n                        />\n                        <Circle\n                            center={oyaderaArea.getCenter()}\n                            radius={150}\n                            visible={true}\n                        ></Circle>\n                    </div>\n                    :\n                    <div></div>\n                }\n                {kurirujuShow === true ?\n                    <div>\n                        <Marker\n                            position={kurirujuArea.getCenter()}\n                        />\n                        <Circle\n                            center={kurirujuArea.getCenter()}\n                            radius={100}\n                            visible={true}\n                        ></Circle>\n                    </div>\n                    :\n                    <div></div>\n                }\n                {mogamijayaShow === true ?\n                    <div>\n                        <Marker\n                            position={mogamijayaArea.getCenter()}\n                        />\n                        <Circle\n                            center={mogamijayaArea.getCenter()}\n                            radius={100}\n                            visible={true}\n                        ></Circle>\n                    </div>\n                    :\n                    <div></div>\n                }\n                {wakatakeShow === true ?\n                    <div>\n                        <Marker\n                            position={wakatakeArea.getCenter()}\n                        />\n                        <Circle\n                            center={wakatakeArea.getCenter()}\n                            radius={100}\n                            visible={true}\n                        ></Circle>\n                    </div>\n                    :\n                    <div></div>\n                }\n                {utsunomiyaZooShow === true ?\n                    <div>\n                        <Marker\n                            position={utsunomiyaZooArea.getCenter()}\n                        />\n                        <Circle\n                            center={utsunomiyaZooArea.getCenter()}\n                            radius={100}\n                            visible={true}\n                        ></Circle>\n                    </div>\n                    :\n                    <div></div>\n                }\n                {utsunomiyaTowerShow === true ?\n                    <div>\n                        <Marker\n                            position={utsunomiyaTowerArea.getCenter()}\n                        />\n                        <Circle\n                            center={utsunomiyaTowerArea.getCenter()}\n                            radius={100}\n                            visible={true}\n                        ></Circle>\n                    </div>\n                    :\n                    <div></div>\n                }\n                {kurasseShow === true ?\n                    <div>\n                        <Marker\n                            position={kurasseArea.getCenter()}\n                        />\n                        <Circle\n                            center={kurasseArea.getCenter()}\n                            radius={100}\n                            visible={true}\n                        ></Circle>\n                    </div>\n                    :\n                    <div></div>\n                }\n                {utsunomiyaParkShow === true ?\n                    <div>\n                        <Marker\n                            position={utsunomiyaParkArea.getCenter()}\n                        />\n                        <Circle\n                            center={utsunomiyaParkArea.getCenter()}\n                            radius={150}\n                            visible={true}\n                        ></Circle>\n                    </div>\n                    :\n                    <div></div>\n                }\n                {futarayamaShow === true ?\n                    <div>\n                        <Marker\n                            position={futarayamaArea.getCenter()}\n                        />\n                        <Circle\n                            center={futarayamaArea.getCenter()}\n                            radius={100}\n                            visible={true}\n                        ></Circle>\n                    </div>\n                    :\n                    <div></div>\n                }\n                {selectCafeShow === true ?\n                    <div>\n                        <Marker\n                            position={selectCafeArea.getCenter()}\n                        />\n                        <Circle\n                            center={selectCafeArea.getCenter()}\n                            radius={100}\n                            visible={true}\n                        ></Circle>\n                    </div>\n                    :\n                    <div></div>\n                }\n                <Button\n                    className={classes.checkIn}\n                    variant=\"contained\"\n                    disableElevation\n                    onClick={() => {\n                        getCurrentPosition()\n                    }}\n                >\n                    チェックイン\n        </Button>\n            </GoogleMap>\n        </div>\n\n        <BottomTab />\n    </div>\n}\n\n\n\n\n\n\n\nexport default GoogleMapAPI;"]},"metadata":{},"sourceType":"module"}