{"ast":null,"code":"import{rootReducer}from'./modules/rootState';import{persistStore,persistReducer}from'redux-persist';import logger from'redux-logger';import{configureStore}from'@reduxjs/toolkit';import sessionStorage from'redux-persist/lib/storage/session';var persistConfig={key:'root',storage:sessionStorage,whitelist:['loginInfo','resumeStore']};var persistedReducer=persistReducer(persistConfig,rootReducer);var middlewares=[];if(process.env.NODE_ENV===\"development\"){middlewares.push(logger);}var store=configureStore({reducer:persistedReducer,middleware:middlewares});var persistor=persistStore(store);export{store,persistor};","map":{"version":3,"sources":["/Users/rei.kawasato/Desktop/travel/src/store.tsx"],"names":["rootReducer","persistStore","persistReducer","logger","configureStore","sessionStorage","persistConfig","key","storage","whitelist","persistedReducer","middlewares","process","env","NODE_ENV","push","store","reducer","middleware","persistor"],"mappings":"AAAA,OAASA,WAAT,KAA4B,qBAA5B,CACA,OAASC,YAAT,CAAuBC,cAAvB,KAA6C,eAA7C,CACA,MAAOC,CAAAA,MAAP,KAAmB,cAAnB,CACA,OAASC,cAAT,KAAqD,kBAArD,CAEA,MAAOC,CAAAA,cAAP,KAA2B,mCAA3B,CACA,GAAMC,CAAAA,aAAa,CAAG,CACpBC,GAAG,CAAE,MADe,CAEpBC,OAAO,CAAEH,cAFW,CAGpBI,SAAS,CAAE,CAAC,WAAD,CAAc,aAAd,CAHS,CAAtB,CAKA,GAAMC,CAAAA,gBAAgB,CAAGR,cAAc,CAACI,aAAD,CAAgBN,WAAhB,CAAvC,CAEA,GAAMW,CAAAA,WAAe,CAAE,EAAvB,CAEA,GAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,gBAAJ,CAA4C,CAC1CH,WAAW,CAACI,IAAZ,CAAiBZ,MAAjB,EACD,CAED,GAAMa,CAAAA,KAAK,CAAGZ,cAAc,CAAC,CAC3Ba,OAAO,CAAEP,gBADkB,CAE3BQ,UAAU,CAAEP,WAFe,CAAD,CAA5B,CAIA,GAAMQ,CAAAA,SAAS,CAAGlB,YAAY,CAACe,KAAD,CAA9B,CAEA,OAASA,KAAT,CAAgBG,SAAhB","sourcesContent":["import { rootReducer } from './modules/rootState';\nimport { persistStore, persistReducer } from 'redux-persist'\nimport logger from 'redux-logger';\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\n\nimport sessionStorage from 'redux-persist/lib/storage/session'\nconst persistConfig = {\n  key: 'root',\n  storage: sessionStorage,\n  whitelist: ['loginInfo', 'resumeStore']\n};\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nconst middlewares:any= [];\n\nif (process.env.NODE_ENV === `development`) {\n  middlewares.push(logger);\n}\n\nconst store = configureStore({\n  reducer: persistedReducer,\n  middleware: middlewares,\n});\nconst persistor = persistStore(store);\n\nexport { store, persistor };\n"]},"metadata":{},"sourceType":"module"}