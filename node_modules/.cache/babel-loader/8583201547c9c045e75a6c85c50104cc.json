{"ast":null,"code":"var _jsxFileName = \"/Users/rei.kawasato/Desktop/travel/src/utils/googleMapAPI.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport { GoogleMap, useLoadScript, Marker } from \"@react-google-maps/api\";\nimport useReactRouter from 'use-react-router';\nimport { makeStyles } from '@material-ui/core';\n\nconst TabChatOff = require('../assets/TabChatOff.png');\n\nconst TabMapOn = require('../assets/TabMapOn.png');\n\nconst useStyles = makeStyles(theme => ({\n  bottomTab: {\n    position: \"fixed\",\n    bottom: \"0\",\n    height: \"10%\",\n    width: \"100%\",\n    backgroundColor: \"#eeedea\",\n    display: \"flex\",\n    flexDirection: \"row\",\n    textAlign: \"center\",\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  bottomChat: {\n    // border: \"2px solid\",\n    // borderColor: \"pink\",\n    flex: 1\n  },\n  bottomMap: {\n    // border: \"2px solid\",\n    // borderColor: \"pink\",\n    flex: 1\n  }\n}));\nconst mapContainerStyle = {\n  width: \"100vw\",\n  height: \"100vh\"\n};\nconst center = {\n  lat: 36.559707,\n  lng: 139.898472\n};\nconst options = {\n  disableDefaultUI: true,\n  zoomControl: true\n};\n\nconst BottomTab = () => {\n  const {\n    history\n  } = useReactRouter();\n  const classes = useStyles();\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.bottomTab,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.bottomChat,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: TabChatOff,\n    onClick: () => history.push(\"/chat\"),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 17\n    }\n  }, \"\\u30C1\\u30E3\\u30C3\\u30C8\")), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.bottomMap,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: TabMapOn,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 17\n    }\n  }, \"\\u30DE\\u30C3\\u30D7\")));\n};\n\nconst libraries = [\"places\", \"geometry\"];\n\nconst GoogleMapAPI = props => {\n  useEffect(() => {\n    const jwt = JSON.parse(localStorage.getItem('jwt'));\n    const {\n      Authorization,\n      Accesstoken\n    } = jwt;\n    const scenarioHist = JSON.parse(localStorage.getItem('scenarioHist'));\n    const [utsunomiyaShow, setUtsunomiyaShow] = useState(false);\n\n    if (scenarioHist) {\n      console.log(\"Localstorage\");\n      console.log(scenarioHist);\n\n      if (scenarioHist.slice(-1)[0].nextSentenceId === \"5\") {\n        setUtsunomiyaShow(true);\n      }\n    } else {\n      console.log(\"DB\"); //ログから会話履歴をもってくる\n      //id削除\n\n      fetch(\"https://jtb-prd.two-choices.jp/api/scenario/log/\", {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': Authorization,\n          'accesstoken': Accesstoken\n        }\n      }).then(res => res.json()).then(data => {\n        const localHistory = localStorage.setItem('scenarioHist', JSON.stringify(data.ScenarioHistory));\n        const scenarioGet = JSON.parse(localStorage.getItem('scenarioHist'));\n        console.log(scenarioGet);\n      });\n    }\n  }, []); // function  getDestinationFromChat(destinationFromChat:string){\n  //     const [destination, setDestination] = useState(\"\")\n  //     setDestination(props.a)\n  //     console.log(\"aaa\")\n  // }\n\n  const [position, setPosition] = useState(); //-----------------------------------------------------------\n\n  const googleMapsApiKey = process.env.REACT_APP_GOOGLE_MAPS_API_KEY;\n  const {\n    isLoaded,\n    loadError\n  } = useLoadScript({\n    googleMapsApiKey,\n    libraries: libraries\n  });\n  if (loadError) return /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 27\n    }\n  }, \"\\\"Error loading maps\\\"\"); //returnあとにusestate入れるとだめ\n\n  if (!isLoaded) return /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 27\n    }\n  }, \"Loading maps\"); //-----------------------------------------------------------\n  //-----------------------------------------------------------\n\n  const utsunomiya = new google.maps.LatLng(36.559707, 139.898472); //宇都宮駅\n\n  const oyashiryokan = new google.maps.LatLng(36.602020, 139.824747); //大谷資料館\n\n  const oyadera = new google.maps.LatLng(36.597424, 139.820439); //大谷寺\n\n  const kuriruju = new google.maps.LatLng(36.631208, 139.827650); //クーリ・ルージュ\n\n  const mogamijaya = new google.maps.LatLng(36.617913, 139.820958); //最上茶屋\n\n  const wakatake = new google.maps.LatLng(36.616712, 139.849803); //若竹の社\n\n  const utsunomiyaZoo = new google.maps.LatLng(36.632781, 139.853577); //宇都宮動物園\n\n  const utsunomiyaPark = new google.maps.LatLng(36.618265, 139.790336); //宇都宮森林公園\n\n  const matsugamine = new google.maps.LatLng(36.558171, 139.881408); //松が峰教会\n\n  const kurasse = new google.maps.LatLng(36.560851, 139.885278); //来らっせ\n\n  const utsunomiyaTower = new google.maps.LatLng(36.570387, 139.885919); //宇都宮タワー\n\n  const selectCafe = new google.maps.LatLng(36.560085, 139.902119); //SELECT\n\n  const test = new google.maps.LatLng(36.204823999, 138.272924); //テスト\n  //-----------------------------------------------------------\n  // const res = google.maps.geometry.spherical.computeDistanceBetween(oyasiryokan, utsunomiya) \n  // console.log(res)\n\n  const utsunomiyaArea = new google.maps.Circle({\n    //範囲情報\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.5,\n    strokeWeight: 2,\n    fillColor: '#FF0000',\n    fillOpacity: 0.2,\n    // map: map,\n    center: utsunomiya,\n    radius: 100\n  });\n  const oyashiryokanArea = new google.maps.Circle({\n    //範囲情報\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.5,\n    strokeWeight: 2,\n    fillColor: '#FF0000',\n    fillOpacity: 0.2,\n    // map: map,\n    center: oyashiryokan,\n    radius: 1000\n  });\n  const oyaderaArea = new google.maps.Circle({\n    //範囲情報\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.5,\n    strokeWeight: 2,\n    fillColor: '#FF0000',\n    fillOpacity: 0.2,\n    // map: map,\n    center: oyadera,\n    radius: 500\n  });\n  const kurirujuArea = new google.maps.Circle({\n    //範囲情報\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.5,\n    strokeWeight: 2,\n    fillColor: '#FF0000',\n    fillOpacity: 0.2,\n    // map: map,\n    center: kuriruju,\n    radius: 500\n  });\n  const mogamijayaArea = new google.maps.Circle({\n    //範囲情報\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.5,\n    strokeWeight: 2,\n    fillColor: '#FF0000',\n    fillOpacity: 0.2,\n    // map: map,\n    center: mogamijaya,\n    radius: 100\n  });\n  const wakatakeArea = new google.maps.Circle({\n    //範囲情報\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.5,\n    strokeWeight: 2,\n    fillColor: '#FF0000',\n    fillOpacity: 0.2,\n    // map: map,\n    center: wakatake,\n    radius: 100\n  });\n  const utsunomiyaZooArea = new google.maps.Circle({\n    //範囲情報\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.5,\n    strokeWeight: 2,\n    fillColor: '#FF0000',\n    fillOpacity: 0.2,\n    // map: map,\n    center: utsunomiyaZoo,\n    radius: 100\n  });\n  const utsunomiyaParkArea = new google.maps.Circle({\n    //範囲情報\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.5,\n    strokeWeight: 2,\n    fillColor: '#FF0000',\n    fillOpacity: 0.2,\n    // map: map,\n    center: utsunomiyaPark,\n    radius: 1000\n  });\n  const matsugamineArea = new google.maps.Circle({\n    //範囲情報\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.5,\n    strokeWeight: 2,\n    fillColor: '#FF0000',\n    fillOpacity: 0.2,\n    // map: map,\n    center: matsugamine,\n    radius: 100\n  });\n  const kurasseArea = new google.maps.Circle({\n    //範囲情報\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.5,\n    strokeWeight: 2,\n    fillColor: '#FF0000',\n    fillOpacity: 0.2,\n    // map: map,\n    center: kurasse,\n    radius: 100\n  });\n  const utsunomiyaTowerArea = new google.maps.Circle({\n    //範囲情報\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.5,\n    strokeWeight: 2,\n    fillColor: '#FF0000',\n    fillOpacity: 0.2,\n    // map: map,\n    center: utsunomiyaTower,\n    radius: 100\n  });\n  const selectCafeArea = new google.maps.Circle({\n    //範囲情報\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.5,\n    strokeWeight: 2,\n    fillColor: '#FF0000',\n    fillOpacity: 0.2,\n    // map: map,\n    center: selectCafe,\n    radius: 100\n  });\n  const testArea = new google.maps.Circle({\n    //範囲情報\n    strokeColor: '#FF0000',\n    strokeOpacity: 0.5,\n    strokeWeight: 2,\n    fillColor: '#FF0000',\n    fillOpacity: 0.2,\n    // map: map,\n    center: test,\n    radius: 100\n  }); //-----------------------------------------------------------\n  // const [isAvailable, setAvailable] = useState(false);\n  // const [position, setPosition] = useState<{ latitude: number, longitude: number }>();\n  // // useEffectが実行されているかどうかを判定するために用意しています\n  // const isFirstRef = useRef(true);\n\n  /*\n   * ページ描画時にGeolocation APIが使えるかどうかをチェックしています\n   * もし使えなければその旨のエラーメッセージを表示させます\n   */\n  // useEffect(() => {\n  //     isFirstRef.current = false;\n  //     if ('geolocation' in navigator) {\n  //         setAvailable(true);\n  //     }\n  // }, [isAvailable]);\n\n  function error(error) {\n    var errorMessage = {\n      0: \"原因不明のエラーが発生しました…。\",\n      1: \"位置情報の取得が許可されませんでした…。\",\n      2: \"電波状況などで位置情報が取得できませんでした…。\",\n      3: \"位置情報の取得に時間がかかり過ぎてタイムアウトしました…。\"\n    };\n    console.log(errorMessage[error.code]); //getccurentpotion\n  }\n\n  const getCurrentPosition = () => {\n    navigator.geolocation.getCurrentPosition(position => {\n      var data = position.coords;\n      var lat = data.latitude;\n      var lng = data.longitude;\n      var latlng = new google.maps.LatLng(lat, lng); // var canvas = document.getElementById('map-canvas') as Element;\n      // document.getElementById('google').innerHTML= \"String(lat)\" ;\n      // var mapOptions = {\n      //     zoom: 15,\n      //     center: latlng,\n      //     mapTypeId: google.maps.MapTypeId.ROADMAP\n      // }\n      // var map = new google.maps.Map(canvas, mapOptions);\n      // const {lati,longa} = position.coords\n      // alert(lat)\n      // alert(lng)\n\n      setPosition({\n        latitude: lat,\n        longitude: lng\n      }); // marker\n\n      var markerOptions = {\n        // map: map,\n        position: latlng,\n        draggable: true,\n        visible: true\n      };\n      new google.maps.Marker(markerOptions); //宇都宮駅\n\n      if (google.maps.geometry.spherical.computeDistanceBetween(latlng, utsunomiyaArea.getCenter()) <= utsunomiyaArea.getRadius()) {\n        //領域判定\n        console.log(\"宇都宮駅範囲内\"); // alert(\"宇都宮駅範囲内\")\n      } else {\n        console.log(\"宇都宮駅範囲外\"); // alert(\"宇都宮駅範囲外\")\n      } //大谷資料館\n\n\n      if (google.maps.geometry.spherical.computeDistanceBetween(latlng, oyashiryokanArea.getCenter()) <= oyashiryokanArea.getRadius()) {\n        //領域判定\n        console.log(\"大谷資料館範囲内\"); // alert(\"大谷資料館範囲内\")\n      } else {\n        console.log(\"大谷資料館範囲外\"); // alert(\"大谷資料館範囲外\")\n      } //大谷寺\n\n\n      if (google.maps.geometry.spherical.computeDistanceBetween(latlng, oyaderaArea.getCenter()) <= oyaderaArea.getRadius()) {\n        //領域判定\n        console.log(\"大谷寺範囲内\"); // alert(\"大谷寺範囲内\")\n      } else {\n        console.log(\"大谷寺範囲外\"); // alert(\"大谷寺範囲外\")\n      } //クーリ・ルージュ\n\n\n      if (google.maps.geometry.spherical.computeDistanceBetween(latlng, kurirujuArea.getCenter()) <= kurirujuArea.getRadius()) {\n        //領域判定\n        console.log(\"クーリ・ルージュ範囲内\"); // alert(\"クーリ・ルージュ範囲内\")\n      } else {\n        console.log(\"クーリ・ルージュ範囲外\"); // alert(\"クーリ・ルージュ範囲外\")\n      } //最上茶屋\n\n\n      if (google.maps.geometry.spherical.computeDistanceBetween(latlng, mogamijayaArea.getCenter()) <= mogamijayaArea.getRadius()) {\n        //領域判定\n        console.log(\"最上茶屋範囲内\"); // alert(\"最上茶屋範囲内\")\n      } else {\n        console.log(\"最上茶屋範囲外\"); // alert(\"最上茶屋範囲外\")\n      } //若竹\n\n\n      if (google.maps.geometry.spherical.computeDistanceBetween(latlng, wakatakeArea.getCenter()) <= wakatakeArea.getRadius()) {\n        //領域判定\n        console.log(\"若竹範囲内\"); // alert(\"若竹範囲内\")\n      } else {\n        console.log(\"若竹範囲外\"); // alert(\"若竹範囲外\")\n      } //動物園\n\n\n      if (google.maps.geometry.spherical.computeDistanceBetween(latlng, utsunomiyaZooArea.getCenter()) <= utsunomiyaZooArea.getRadius()) {\n        //領域判定\n        console.log(\"動物園範囲内\"); // alert(\"動物園範囲内\")\n      } else {\n        console.log(\"動物園範囲外\"); // alert(\"動物園範囲外\")\n      } //公園\n\n\n      if (google.maps.geometry.spherical.computeDistanceBetween(latlng, utsunomiyaParkArea.getCenter()) <= utsunomiyaParkArea.getRadius()) {\n        //領域判定\n        console.log(\"公園範囲内\"); // alert(\"公園範囲内\")\n      } else {\n        console.log(\"公園範囲外\"); // alert(\"公園範囲外\")\n      } //松が峰\n\n\n      if (google.maps.geometry.spherical.computeDistanceBetween(latlng, matsugamineArea.getCenter()) <= matsugamineArea.getRadius()) {\n        //領域判定\n        console.log(\"松が峰範囲内\"); // alert(\"松が峰範囲内\")\n      } else {\n        console.log(\"松が峰範囲外\"); // alert(\"松が峰範囲外\")\n      } //くらっせ\n\n\n      if (google.maps.geometry.spherical.computeDistanceBetween(latlng, kurasseArea.getCenter()) <= kurasseArea.getRadius()) {\n        //領域判定\n        console.log(\"くらっせ範囲内\"); // alert(\"くらっせ範囲内\")\n      } else {\n        console.log(\"くらっせ範囲外\"); // alert(\"くらっせ範囲外\")\n      } //宇都宮タワー\n\n\n      if (google.maps.geometry.spherical.computeDistanceBetween(latlng, utsunomiyaTowerArea.getCenter()) <= utsunomiyaTowerArea.getRadius()) {\n        //領域判定\n        console.log(\"宇都宮タワー範囲内\"); // alert(\"宇都宮タワー範囲内\")\n      } else {\n        console.log(\"宇都宮タワー範囲外\"); // alert(\"宇都宮タワー範囲外\")\n      } //SELECT\n\n\n      if (google.maps.geometry.spherical.computeDistanceBetween(latlng, selectCafeArea.getCenter()) <= selectCafeArea.getRadius()) {\n        //領域判定\n        console.log(\"SELECT範囲内\"); // alert(\"SELECT範囲内\")\n      } else {\n        console.log(\"SELECT範囲外\"); // alert(\"SELECT範囲外\")\n      } //test\n\n\n      if (google.maps.geometry.spherical.computeDistanceBetween(latlng, testArea.getCenter()) <= testArea.getRadius()) {\n        //領域判定\n        console.log(\"test範囲内\");\n      } else {\n        console.log(\"test駅範囲外\");\n      }\n    }, failure => {\n      if (failure.message.startsWith(\"Only secure origins are allowed\")) {\n        console.log(\"secure issuess\");\n      }\n    });\n  }; //------------\n\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 450,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => getCurrentPosition(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 452,\n      columnNumber: 9\n    }\n  }, \"\\u30C1\\u30A7\\u30C3\\u30AF\\u30A4\\u30F3\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 454,\n      columnNumber: 9\n    }\n  }, \"latitude:\", position === null || position === void 0 ? void 0 : position.latitude), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 9\n    }\n  }, \"longtitude:\", position === null || position === void 0 ? void 0 : position.longitude), /*#__PURE__*/React.createElement(GoogleMap, {\n    mapContainerStyle: mapContainerStyle,\n    zoom: 15,\n    center: center,\n    options: options,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 456,\n      columnNumber: 9\n    }\n  }, (position === null || position === void 0 ? void 0 : position.latitude) && /*#__PURE__*/React.createElement(Marker, {\n    position: new google.maps.LatLng(position === null || position === void 0 ? void 0 : position.latitude, position === null || position === void 0 ? void 0 : position.longitude) //値が入っていることを保証しないとエラー\n    // icon={\"📝\"}\n    // label={\"Marker！！\"}\n    // visible={true}\n    // onLoad={onLoad}\n    ,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 463,\n      columnNumber: 36\n    }\n  })), /*#__PURE__*/React.createElement(BottomTab, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 655,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default GoogleMapAPI;","map":{"version":3,"sources":["/Users/rei.kawasato/Desktop/travel/src/utils/googleMapAPI.tsx"],"names":["React","useState","useEffect","GoogleMap","useLoadScript","Marker","useReactRouter","makeStyles","TabChatOff","require","TabMapOn","useStyles","theme","bottomTab","position","bottom","height","width","backgroundColor","display","flexDirection","textAlign","justifyContent","alignItems","bottomChat","flex","bottomMap","mapContainerStyle","center","lat","lng","options","disableDefaultUI","zoomControl","BottomTab","history","classes","push","libraries","GoogleMapAPI","props","jwt","JSON","parse","localStorage","getItem","Authorization","Accesstoken","scenarioHist","utsunomiyaShow","setUtsunomiyaShow","console","log","slice","nextSentenceId","fetch","method","headers","then","res","json","data","localHistory","setItem","stringify","ScenarioHistory","scenarioGet","setPosition","googleMapsApiKey","process","env","REACT_APP_GOOGLE_MAPS_API_KEY","isLoaded","loadError","utsunomiya","google","maps","LatLng","oyashiryokan","oyadera","kuriruju","mogamijaya","wakatake","utsunomiyaZoo","utsunomiyaPark","matsugamine","kurasse","utsunomiyaTower","selectCafe","test","utsunomiyaArea","Circle","strokeColor","strokeOpacity","strokeWeight","fillColor","fillOpacity","radius","oyashiryokanArea","oyaderaArea","kurirujuArea","mogamijayaArea","wakatakeArea","utsunomiyaZooArea","utsunomiyaParkArea","matsugamineArea","kurasseArea","utsunomiyaTowerArea","selectCafeArea","testArea","error","errorMessage","code","getCurrentPosition","navigator","geolocation","coords","latitude","longitude","latlng","markerOptions","draggable","visible","geometry","spherical","computeDistanceBetween","getCenter","getRadius","failure","message","startsWith"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useRef, SetStateAction } from 'react'\nimport {\n    GoogleMap,\n    useLoadScript,\n    Marker,\n    Circle,\n} from \"@react-google-maps/api\"\nimport { Libraries } from '@react-google-maps/api/dist/utils/make-load-script-url';\nimport useReactRouter from 'use-react-router';\nimport { Typography, makeStyles, Grid, Box, Button, ListItemAvatar, Avatar, List } from '@material-ui/core'\nconst TabChatOff = require('../assets/TabChatOff.png');\nconst TabMapOn = require('../assets/TabMapOn.png');\nconst useStyles = makeStyles((theme) => ({\n\n    bottomTab: {\n        position: \"fixed\",\n        bottom: \"0\",\n        height: \"10%\",\n        width: \"100%\",\n        backgroundColor: \"#eeedea\",\n        display: \"flex\",\n        flexDirection: \"row\",\n        textAlign: \"center\",\n        justifyContent: \"center\",\n        alignItems: \"center\"\n    },\n    bottomChat: {\n        // border: \"2px solid\",\n        // borderColor: \"pink\",\n        flex: 1,\n    },\n    bottomMap: {\n        // border: \"2px solid\",\n        // borderColor: \"pink\",\n        flex: 1,\n    }\n}))\nconst mapContainerStyle = {\n    width: \"100vw\",\n    height: \"100vh\",\n};\n\nconst center = {\n    lat: 36.559707,\n    lng: 139.898472,\n};\n\nconst options = {\n    disableDefaultUI: true,\n    zoomControl: true\n};\n\nconst BottomTab: React.FC = () => {\n    const { history } = useReactRouter();\n    const classes = useStyles()\n    return (\n\n        <div className={classes.bottomTab}>\n            <div className={classes.bottomChat}>\n\n                <img src={TabChatOff} onClick={() => history.push(\"/chat\")} />\n                <div>\n                    チャット\n                </div>\n            </div>\n            <div className={classes.bottomMap} >\n\n                <img src={TabMapOn} />\n                <div>\n                    マップ\n                </div>\n            </div>\n        </div>\n    )\n}\n\nconst libraries: Libraries = [\"places\", \"geometry\"]\n\nconst GoogleMapAPI: React.FC<{a:string}> = (props) => {\n    useEffect(() => {\n        const jwt = JSON.parse(localStorage.getItem('jwt') as string)\n        const { Authorization, Accesstoken } = jwt\n        const scenarioHist: Array<{ nextSentenceId:string,personName: string, plane: string }> = JSON.parse(localStorage.getItem('scenarioHist') as string)\n\n        const [utsunomiyaShow,setUtsunomiyaShow] = useState(false)\n\n        if (scenarioHist) {\n            console.log(\"Localstorage\")\n\n            console.log(scenarioHist)\n            if((scenarioHist.slice(-1)[0].nextSentenceId===\"5\")){\n                setUtsunomiyaShow(true)\n            }\n        } else {\n            console.log(\"DB\")\n\n            //ログから会話履歴をもってくる\n\n            //id削除\n            fetch(\"https://jtb-prd.two-choices.jp/api/scenario/log/\", {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': Authorization,\n                    'accesstoken': Accesstoken\n                },\n            }).then(res => res.json()).then(data => {\n\n                const localHistory = localStorage.setItem('scenarioHist', JSON.stringify(data.ScenarioHistory))\n                const scenarioGet: Array<{ nextSentenceId:string,personName: string, plane: string }> = JSON.parse(localStorage.getItem('scenarioHist') as string)\n                console.log(scenarioGet)\n            })\n        }\n    }, [])\n    // function  getDestinationFromChat(destinationFromChat:string){\n    //     const [destination, setDestination] = useState(\"\")\n    //     setDestination(props.a)\n    //     console.log(\"aaa\")\n    // }\n    const [position, setPosition] = useState<{ latitude: number, longitude: number }>();\n    //-----------------------------------------------------------\n    const googleMapsApiKey = process.env.REACT_APP_GOOGLE_MAPS_API_KEY as string\n\n    const { isLoaded, loadError } = useLoadScript({\n        googleMapsApiKey,\n        libraries: libraries,\n    });\n\n    if (loadError) return <h1>\"Error loading maps\"</h1>//returnあとにusestate入れるとだめ\n    if (!isLoaded) return <h1>Loading maps</h1>\n    //-----------------------------------------------------------\n\n    //-----------------------------------------------------------\n    const utsunomiya = new google.maps.LatLng(36.559707, 139.898472) //宇都宮駅\n    const oyashiryokan = new google.maps.LatLng(36.602020, 139.824747) //大谷資料館\n    const oyadera = new google.maps.LatLng(36.597424, 139.820439) //大谷寺\n    const kuriruju = new google.maps.LatLng(36.631208, 139.827650) //クーリ・ルージュ\n    const mogamijaya = new google.maps.LatLng(36.617913, 139.820958) //最上茶屋\n    const wakatake = new google.maps.LatLng(36.616712, 139.849803) //若竹の社\n    const utsunomiyaZoo = new google.maps.LatLng(36.632781, 139.853577) //宇都宮動物園\n    const utsunomiyaPark = new google.maps.LatLng(36.618265, 139.790336) //宇都宮森林公園\n    const matsugamine = new google.maps.LatLng(36.558171, 139.881408) //松が峰教会\n    const kurasse = new google.maps.LatLng(36.560851, 139.885278) //来らっせ\n    const utsunomiyaTower = new google.maps.LatLng(36.570387, 139.885919) //宇都宮タワー\n    const selectCafe = new google.maps.LatLng(36.560085, 139.902119) //SELECT\n    const test = new google.maps.LatLng(36.204823999, 138.272924) //テスト\n    //-----------------------------------------------------------\n    // const res = google.maps.geometry.spherical.computeDistanceBetween(oyasiryokan, utsunomiya) \n    // console.log(res)\n\n    const utsunomiyaArea = new google.maps.Circle({ //範囲情報\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.5,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.2,\n        // map: map,\n        center: utsunomiya,\n        radius: 100\n    });\n\n    const oyashiryokanArea = new google.maps.Circle({ //範囲情報\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.5,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.2,\n        // map: map,\n        center: oyashiryokan,\n        radius: 1000\n    });\n    const oyaderaArea = new google.maps.Circle({ //範囲情報\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.5,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.2,\n        // map: map,\n        center: oyadera,\n        radius: 500\n    });\n    const kurirujuArea = new google.maps.Circle({ //範囲情報\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.5,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.2,\n        // map: map,\n        center: kuriruju,\n        radius: 500\n    });\n    const mogamijayaArea = new google.maps.Circle({ //範囲情報\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.5,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.2,\n        // map: map,\n        center: mogamijaya,\n        radius: 100\n    });\n    const wakatakeArea = new google.maps.Circle({ //範囲情報\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.5,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.2,\n        // map: map,\n        center: wakatake,\n        radius: 100\n    });\n    const utsunomiyaZooArea = new google.maps.Circle({ //範囲情報\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.5,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.2,\n        // map: map,\n        center: utsunomiyaZoo,\n        radius: 100\n    });\n    const utsunomiyaParkArea = new google.maps.Circle({ //範囲情報\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.5,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.2,\n        // map: map,\n        center: utsunomiyaPark,\n        radius: 1000\n    });\n    const matsugamineArea = new google.maps.Circle({ //範囲情報\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.5,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.2,\n        // map: map,\n        center: matsugamine,\n        radius: 100\n    });\n    const kurasseArea = new google.maps.Circle({ //範囲情報\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.5,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.2,\n        // map: map,\n        center: kurasse,\n        radius: 100\n    });\n    const utsunomiyaTowerArea = new google.maps.Circle({ //範囲情報\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.5,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.2,\n        // map: map,\n        center: utsunomiyaTower,\n        radius: 100\n    });\n    const selectCafeArea = new google.maps.Circle({ //範囲情報\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.5,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.2,\n        // map: map,\n        center: selectCafe,\n        radius: 100\n    });\n    const testArea = new google.maps.Circle({ //範囲情報\n        strokeColor: '#FF0000',\n        strokeOpacity: 0.5,\n        strokeWeight: 2,\n        fillColor: '#FF0000',\n        fillOpacity: 0.2,\n        // map: map,\n        center: test,\n        radius: 100\n    });\n\n\n\n    //-----------------------------------------------------------\n\n    // const [isAvailable, setAvailable] = useState(false);\n    // const [position, setPosition] = useState<{ latitude: number, longitude: number }>();\n\n    // // useEffectが実行されているかどうかを判定するために用意しています\n    // const isFirstRef = useRef(true);\n\n    /*\n     * ページ描画時にGeolocation APIが使えるかどうかをチェックしています\n     * もし使えなければその旨のエラーメッセージを表示させます\n     */\n    // useEffect(() => {\n    //     isFirstRef.current = false;\n    //     if ('geolocation' in navigator) {\n    //         setAvailable(true);\n    //     }\n    // }, [isAvailable]);\n    function error(error: any) {\n        var errorMessage: any = {\n            0: \"原因不明のエラーが発生しました…。\",\n            1: \"位置情報の取得が許可されませんでした…。\",\n            2: \"電波状況などで位置情報が取得できませんでした…。\",\n            3: \"位置情報の取得に時間がかかり過ぎてタイムアウトしました…。\",\n        };\n        console.log(errorMessage[error.code]);//getccurentpotion\n    }\n\n    const getCurrentPosition = () => {\n        navigator.geolocation.getCurrentPosition((position: Position) => {\n            var data = position.coords;\n            var lat = data.latitude;\n            var lng = data.longitude;\n            var latlng = new google.maps.LatLng(lat, lng);\n            // var canvas = document.getElementById('map-canvas') as Element;\n            // document.getElementById('google').innerHTML= \"String(lat)\" ;\n            // var mapOptions = {\n            //     zoom: 15,\n            //     center: latlng,\n            //     mapTypeId: google.maps.MapTypeId.ROADMAP\n            // }\n            // var map = new google.maps.Map(canvas, mapOptions);\n            // const {lati,longa} = position.coords\n            // alert(lat)\n            // alert(lng)\n            setPosition({ latitude: lat, longitude: lng });\n            // marker\n            var markerOptions = {\n                // map: map,\n                position: latlng,\n                draggable: true,\n                visible: true,\n            }\n            new google.maps.Marker(markerOptions);\n            //宇都宮駅\n            if (google.maps.geometry.spherical.computeDistanceBetween(latlng, utsunomiyaArea.getCenter()) <= utsunomiyaArea.getRadius()) { //領域判定\n                console.log(\"宇都宮駅範囲内\")\n                // alert(\"宇都宮駅範囲内\")\n            } else {\n                console.log(\"宇都宮駅範囲外\")\n                // alert(\"宇都宮駅範囲外\")\n            }\n            //大谷資料館\n            if (google.maps.geometry.spherical.computeDistanceBetween(latlng, oyashiryokanArea.getCenter()) <= oyashiryokanArea.getRadius()) { //領域判定\n                console.log(\"大谷資料館範囲内\")\n                // alert(\"大谷資料館範囲内\")\n            } else {\n                console.log(\"大谷資料館範囲外\")\n                // alert(\"大谷資料館範囲外\")\n            }\n            //大谷寺\n            if (google.maps.geometry.spherical.computeDistanceBetween(latlng, oyaderaArea.getCenter()) <= oyaderaArea.getRadius()) { //領域判定\n                console.log(\"大谷寺範囲内\")\n                // alert(\"大谷寺範囲内\")\n            } else {\n                console.log(\"大谷寺範囲外\")\n                // alert(\"大谷寺範囲外\")\n            }\n            //クーリ・ルージュ\n            if (google.maps.geometry.spherical.computeDistanceBetween(latlng, kurirujuArea.getCenter()) <= kurirujuArea.getRadius()) { //領域判定\n                console.log(\"クーリ・ルージュ範囲内\")\n                // alert(\"クーリ・ルージュ範囲内\")\n            } else {\n                console.log(\"クーリ・ルージュ範囲外\")\n                // alert(\"クーリ・ルージュ範囲外\")\n            }\n            //最上茶屋\n            if (google.maps.geometry.spherical.computeDistanceBetween(latlng, mogamijayaArea.getCenter()) <= mogamijayaArea.getRadius()) { //領域判定\n                console.log(\"最上茶屋範囲内\")\n                // alert(\"最上茶屋範囲内\")\n            } else {\n                console.log(\"最上茶屋範囲外\")\n                // alert(\"最上茶屋範囲外\")\n            }\n            //若竹\n            if (google.maps.geometry.spherical.computeDistanceBetween(latlng, wakatakeArea.getCenter()) <= wakatakeArea.getRadius()) { //領域判定\n                console.log(\"若竹範囲内\")\n                // alert(\"若竹範囲内\")\n            } else {\n                console.log(\"若竹範囲外\")\n                // alert(\"若竹範囲外\")\n            }\n            //動物園\n            if (google.maps.geometry.spherical.computeDistanceBetween(latlng, utsunomiyaZooArea.getCenter()) <= utsunomiyaZooArea.getRadius()) { //領域判定\n                console.log(\"動物園範囲内\")\n                // alert(\"動物園範囲内\")\n            } else {\n                console.log(\"動物園範囲外\")\n                // alert(\"動物園範囲外\")\n            }\n            //公園\n            if (google.maps.geometry.spherical.computeDistanceBetween(latlng, utsunomiyaParkArea.getCenter()) <= utsunomiyaParkArea.getRadius()) { //領域判定\n                console.log(\"公園範囲内\")\n                // alert(\"公園範囲内\")\n            } else {\n                console.log(\"公園範囲外\")\n                // alert(\"公園範囲外\")\n            }\n            //松が峰\n            if (google.maps.geometry.spherical.computeDistanceBetween(latlng, matsugamineArea.getCenter()) <= matsugamineArea.getRadius()) { //領域判定\n                console.log(\"松が峰範囲内\")\n                // alert(\"松が峰範囲内\")\n            } else {\n                console.log(\"松が峰範囲外\")\n                // alert(\"松が峰範囲外\")\n            }\n            //くらっせ\n            if (google.maps.geometry.spherical.computeDistanceBetween(latlng, kurasseArea.getCenter()) <= kurasseArea.getRadius()) { //領域判定\n                console.log(\"くらっせ範囲内\")\n                // alert(\"くらっせ範囲内\")\n            } else {\n                console.log(\"くらっせ範囲外\")\n                // alert(\"くらっせ範囲外\")\n            }\n            //宇都宮タワー\n            if (google.maps.geometry.spherical.computeDistanceBetween(latlng, utsunomiyaTowerArea.getCenter()) <= utsunomiyaTowerArea.getRadius()) { //領域判定\n                console.log(\"宇都宮タワー範囲内\")\n                // alert(\"宇都宮タワー範囲内\")\n            } else {\n                console.log(\"宇都宮タワー範囲外\")\n                // alert(\"宇都宮タワー範囲外\")\n            }\n            //SELECT\n            if (google.maps.geometry.spherical.computeDistanceBetween(latlng, selectCafeArea.getCenter()) <= selectCafeArea.getRadius()) { //領域判定\n                console.log(\"SELECT範囲内\")\n                // alert(\"SELECT範囲内\")\n            } else {\n                console.log(\"SELECT範囲外\")\n                // alert(\"SELECT範囲外\")\n            }\n            //test\n            if (google.maps.geometry.spherical.computeDistanceBetween(latlng, testArea.getCenter()) <= testArea.getRadius()) { //領域判定\n                console.log(\"test範囲内\")\n            } else {\n                console.log(\"test駅範囲外\")\n            }\n        }, failure => {\n            if (failure.message.startsWith(\"Only secure origins are allowed\")) {\n                console.log(\"secure issuess\")\n            }\n        });\n    }\n\n    //------------\n\n    return <div>\n\n        <button onClick={() => getCurrentPosition()}>チェックイン</button>\n        {/* <input id=\"google\" type=\"text\"></input> */}\n        <div>latitude:{position?.latitude}</div>\n        <div>longtitude:{position?.longitude}</div>\n        <GoogleMap\n            mapContainerStyle={mapContainerStyle}\n            zoom={15}\n            center={center}\n            options={options}\n        >\n\n            {position?.latitude && <Marker\n                position={new google.maps.LatLng(position?.latitude, position?.longitude)}//値が入っていることを保証しないとエラー\n            // icon={\"📝\"}\n            // label={\"Marker！！\"}\n            // visible={true}\n            // onLoad={onLoad}\n            />}\n            {/* {destination === \"東京\" ?\n                <div>\n\n                    <Marker\n                        position={utsunomiyaArea.getCenter()}\n                    // icon={\"📝\"}\n                    // label={\"Marker！！\"}\n                    // visible={true}\n                    // onLoad={onLoad}\n                    />\n                    <Circle\n                    center={utsunomiyaArea.getCenter()}\n                    radius={100}\n                    visible={true}\n                ></Circle>\n                </div>\n\n                :\n                <div>aaa</div>\n            } */}\n{/* \n            <Marker\n                position={utsunomiyaArea.getCenter()}\n            // icon={\"📝\"}\n            // label={\"Marker！！\"}\n            // visible={true}\n            // onLoad={onLoad}\n            />\n            <Circle\n                center={utsunomiyaArea.getCenter()}\n                radius={100}\n                visible={true}\n            ></Circle>\n\n            <Marker\n                position={oyashiryokanArea.getCenter()}\n            // icon={\"📝\"}\n            // label={\"Marker！！\"}\n            // visible={true}\n            // onLoad={onLoad}\n            />\n            <Circle\n                center={oyashiryokanArea.getCenter()}\n                radius={1000}\n                visible={true}\n            >\n            </Circle>\n            <Marker\n                position={oyaderaArea.getCenter()}\n            // icon={\"📝\"}\n            // label={\"Marker！！\"}\n            // visible={true}\n            // onLoad={onLoad}\n            />\n            <Circle\n                center={oyaderaArea.getCenter()}\n                radius={500}\n                visible={true}\n            >\n            </Circle>\n            <Marker\n                position={kurirujuArea.getCenter()}\n            // icon={\"📝\"}\n            // label={\"Marker！！\"}\n            // visible={true}\n            // onLoad={onLoad}\n            />\n            <Circle\n                center={kurirujuArea.getCenter()}\n                radius={100}\n                visible={true}\n            >\n            </Circle>\n            <Marker\n                position={mogamijayaArea.getCenter()}\n            // icon={\"📝\"}\n            // label={\"Marker！！\"}\n            // visible={true}\n            // onLoad={onLoad}\n            />\n            <Circle\n                center={mogamijayaArea.getCenter()}\n                radius={500}\n                visible={true}\n            >\n            </Circle>\n            <Marker\n                position={wakatakeArea.getCenter()}\n            // icon={\"📝\"}\n            // label={\"Marker！！\"}\n            // visible={true}\n            // onLoad={onLoad}\n            />\n            <Circle\n                center={wakatakeArea.getCenter()}\n                radius={100}\n                visible={true}\n            >\n            </Circle>\n            <Marker\n                position={utsunomiyaZooArea.getCenter()}\n            // icon={\"📝\"}\n            // label={\"Marker！！\"}\n            // visible={true}\n            // onLoad={onLoad}\n            />\n            <Circle\n                center={utsunomiyaZooArea.getCenter()}\n                radius={100}\n                visible={true}\n            >\n            </Circle>\n            <Marker\n                position={utsunomiyaParkArea.getCenter()}\n            // icon={\"📝\"}\n            // label={\"Marker！！\"}\n            // visible={true}\n            // onLoad={onLoad}\n            />\n            <Circle\n                center={utsunomiyaParkArea.getCenter()}\n                radius={1000}\n                visible={true}\n            >\n            </Circle>\n            <Marker\n                position={matsugamineArea.getCenter()}\n            // icon={\"📝\"}\n            // label={\"Marker！！\"}\n            // visible={true}\n            // onLoad={onLoad}\n            />\n            <Circle\n                center={matsugamineArea.getCenter()}\n                radius={100}\n                visible={true}\n            >\n            </Circle>\n            <Marker\n                position={kurasseArea.getCenter()}\n            // icon={\"📝\"}\n            // label={\"Marker！！\"}\n            // visible={true}\n            // onLoad={onLoad}\n            />\n            <Circle\n                center={kurasseArea.getCenter()}\n                radius={100}\n                visible={true}\n            >\n            </Circle>\n            <Marker\n                position={utsunomiyaTowerArea.getCenter()}\n            // icon={\"📝\"}\n            // label={\"Marker！！\"}\n            // visible={true}\n            // onLoad={onLoad}\n            />\n            <Circle\n                center={utsunomiyaTowerArea.getCenter()}\n                radius={100}\n                visible={true}\n            >\n            </Circle>\n            <Marker\n                position={selectCafeArea.getCenter()}\n            // icon={\"📝\"}\n            // label={\"Marker！！\"}\n            // visible={true}\n            // onLoad={onLoad}\n            />\n            <Circle\n                center={selectCafeArea.getCenter()}\n                radius={100}\n                visible={true}\n            >\n            </Circle>\n\n            <Circle\n                center={testArea.getCenter()}\n                radius={100}\n                visible={true}\n            >\n            </Circle> */}\n        </GoogleMap>\n        <BottomTab />\n    </div>\n}\n\n\n\n\n\n\n\nexport default GoogleMapAPI;"]},"metadata":{},"sourceType":"module"}